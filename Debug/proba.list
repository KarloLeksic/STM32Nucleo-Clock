
proba.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005504  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000029c  080055c4  080055c4  000155c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005860  08005860  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08005860  08005860  00015860  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005868  08005868  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005868  08005868  00015868  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800586c  0800586c  0001586c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08005870  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000158  20000070  080058e0  00020070  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200001c8  080058e0  000201c8  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000bb2d  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001e77  00000000  00000000  0002bbc5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000978  00000000  00000000  0002da40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000008b0  00000000  00000000  0002e3b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00014999  00000000  00000000  0002ec68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c55f  00000000  00000000  00043601  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007decf  00000000  00000000  0004fb60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000cda2f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000291c  00000000  00000000  000cda80  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000070 	.word	0x20000070
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080055ac 	.word	0x080055ac

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000074 	.word	0x20000074
 8000104:	080055ac 	.word	0x080055ac

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_shi>:
 8000118:	b403      	push	{r0, r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0040      	lsls	r0, r0, #1
 8000120:	0049      	lsls	r1, r1, #1
 8000122:	5e09      	ldrsh	r1, [r1, r0]
 8000124:	0049      	lsls	r1, r1, #1
 8000126:	448e      	add	lr, r1
 8000128:	bc03      	pop	{r0, r1}
 800012a:	4770      	bx	lr

0800012c <__udivsi3>:
 800012c:	2200      	movs	r2, #0
 800012e:	0843      	lsrs	r3, r0, #1
 8000130:	428b      	cmp	r3, r1
 8000132:	d374      	bcc.n	800021e <__udivsi3+0xf2>
 8000134:	0903      	lsrs	r3, r0, #4
 8000136:	428b      	cmp	r3, r1
 8000138:	d35f      	bcc.n	80001fa <__udivsi3+0xce>
 800013a:	0a03      	lsrs	r3, r0, #8
 800013c:	428b      	cmp	r3, r1
 800013e:	d344      	bcc.n	80001ca <__udivsi3+0x9e>
 8000140:	0b03      	lsrs	r3, r0, #12
 8000142:	428b      	cmp	r3, r1
 8000144:	d328      	bcc.n	8000198 <__udivsi3+0x6c>
 8000146:	0c03      	lsrs	r3, r0, #16
 8000148:	428b      	cmp	r3, r1
 800014a:	d30d      	bcc.n	8000168 <__udivsi3+0x3c>
 800014c:	22ff      	movs	r2, #255	; 0xff
 800014e:	0209      	lsls	r1, r1, #8
 8000150:	ba12      	rev	r2, r2
 8000152:	0c03      	lsrs	r3, r0, #16
 8000154:	428b      	cmp	r3, r1
 8000156:	d302      	bcc.n	800015e <__udivsi3+0x32>
 8000158:	1212      	asrs	r2, r2, #8
 800015a:	0209      	lsls	r1, r1, #8
 800015c:	d065      	beq.n	800022a <__udivsi3+0xfe>
 800015e:	0b03      	lsrs	r3, r0, #12
 8000160:	428b      	cmp	r3, r1
 8000162:	d319      	bcc.n	8000198 <__udivsi3+0x6c>
 8000164:	e000      	b.n	8000168 <__udivsi3+0x3c>
 8000166:	0a09      	lsrs	r1, r1, #8
 8000168:	0bc3      	lsrs	r3, r0, #15
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x46>
 800016e:	03cb      	lsls	r3, r1, #15
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0b83      	lsrs	r3, r0, #14
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x52>
 800017a:	038b      	lsls	r3, r1, #14
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0b43      	lsrs	r3, r0, #13
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x5e>
 8000186:	034b      	lsls	r3, r1, #13
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0b03      	lsrs	r3, r0, #12
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x6a>
 8000192:	030b      	lsls	r3, r1, #12
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0ac3      	lsrs	r3, r0, #11
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x76>
 800019e:	02cb      	lsls	r3, r1, #11
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0a83      	lsrs	r3, r0, #10
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x82>
 80001aa:	028b      	lsls	r3, r1, #10
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0a43      	lsrs	r3, r0, #9
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x8e>
 80001b6:	024b      	lsls	r3, r1, #9
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0a03      	lsrs	r3, r0, #8
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x9a>
 80001c2:	020b      	lsls	r3, r1, #8
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	d2cd      	bcs.n	8000166 <__udivsi3+0x3a>
 80001ca:	09c3      	lsrs	r3, r0, #7
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xa8>
 80001d0:	01cb      	lsls	r3, r1, #7
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	0983      	lsrs	r3, r0, #6
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xb4>
 80001dc:	018b      	lsls	r3, r1, #6
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0943      	lsrs	r3, r0, #5
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xc0>
 80001e8:	014b      	lsls	r3, r1, #5
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0903      	lsrs	r3, r0, #4
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xcc>
 80001f4:	010b      	lsls	r3, r1, #4
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	08c3      	lsrs	r3, r0, #3
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xd8>
 8000200:	00cb      	lsls	r3, r1, #3
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	0883      	lsrs	r3, r0, #2
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xe4>
 800020c:	008b      	lsls	r3, r1, #2
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	0843      	lsrs	r3, r0, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xf0>
 8000218:	004b      	lsls	r3, r1, #1
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	1a41      	subs	r1, r0, r1
 8000220:	d200      	bcs.n	8000224 <__udivsi3+0xf8>
 8000222:	4601      	mov	r1, r0
 8000224:	4152      	adcs	r2, r2
 8000226:	4610      	mov	r0, r2
 8000228:	4770      	bx	lr
 800022a:	e7ff      	b.n	800022c <__udivsi3+0x100>
 800022c:	b501      	push	{r0, lr}
 800022e:	2000      	movs	r0, #0
 8000230:	f000 f806 	bl	8000240 <__aeabi_idiv0>
 8000234:	bd02      	pop	{r1, pc}
 8000236:	46c0      	nop			; (mov r8, r8)

08000238 <__aeabi_uidivmod>:
 8000238:	2900      	cmp	r1, #0
 800023a:	d0f7      	beq.n	800022c <__udivsi3+0x100>
 800023c:	e776      	b.n	800012c <__udivsi3>
 800023e:	4770      	bx	lr

08000240 <__aeabi_idiv0>:
 8000240:	4770      	bx	lr
 8000242:	46c0      	nop			; (mov r8, r8)

08000244 <__aeabi_uldivmod>:
 8000244:	2b00      	cmp	r3, #0
 8000246:	d111      	bne.n	800026c <__aeabi_uldivmod+0x28>
 8000248:	2a00      	cmp	r2, #0
 800024a:	d10f      	bne.n	800026c <__aeabi_uldivmod+0x28>
 800024c:	2900      	cmp	r1, #0
 800024e:	d100      	bne.n	8000252 <__aeabi_uldivmod+0xe>
 8000250:	2800      	cmp	r0, #0
 8000252:	d002      	beq.n	800025a <__aeabi_uldivmod+0x16>
 8000254:	2100      	movs	r1, #0
 8000256:	43c9      	mvns	r1, r1
 8000258:	0008      	movs	r0, r1
 800025a:	b407      	push	{r0, r1, r2}
 800025c:	4802      	ldr	r0, [pc, #8]	; (8000268 <__aeabi_uldivmod+0x24>)
 800025e:	a102      	add	r1, pc, #8	; (adr r1, 8000268 <__aeabi_uldivmod+0x24>)
 8000260:	1840      	adds	r0, r0, r1
 8000262:	9002      	str	r0, [sp, #8]
 8000264:	bd03      	pop	{r0, r1, pc}
 8000266:	46c0      	nop			; (mov r8, r8)
 8000268:	ffffffd9 	.word	0xffffffd9
 800026c:	b403      	push	{r0, r1}
 800026e:	4668      	mov	r0, sp
 8000270:	b501      	push	{r0, lr}
 8000272:	9802      	ldr	r0, [sp, #8]
 8000274:	f000 f834 	bl	80002e0 <__udivmoddi4>
 8000278:	9b01      	ldr	r3, [sp, #4]
 800027a:	469e      	mov	lr, r3
 800027c:	b002      	add	sp, #8
 800027e:	bc0c      	pop	{r2, r3}
 8000280:	4770      	bx	lr
 8000282:	46c0      	nop			; (mov r8, r8)

08000284 <__aeabi_lmul>:
 8000284:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000286:	46ce      	mov	lr, r9
 8000288:	4647      	mov	r7, r8
 800028a:	b580      	push	{r7, lr}
 800028c:	0007      	movs	r7, r0
 800028e:	4699      	mov	r9, r3
 8000290:	0c3b      	lsrs	r3, r7, #16
 8000292:	469c      	mov	ip, r3
 8000294:	0413      	lsls	r3, r2, #16
 8000296:	0c1b      	lsrs	r3, r3, #16
 8000298:	001d      	movs	r5, r3
 800029a:	000e      	movs	r6, r1
 800029c:	4661      	mov	r1, ip
 800029e:	0400      	lsls	r0, r0, #16
 80002a0:	0c14      	lsrs	r4, r2, #16
 80002a2:	0c00      	lsrs	r0, r0, #16
 80002a4:	4345      	muls	r5, r0
 80002a6:	434b      	muls	r3, r1
 80002a8:	4360      	muls	r0, r4
 80002aa:	4361      	muls	r1, r4
 80002ac:	18c0      	adds	r0, r0, r3
 80002ae:	0c2c      	lsrs	r4, r5, #16
 80002b0:	1820      	adds	r0, r4, r0
 80002b2:	468c      	mov	ip, r1
 80002b4:	4283      	cmp	r3, r0
 80002b6:	d903      	bls.n	80002c0 <__aeabi_lmul+0x3c>
 80002b8:	2380      	movs	r3, #128	; 0x80
 80002ba:	025b      	lsls	r3, r3, #9
 80002bc:	4698      	mov	r8, r3
 80002be:	44c4      	add	ip, r8
 80002c0:	4649      	mov	r1, r9
 80002c2:	4379      	muls	r1, r7
 80002c4:	4372      	muls	r2, r6
 80002c6:	0c03      	lsrs	r3, r0, #16
 80002c8:	4463      	add	r3, ip
 80002ca:	042d      	lsls	r5, r5, #16
 80002cc:	0c2d      	lsrs	r5, r5, #16
 80002ce:	18c9      	adds	r1, r1, r3
 80002d0:	0400      	lsls	r0, r0, #16
 80002d2:	1940      	adds	r0, r0, r5
 80002d4:	1889      	adds	r1, r1, r2
 80002d6:	bcc0      	pop	{r6, r7}
 80002d8:	46b9      	mov	r9, r7
 80002da:	46b0      	mov	r8, r6
 80002dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80002de:	46c0      	nop			; (mov r8, r8)

080002e0 <__udivmoddi4>:
 80002e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002e2:	4657      	mov	r7, sl
 80002e4:	464e      	mov	r6, r9
 80002e6:	4645      	mov	r5, r8
 80002e8:	46de      	mov	lr, fp
 80002ea:	b5e0      	push	{r5, r6, r7, lr}
 80002ec:	0004      	movs	r4, r0
 80002ee:	000d      	movs	r5, r1
 80002f0:	4692      	mov	sl, r2
 80002f2:	4699      	mov	r9, r3
 80002f4:	b083      	sub	sp, #12
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d830      	bhi.n	800035c <__udivmoddi4+0x7c>
 80002fa:	d02d      	beq.n	8000358 <__udivmoddi4+0x78>
 80002fc:	4649      	mov	r1, r9
 80002fe:	4650      	mov	r0, sl
 8000300:	f000 f8ba 	bl	8000478 <__clzdi2>
 8000304:	0029      	movs	r1, r5
 8000306:	0006      	movs	r6, r0
 8000308:	0020      	movs	r0, r4
 800030a:	f000 f8b5 	bl	8000478 <__clzdi2>
 800030e:	1a33      	subs	r3, r6, r0
 8000310:	4698      	mov	r8, r3
 8000312:	3b20      	subs	r3, #32
 8000314:	469b      	mov	fp, r3
 8000316:	d433      	bmi.n	8000380 <__udivmoddi4+0xa0>
 8000318:	465a      	mov	r2, fp
 800031a:	4653      	mov	r3, sl
 800031c:	4093      	lsls	r3, r2
 800031e:	4642      	mov	r2, r8
 8000320:	001f      	movs	r7, r3
 8000322:	4653      	mov	r3, sl
 8000324:	4093      	lsls	r3, r2
 8000326:	001e      	movs	r6, r3
 8000328:	42af      	cmp	r7, r5
 800032a:	d83a      	bhi.n	80003a2 <__udivmoddi4+0xc2>
 800032c:	42af      	cmp	r7, r5
 800032e:	d100      	bne.n	8000332 <__udivmoddi4+0x52>
 8000330:	e078      	b.n	8000424 <__udivmoddi4+0x144>
 8000332:	465b      	mov	r3, fp
 8000334:	1ba4      	subs	r4, r4, r6
 8000336:	41bd      	sbcs	r5, r7
 8000338:	2b00      	cmp	r3, #0
 800033a:	da00      	bge.n	800033e <__udivmoddi4+0x5e>
 800033c:	e075      	b.n	800042a <__udivmoddi4+0x14a>
 800033e:	2200      	movs	r2, #0
 8000340:	2300      	movs	r3, #0
 8000342:	9200      	str	r2, [sp, #0]
 8000344:	9301      	str	r3, [sp, #4]
 8000346:	2301      	movs	r3, #1
 8000348:	465a      	mov	r2, fp
 800034a:	4093      	lsls	r3, r2
 800034c:	9301      	str	r3, [sp, #4]
 800034e:	2301      	movs	r3, #1
 8000350:	4642      	mov	r2, r8
 8000352:	4093      	lsls	r3, r2
 8000354:	9300      	str	r3, [sp, #0]
 8000356:	e028      	b.n	80003aa <__udivmoddi4+0xca>
 8000358:	4282      	cmp	r2, r0
 800035a:	d9cf      	bls.n	80002fc <__udivmoddi4+0x1c>
 800035c:	2200      	movs	r2, #0
 800035e:	2300      	movs	r3, #0
 8000360:	9200      	str	r2, [sp, #0]
 8000362:	9301      	str	r3, [sp, #4]
 8000364:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8000366:	2b00      	cmp	r3, #0
 8000368:	d001      	beq.n	800036e <__udivmoddi4+0x8e>
 800036a:	601c      	str	r4, [r3, #0]
 800036c:	605d      	str	r5, [r3, #4]
 800036e:	9800      	ldr	r0, [sp, #0]
 8000370:	9901      	ldr	r1, [sp, #4]
 8000372:	b003      	add	sp, #12
 8000374:	bcf0      	pop	{r4, r5, r6, r7}
 8000376:	46bb      	mov	fp, r7
 8000378:	46b2      	mov	sl, r6
 800037a:	46a9      	mov	r9, r5
 800037c:	46a0      	mov	r8, r4
 800037e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000380:	4642      	mov	r2, r8
 8000382:	2320      	movs	r3, #32
 8000384:	1a9b      	subs	r3, r3, r2
 8000386:	4652      	mov	r2, sl
 8000388:	40da      	lsrs	r2, r3
 800038a:	4641      	mov	r1, r8
 800038c:	0013      	movs	r3, r2
 800038e:	464a      	mov	r2, r9
 8000390:	408a      	lsls	r2, r1
 8000392:	0017      	movs	r7, r2
 8000394:	4642      	mov	r2, r8
 8000396:	431f      	orrs	r7, r3
 8000398:	4653      	mov	r3, sl
 800039a:	4093      	lsls	r3, r2
 800039c:	001e      	movs	r6, r3
 800039e:	42af      	cmp	r7, r5
 80003a0:	d9c4      	bls.n	800032c <__udivmoddi4+0x4c>
 80003a2:	2200      	movs	r2, #0
 80003a4:	2300      	movs	r3, #0
 80003a6:	9200      	str	r2, [sp, #0]
 80003a8:	9301      	str	r3, [sp, #4]
 80003aa:	4643      	mov	r3, r8
 80003ac:	2b00      	cmp	r3, #0
 80003ae:	d0d9      	beq.n	8000364 <__udivmoddi4+0x84>
 80003b0:	07fb      	lsls	r3, r7, #31
 80003b2:	0872      	lsrs	r2, r6, #1
 80003b4:	431a      	orrs	r2, r3
 80003b6:	4646      	mov	r6, r8
 80003b8:	087b      	lsrs	r3, r7, #1
 80003ba:	e00e      	b.n	80003da <__udivmoddi4+0xfa>
 80003bc:	42ab      	cmp	r3, r5
 80003be:	d101      	bne.n	80003c4 <__udivmoddi4+0xe4>
 80003c0:	42a2      	cmp	r2, r4
 80003c2:	d80c      	bhi.n	80003de <__udivmoddi4+0xfe>
 80003c4:	1aa4      	subs	r4, r4, r2
 80003c6:	419d      	sbcs	r5, r3
 80003c8:	2001      	movs	r0, #1
 80003ca:	1924      	adds	r4, r4, r4
 80003cc:	416d      	adcs	r5, r5
 80003ce:	2100      	movs	r1, #0
 80003d0:	3e01      	subs	r6, #1
 80003d2:	1824      	adds	r4, r4, r0
 80003d4:	414d      	adcs	r5, r1
 80003d6:	2e00      	cmp	r6, #0
 80003d8:	d006      	beq.n	80003e8 <__udivmoddi4+0x108>
 80003da:	42ab      	cmp	r3, r5
 80003dc:	d9ee      	bls.n	80003bc <__udivmoddi4+0xdc>
 80003de:	3e01      	subs	r6, #1
 80003e0:	1924      	adds	r4, r4, r4
 80003e2:	416d      	adcs	r5, r5
 80003e4:	2e00      	cmp	r6, #0
 80003e6:	d1f8      	bne.n	80003da <__udivmoddi4+0xfa>
 80003e8:	9800      	ldr	r0, [sp, #0]
 80003ea:	9901      	ldr	r1, [sp, #4]
 80003ec:	465b      	mov	r3, fp
 80003ee:	1900      	adds	r0, r0, r4
 80003f0:	4169      	adcs	r1, r5
 80003f2:	2b00      	cmp	r3, #0
 80003f4:	db24      	blt.n	8000440 <__udivmoddi4+0x160>
 80003f6:	002b      	movs	r3, r5
 80003f8:	465a      	mov	r2, fp
 80003fa:	4644      	mov	r4, r8
 80003fc:	40d3      	lsrs	r3, r2
 80003fe:	002a      	movs	r2, r5
 8000400:	40e2      	lsrs	r2, r4
 8000402:	001c      	movs	r4, r3
 8000404:	465b      	mov	r3, fp
 8000406:	0015      	movs	r5, r2
 8000408:	2b00      	cmp	r3, #0
 800040a:	db2a      	blt.n	8000462 <__udivmoddi4+0x182>
 800040c:	0026      	movs	r6, r4
 800040e:	409e      	lsls	r6, r3
 8000410:	0033      	movs	r3, r6
 8000412:	0026      	movs	r6, r4
 8000414:	4647      	mov	r7, r8
 8000416:	40be      	lsls	r6, r7
 8000418:	0032      	movs	r2, r6
 800041a:	1a80      	subs	r0, r0, r2
 800041c:	4199      	sbcs	r1, r3
 800041e:	9000      	str	r0, [sp, #0]
 8000420:	9101      	str	r1, [sp, #4]
 8000422:	e79f      	b.n	8000364 <__udivmoddi4+0x84>
 8000424:	42a3      	cmp	r3, r4
 8000426:	d8bc      	bhi.n	80003a2 <__udivmoddi4+0xc2>
 8000428:	e783      	b.n	8000332 <__udivmoddi4+0x52>
 800042a:	4642      	mov	r2, r8
 800042c:	2320      	movs	r3, #32
 800042e:	2100      	movs	r1, #0
 8000430:	1a9b      	subs	r3, r3, r2
 8000432:	2200      	movs	r2, #0
 8000434:	9100      	str	r1, [sp, #0]
 8000436:	9201      	str	r2, [sp, #4]
 8000438:	2201      	movs	r2, #1
 800043a:	40da      	lsrs	r2, r3
 800043c:	9201      	str	r2, [sp, #4]
 800043e:	e786      	b.n	800034e <__udivmoddi4+0x6e>
 8000440:	4642      	mov	r2, r8
 8000442:	2320      	movs	r3, #32
 8000444:	1a9b      	subs	r3, r3, r2
 8000446:	002a      	movs	r2, r5
 8000448:	4646      	mov	r6, r8
 800044a:	409a      	lsls	r2, r3
 800044c:	0023      	movs	r3, r4
 800044e:	40f3      	lsrs	r3, r6
 8000450:	4644      	mov	r4, r8
 8000452:	4313      	orrs	r3, r2
 8000454:	002a      	movs	r2, r5
 8000456:	40e2      	lsrs	r2, r4
 8000458:	001c      	movs	r4, r3
 800045a:	465b      	mov	r3, fp
 800045c:	0015      	movs	r5, r2
 800045e:	2b00      	cmp	r3, #0
 8000460:	dad4      	bge.n	800040c <__udivmoddi4+0x12c>
 8000462:	4642      	mov	r2, r8
 8000464:	002f      	movs	r7, r5
 8000466:	2320      	movs	r3, #32
 8000468:	0026      	movs	r6, r4
 800046a:	4097      	lsls	r7, r2
 800046c:	1a9b      	subs	r3, r3, r2
 800046e:	40de      	lsrs	r6, r3
 8000470:	003b      	movs	r3, r7
 8000472:	4333      	orrs	r3, r6
 8000474:	e7cd      	b.n	8000412 <__udivmoddi4+0x132>
 8000476:	46c0      	nop			; (mov r8, r8)

08000478 <__clzdi2>:
 8000478:	b510      	push	{r4, lr}
 800047a:	2900      	cmp	r1, #0
 800047c:	d103      	bne.n	8000486 <__clzdi2+0xe>
 800047e:	f000 f807 	bl	8000490 <__clzsi2>
 8000482:	3020      	adds	r0, #32
 8000484:	e002      	b.n	800048c <__clzdi2+0x14>
 8000486:	0008      	movs	r0, r1
 8000488:	f000 f802 	bl	8000490 <__clzsi2>
 800048c:	bd10      	pop	{r4, pc}
 800048e:	46c0      	nop			; (mov r8, r8)

08000490 <__clzsi2>:
 8000490:	211c      	movs	r1, #28
 8000492:	2301      	movs	r3, #1
 8000494:	041b      	lsls	r3, r3, #16
 8000496:	4298      	cmp	r0, r3
 8000498:	d301      	bcc.n	800049e <__clzsi2+0xe>
 800049a:	0c00      	lsrs	r0, r0, #16
 800049c:	3910      	subs	r1, #16
 800049e:	0a1b      	lsrs	r3, r3, #8
 80004a0:	4298      	cmp	r0, r3
 80004a2:	d301      	bcc.n	80004a8 <__clzsi2+0x18>
 80004a4:	0a00      	lsrs	r0, r0, #8
 80004a6:	3908      	subs	r1, #8
 80004a8:	091b      	lsrs	r3, r3, #4
 80004aa:	4298      	cmp	r0, r3
 80004ac:	d301      	bcc.n	80004b2 <__clzsi2+0x22>
 80004ae:	0900      	lsrs	r0, r0, #4
 80004b0:	3904      	subs	r1, #4
 80004b2:	a202      	add	r2, pc, #8	; (adr r2, 80004bc <__clzsi2+0x2c>)
 80004b4:	5c10      	ldrb	r0, [r2, r0]
 80004b6:	1840      	adds	r0, r0, r1
 80004b8:	4770      	bx	lr
 80004ba:	46c0      	nop			; (mov r8, r8)
 80004bc:	02020304 	.word	0x02020304
 80004c0:	01010101 	.word	0x01010101
	...

080004cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004ce:	b09b      	sub	sp, #108	; 0x6c
 80004d0:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004d2:	f000 fbfb 	bl	8000ccc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004d6:	f000 f8c3 	bl	8000660 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004da:	f000 f9f1 	bl	80008c0 <MX_GPIO_Init>
  MX_DMA_Init();
 80004de:	f000 f9d1 	bl	8000884 <MX_DMA_Init>
  MX_USART2_UART_Init();
 80004e2:	f000 f99f 	bl	8000824 <MX_USART2_UART_Init>
  MX_RTC_Init();
 80004e6:	f000 f939 	bl	800075c <MX_RTC_Init>
  /* USER CODE BEGIN 2 */

  uint8_t test[] = "To set clock enter SET hh:mm:ss\n\rTo see clock enter SHOW CLOCK\n\r";
 80004ea:	2614      	movs	r6, #20
 80004ec:	2308      	movs	r3, #8
 80004ee:	18f2      	adds	r2, r6, r3
 80004f0:	19d2      	adds	r2, r2, r7
 80004f2:	4b50      	ldr	r3, [pc, #320]	; (8000634 <main+0x168>)
 80004f4:	0010      	movs	r0, r2
 80004f6:	0019      	movs	r1, r3
 80004f8:	2341      	movs	r3, #65	; 0x41
 80004fa:	001a      	movs	r2, r3
 80004fc:	f003 fece 	bl	800429c <memcpy>
  HAL_UART_Transmit(&huart2, test, sizeof(test), 100);
 8000500:	2308      	movs	r3, #8
 8000502:	18f3      	adds	r3, r6, r3
 8000504:	19d9      	adds	r1, r3, r7
 8000506:	484c      	ldr	r0, [pc, #304]	; (8000638 <main+0x16c>)
 8000508:	2364      	movs	r3, #100	; 0x64
 800050a:	2241      	movs	r2, #65	; 0x41
 800050c:	f002 fbe2 	bl	8002cd4 <HAL_UART_Transmit>

  HAL_UARTEx_ReceiveToIdle_DMA(&huart2, RxBuf, RxBuf_SIZE);
 8000510:	494a      	ldr	r1, [pc, #296]	; (800063c <main+0x170>)
 8000512:	4b49      	ldr	r3, [pc, #292]	; (8000638 <main+0x16c>)
 8000514:	220f      	movs	r2, #15
 8000516:	0018      	movs	r0, r3
 8000518:	f003 fe27 	bl	800416a <HAL_UARTEx_ReceiveToIdle_DMA>
  __HAL_DMA_DISABLE_IT(&hdma_usart2_rx, DMA_IT_HT);
 800051c:	4b48      	ldr	r3, [pc, #288]	; (8000640 <main+0x174>)
 800051e:	681b      	ldr	r3, [r3, #0]
 8000520:	681a      	ldr	r2, [r3, #0]
 8000522:	4b47      	ldr	r3, [pc, #284]	; (8000640 <main+0x174>)
 8000524:	681b      	ldr	r3, [r3, #0]
 8000526:	2104      	movs	r1, #4
 8000528:	438a      	bics	r2, r1
 800052a:	601a      	str	r2, [r3, #0]

  currTick = prevTick = (uint64_t)HAL_GetTick();
 800052c:	f000 fc34 	bl	8000d98 <HAL_GetTick>
 8000530:	0003      	movs	r3, r0
 8000532:	603b      	str	r3, [r7, #0]
 8000534:	2300      	movs	r3, #0
 8000536:	607b      	str	r3, [r7, #4]
 8000538:	4b42      	ldr	r3, [pc, #264]	; (8000644 <main+0x178>)
 800053a:	6839      	ldr	r1, [r7, #0]
 800053c:	687a      	ldr	r2, [r7, #4]
 800053e:	6019      	str	r1, [r3, #0]
 8000540:	605a      	str	r2, [r3, #4]
 8000542:	4b40      	ldr	r3, [pc, #256]	; (8000644 <main+0x178>)
 8000544:	681a      	ldr	r2, [r3, #0]
 8000546:	685b      	ldr	r3, [r3, #4]
 8000548:	493f      	ldr	r1, [pc, #252]	; (8000648 <main+0x17c>)
 800054a:	600a      	str	r2, [r1, #0]
 800054c:	604b      	str	r3, [r1, #4]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  //periodicki ispis sata svake minute
	  currTick = (uint64_t)HAL_GetTick();
 800054e:	f000 fc23 	bl	8000d98 <HAL_GetTick>
 8000552:	0003      	movs	r3, r0
 8000554:	001c      	movs	r4, r3
 8000556:	2300      	movs	r3, #0
 8000558:	001d      	movs	r5, r3
 800055a:	4b3b      	ldr	r3, [pc, #236]	; (8000648 <main+0x17c>)
 800055c:	601c      	str	r4, [r3, #0]
 800055e:	605d      	str	r5, [r3, #4]
	  if(currTick - prevTick >= 60 * 1000)
 8000560:	4b39      	ldr	r3, [pc, #228]	; (8000648 <main+0x17c>)
 8000562:	6818      	ldr	r0, [r3, #0]
 8000564:	6859      	ldr	r1, [r3, #4]
 8000566:	4b37      	ldr	r3, [pc, #220]	; (8000644 <main+0x178>)
 8000568:	681a      	ldr	r2, [r3, #0]
 800056a:	685b      	ldr	r3, [r3, #4]
 800056c:	1a80      	subs	r0, r0, r2
 800056e:	4199      	sbcs	r1, r3
 8000570:	0002      	movs	r2, r0
 8000572:	000b      	movs	r3, r1
 8000574:	2b00      	cmp	r3, #0
 8000576:	d103      	bne.n	8000580 <main+0xb4>
 8000578:	d10a      	bne.n	8000590 <main+0xc4>
 800057a:	4934      	ldr	r1, [pc, #208]	; (800064c <main+0x180>)
 800057c:	428a      	cmp	r2, r1
 800057e:	d907      	bls.n	8000590 <main+0xc4>
	  {
		  printCurrTime();
 8000580:	f000 f9fc 	bl	800097c <printCurrTime>
		  prevTick = currTick;
 8000584:	4b30      	ldr	r3, [pc, #192]	; (8000648 <main+0x17c>)
 8000586:	681a      	ldr	r2, [r3, #0]
 8000588:	685b      	ldr	r3, [r3, #4]
 800058a:	492e      	ldr	r1, [pc, #184]	; (8000644 <main+0x178>)
 800058c:	600a      	str	r2, [r1, #0]
 800058e:	604b      	str	r3, [r1, #4]
	  }

	  //ispis ako je korisnik unio SHOW CLOCK
	  if(strstr(mainBuf, "SHOW CLOCK")) //provjeravamo buffer jer sve sto korisnik unese spremamo u buffer
 8000590:	4a2f      	ldr	r2, [pc, #188]	; (8000650 <main+0x184>)
 8000592:	4b30      	ldr	r3, [pc, #192]	; (8000654 <main+0x188>)
 8000594:	0011      	movs	r1, r2
 8000596:	0018      	movs	r0, r3
 8000598:	f003 fedc 	bl	8004354 <strstr>
 800059c:	1e03      	subs	r3, r0, #0
 800059e:	d007      	beq.n	80005b0 <main+0xe4>
	  {
		  printCurrTime();
 80005a0:	f000 f9ec 	bl	800097c <printCurrTime>
		  memset(mainBuf, '\0', 20); //postavljanje cijelog buffera na 0 kako bi se ispis izvrsio samo jednom
 80005a4:	4b2b      	ldr	r3, [pc, #172]	; (8000654 <main+0x188>)
 80005a6:	2214      	movs	r2, #20
 80005a8:	2100      	movs	r1, #0
 80005aa:	0018      	movs	r0, r3
 80005ac:	f003 fe7f 	bl	80042ae <memset>
	   *  */

	  char setText[5]; //samo zato da bi sscanf mogao procitati unos u zeljenom formatu
	  int h, m, s; //sati, minute i sekunde za postavljanje

	  sscanf(mainBuf, "%s %d:%d:%d", setText, &h, &m, &s); //ono sto korisnik unese nalazi se u main bufferu i zato citamo iz njega
 80005b0:	2308      	movs	r3, #8
 80005b2:	2208      	movs	r2, #8
 80005b4:	189b      	adds	r3, r3, r2
 80005b6:	19de      	adds	r6, r3, r7
 80005b8:	230c      	movs	r3, #12
 80005ba:	1899      	adds	r1, r3, r2
 80005bc:	19ca      	adds	r2, r1, r7
 80005be:	4926      	ldr	r1, [pc, #152]	; (8000658 <main+0x18c>)
 80005c0:	4824      	ldr	r0, [pc, #144]	; (8000654 <main+0x188>)
 80005c2:	2308      	movs	r3, #8
 80005c4:	18fb      	adds	r3, r7, r3
 80005c6:	9301      	str	r3, [sp, #4]
 80005c8:	230c      	movs	r3, #12
 80005ca:	18fb      	adds	r3, r7, r3
 80005cc:	9300      	str	r3, [sp, #0]
 80005ce:	0033      	movs	r3, r6
 80005d0:	f003 fe96 	bl	8004300 <siscanf>

	  if(strstr(setText, "SET"))//ako je korisnik unio kljucnu rijec SET
 80005d4:	4a21      	ldr	r2, [pc, #132]	; (800065c <main+0x190>)
 80005d6:	260c      	movs	r6, #12
 80005d8:	2308      	movs	r3, #8
 80005da:	18f1      	adds	r1, r6, r3
 80005dc:	19cb      	adds	r3, r1, r7
 80005de:	0011      	movs	r1, r2
 80005e0:	0018      	movs	r0, r3
 80005e2:	f003 feb7 	bl	8004354 <strstr>
 80005e6:	1e03      	subs	r3, r0, #0
 80005e8:	d0b1      	beq.n	800054e <main+0x82>
	  {
		  if(h >= 0 && h < 24 && m >= 0 && m < 60 && s >= 0 && s < 60) //ako je ispravan format datuma, nemoze biti 25:60:60 i veci
 80005ea:	693b      	ldr	r3, [r7, #16]
 80005ec:	2b00      	cmp	r3, #0
 80005ee:	dbae      	blt.n	800054e <main+0x82>
 80005f0:	693b      	ldr	r3, [r7, #16]
 80005f2:	2b17      	cmp	r3, #23
 80005f4:	dcab      	bgt.n	800054e <main+0x82>
 80005f6:	68fb      	ldr	r3, [r7, #12]
 80005f8:	2b00      	cmp	r3, #0
 80005fa:	dba8      	blt.n	800054e <main+0x82>
 80005fc:	68fb      	ldr	r3, [r7, #12]
 80005fe:	2b3b      	cmp	r3, #59	; 0x3b
 8000600:	dca5      	bgt.n	800054e <main+0x82>
 8000602:	68bb      	ldr	r3, [r7, #8]
 8000604:	2b00      	cmp	r3, #0
 8000606:	dba2      	blt.n	800054e <main+0x82>
 8000608:	68bb      	ldr	r3, [r7, #8]
 800060a:	2b3b      	cmp	r3, #59	; 0x3b
 800060c:	dc9f      	bgt.n	800054e <main+0x82>
		  {
			  setTime(h, m, s); //postavljanje sata
 800060e:	693b      	ldr	r3, [r7, #16]
 8000610:	68f9      	ldr	r1, [r7, #12]
 8000612:	68ba      	ldr	r2, [r7, #8]
 8000614:	0018      	movs	r0, r3
 8000616:	f000 f9e9 	bl	80009ec <setTime>
			  memset(setText, '\0', 5); //ciscenje memorije jer bi inace uvijet uvijek bio zadovoljen i konstantno bi se postavljalo to vrijeme
 800061a:	2308      	movs	r3, #8
 800061c:	18f3      	adds	r3, r6, r3
 800061e:	19db      	adds	r3, r3, r7
 8000620:	2205      	movs	r2, #5
 8000622:	2100      	movs	r1, #0
 8000624:	0018      	movs	r0, r3
 8000626:	f003 fe42 	bl	80042ae <memset>
			  Da bi drugi uvjet u tom slucaju bio nezadovoljen, postavljena je vrijednost koja je nedozvoljena
			  da nebi doslo do namjestanja sata ukoliko nisu zadani svi parametri. Posto je u pitanju logicko i,
			  dovoljan je da jedan od njih nebude tocan i zato postavljamo samo sekunde na -1.
			  */

			  s = -1;
 800062a:	2301      	movs	r3, #1
 800062c:	425b      	negs	r3, r3
 800062e:	60bb      	str	r3, [r7, #8]
  {
 8000630:	e78d      	b.n	800054e <main+0x82>
 8000632:	46c0      	nop			; (mov r8, r8)
 8000634:	080055e0 	.word	0x080055e0
 8000638:	200000b0 	.word	0x200000b0
 800063c:	2000017c 	.word	0x2000017c
 8000640:	20000134 	.word	0x20000134
 8000644:	200001a8 	.word	0x200001a8
 8000648:	200001a0 	.word	0x200001a0
 800064c:	0000ea5f 	.word	0x0000ea5f
 8000650:	080055c4 	.word	0x080055c4
 8000654:	2000018c 	.word	0x2000018c
 8000658:	080055d0 	.word	0x080055d0
 800065c:	080055dc 	.word	0x080055dc

08000660 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000660:	b590      	push	{r4, r7, lr}
 8000662:	b09d      	sub	sp, #116	; 0x74
 8000664:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000666:	2438      	movs	r4, #56	; 0x38
 8000668:	193b      	adds	r3, r7, r4
 800066a:	0018      	movs	r0, r3
 800066c:	2338      	movs	r3, #56	; 0x38
 800066e:	001a      	movs	r2, r3
 8000670:	2100      	movs	r1, #0
 8000672:	f003 fe1c 	bl	80042ae <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000676:	2324      	movs	r3, #36	; 0x24
 8000678:	18fb      	adds	r3, r7, r3
 800067a:	0018      	movs	r0, r3
 800067c:	2314      	movs	r3, #20
 800067e:	001a      	movs	r2, r3
 8000680:	2100      	movs	r1, #0
 8000682:	f003 fe14 	bl	80042ae <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000686:	003b      	movs	r3, r7
 8000688:	0018      	movs	r0, r3
 800068a:	2324      	movs	r3, #36	; 0x24
 800068c:	001a      	movs	r2, r3
 800068e:	2100      	movs	r1, #0
 8000690:	f003 fe0d 	bl	80042ae <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000694:	4b2e      	ldr	r3, [pc, #184]	; (8000750 <SystemClock_Config+0xf0>)
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	4a2e      	ldr	r2, [pc, #184]	; (8000754 <SystemClock_Config+0xf4>)
 800069a:	401a      	ands	r2, r3
 800069c:	4b2c      	ldr	r3, [pc, #176]	; (8000750 <SystemClock_Config+0xf0>)
 800069e:	2180      	movs	r1, #128	; 0x80
 80006a0:	0109      	lsls	r1, r1, #4
 80006a2:	430a      	orrs	r2, r1
 80006a4:	601a      	str	r2, [r3, #0]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80006a6:	f001 f817 	bl	80016d8 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80006aa:	4b2b      	ldr	r3, [pc, #172]	; (8000758 <SystemClock_Config+0xf8>)
 80006ac:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80006ae:	4b2a      	ldr	r3, [pc, #168]	; (8000758 <SystemClock_Config+0xf8>)
 80006b0:	4928      	ldr	r1, [pc, #160]	; (8000754 <SystemClock_Config+0xf4>)
 80006b2:	400a      	ands	r2, r1
 80006b4:	651a      	str	r2, [r3, #80]	; 0x50

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 80006b6:	193b      	adds	r3, r7, r4
 80006b8:	2214      	movs	r2, #20
 80006ba:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80006bc:	193b      	adds	r3, r7, r4
 80006be:	2280      	movs	r2, #128	; 0x80
 80006c0:	0052      	lsls	r2, r2, #1
 80006c2:	609a      	str	r2, [r3, #8]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80006c4:	0021      	movs	r1, r4
 80006c6:	187b      	adds	r3, r7, r1
 80006c8:	2201      	movs	r2, #1
 80006ca:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80006cc:	187b      	adds	r3, r7, r1
 80006ce:	2200      	movs	r2, #0
 80006d0:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_5;
 80006d2:	187b      	adds	r3, r7, r1
 80006d4:	22a0      	movs	r2, #160	; 0xa0
 80006d6:	0212      	lsls	r2, r2, #8
 80006d8:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80006da:	187b      	adds	r3, r7, r1
 80006dc:	2200      	movs	r2, #0
 80006de:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006e0:	187b      	adds	r3, r7, r1
 80006e2:	0018      	movs	r0, r3
 80006e4:	f001 f806 	bl	80016f4 <HAL_RCC_OscConfig>
 80006e8:	1e03      	subs	r3, r0, #0
 80006ea:	d001      	beq.n	80006f0 <SystemClock_Config+0x90>
  {
    Error_Handler();
 80006ec:	f000 f9ae 	bl	8000a4c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006f0:	2124      	movs	r1, #36	; 0x24
 80006f2:	187b      	adds	r3, r7, r1
 80006f4:	220f      	movs	r2, #15
 80006f6:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 80006f8:	187b      	adds	r3, r7, r1
 80006fa:	2200      	movs	r2, #0
 80006fc:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006fe:	187b      	adds	r3, r7, r1
 8000700:	2200      	movs	r2, #0
 8000702:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000704:	187b      	adds	r3, r7, r1
 8000706:	2200      	movs	r2, #0
 8000708:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800070a:	187b      	adds	r3, r7, r1
 800070c:	2200      	movs	r2, #0
 800070e:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000710:	187b      	adds	r3, r7, r1
 8000712:	2100      	movs	r1, #0
 8000714:	0018      	movs	r0, r3
 8000716:	f001 fbb1 	bl	8001e7c <HAL_RCC_ClockConfig>
 800071a:	1e03      	subs	r3, r0, #0
 800071c:	d001      	beq.n	8000722 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800071e:	f000 f995 	bl	8000a4c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_RTC;
 8000722:	003b      	movs	r3, r7
 8000724:	2222      	movs	r2, #34	; 0x22
 8000726:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000728:	003b      	movs	r3, r7
 800072a:	2200      	movs	r2, #0
 800072c:	611a      	str	r2, [r3, #16]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 800072e:	003b      	movs	r3, r7
 8000730:	2280      	movs	r2, #128	; 0x80
 8000732:	0252      	lsls	r2, r2, #9
 8000734:	605a      	str	r2, [r3, #4]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000736:	003b      	movs	r3, r7
 8000738:	0018      	movs	r0, r3
 800073a:	f001 fdc3 	bl	80022c4 <HAL_RCCEx_PeriphCLKConfig>
 800073e:	1e03      	subs	r3, r0, #0
 8000740:	d001      	beq.n	8000746 <SystemClock_Config+0xe6>
  {
    Error_Handler();
 8000742:	f000 f983 	bl	8000a4c <Error_Handler>
  }
}
 8000746:	46c0      	nop			; (mov r8, r8)
 8000748:	46bd      	mov	sp, r7
 800074a:	b01d      	add	sp, #116	; 0x74
 800074c:	bd90      	pop	{r4, r7, pc}
 800074e:	46c0      	nop			; (mov r8, r8)
 8000750:	40007000 	.word	0x40007000
 8000754:	ffffe7ff 	.word	0xffffe7ff
 8000758:	40021000 	.word	0x40021000

0800075c <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 800075c:	b580      	push	{r7, lr}
 800075e:	b086      	sub	sp, #24
 8000760:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8000762:	1d3b      	adds	r3, r7, #4
 8000764:	0018      	movs	r0, r3
 8000766:	2314      	movs	r3, #20
 8000768:	001a      	movs	r2, r3
 800076a:	2100      	movs	r1, #0
 800076c:	f003 fd9f 	bl	80042ae <memset>
  RTC_DateTypeDef sDate = {0};
 8000770:	003b      	movs	r3, r7
 8000772:	2200      	movs	r2, #0
 8000774:	601a      	str	r2, [r3, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000776:	4b29      	ldr	r3, [pc, #164]	; (800081c <MX_RTC_Init+0xc0>)
 8000778:	4a29      	ldr	r2, [pc, #164]	; (8000820 <MX_RTC_Init+0xc4>)
 800077a:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800077c:	4b27      	ldr	r3, [pc, #156]	; (800081c <MX_RTC_Init+0xc0>)
 800077e:	2200      	movs	r2, #0
 8000780:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000782:	4b26      	ldr	r3, [pc, #152]	; (800081c <MX_RTC_Init+0xc0>)
 8000784:	227f      	movs	r2, #127	; 0x7f
 8000786:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000788:	4b24      	ldr	r3, [pc, #144]	; (800081c <MX_RTC_Init+0xc0>)
 800078a:	22ff      	movs	r2, #255	; 0xff
 800078c:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800078e:	4b23      	ldr	r3, [pc, #140]	; (800081c <MX_RTC_Init+0xc0>)
 8000790:	2200      	movs	r2, #0
 8000792:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8000794:	4b21      	ldr	r3, [pc, #132]	; (800081c <MX_RTC_Init+0xc0>)
 8000796:	2200      	movs	r2, #0
 8000798:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800079a:	4b20      	ldr	r3, [pc, #128]	; (800081c <MX_RTC_Init+0xc0>)
 800079c:	2200      	movs	r2, #0
 800079e:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80007a0:	4b1e      	ldr	r3, [pc, #120]	; (800081c <MX_RTC_Init+0xc0>)
 80007a2:	2200      	movs	r2, #0
 80007a4:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80007a6:	4b1d      	ldr	r3, [pc, #116]	; (800081c <MX_RTC_Init+0xc0>)
 80007a8:	0018      	movs	r0, r3
 80007aa:	f001 feef 	bl	800258c <HAL_RTC_Init>
 80007ae:	1e03      	subs	r3, r0, #0
 80007b0:	d001      	beq.n	80007b6 <MX_RTC_Init+0x5a>
  {
    Error_Handler();
 80007b2:	f000 f94b 	bl	8000a4c <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x11;
 80007b6:	1d3b      	adds	r3, r7, #4
 80007b8:	2211      	movs	r2, #17
 80007ba:	701a      	strb	r2, [r3, #0]
  sTime.Minutes = 0x11;
 80007bc:	1d3b      	adds	r3, r7, #4
 80007be:	2211      	movs	r2, #17
 80007c0:	705a      	strb	r2, [r3, #1]
  sTime.Seconds = 0x11;
 80007c2:	1d3b      	adds	r3, r7, #4
 80007c4:	2211      	movs	r2, #17
 80007c6:	709a      	strb	r2, [r3, #2]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80007c8:	1d3b      	adds	r3, r7, #4
 80007ca:	2200      	movs	r2, #0
 80007cc:	60da      	str	r2, [r3, #12]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80007ce:	1d3b      	adds	r3, r7, #4
 80007d0:	2200      	movs	r2, #0
 80007d2:	611a      	str	r2, [r3, #16]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 80007d4:	1d39      	adds	r1, r7, #4
 80007d6:	4b11      	ldr	r3, [pc, #68]	; (800081c <MX_RTC_Init+0xc0>)
 80007d8:	2201      	movs	r2, #1
 80007da:	0018      	movs	r0, r3
 80007dc:	f001 ff74 	bl	80026c8 <HAL_RTC_SetTime>
 80007e0:	1e03      	subs	r3, r0, #0
 80007e2:	d001      	beq.n	80007e8 <MX_RTC_Init+0x8c>
  {
    Error_Handler();
 80007e4:	f000 f932 	bl	8000a4c <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_WEDNESDAY;
 80007e8:	003b      	movs	r3, r7
 80007ea:	2203      	movs	r2, #3
 80007ec:	701a      	strb	r2, [r3, #0]
  sDate.Month = RTC_MONTH_OCTOBER;
 80007ee:	003b      	movs	r3, r7
 80007f0:	2210      	movs	r2, #16
 80007f2:	705a      	strb	r2, [r3, #1]
  sDate.Date = 0x5;
 80007f4:	003b      	movs	r3, r7
 80007f6:	2205      	movs	r2, #5
 80007f8:	709a      	strb	r2, [r3, #2]
  sDate.Year = 0x0;
 80007fa:	003b      	movs	r3, r7
 80007fc:	2200      	movs	r2, #0
 80007fe:	70da      	strb	r2, [r3, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8000800:	0039      	movs	r1, r7
 8000802:	4b06      	ldr	r3, [pc, #24]	; (800081c <MX_RTC_Init+0xc0>)
 8000804:	2201      	movs	r2, #1
 8000806:	0018      	movs	r0, r3
 8000808:	f002 f87e 	bl	8002908 <HAL_RTC_SetDate>
 800080c:	1e03      	subs	r3, r0, #0
 800080e:	d001      	beq.n	8000814 <MX_RTC_Init+0xb8>
  {
    Error_Handler();
 8000810:	f000 f91c 	bl	8000a4c <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000814:	46c0      	nop			; (mov r8, r8)
 8000816:	46bd      	mov	sp, r7
 8000818:	b006      	add	sp, #24
 800081a:	bd80      	pop	{r7, pc}
 800081c:	2000008c 	.word	0x2000008c
 8000820:	40002800 	.word	0x40002800

08000824 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000828:	4b14      	ldr	r3, [pc, #80]	; (800087c <MX_USART2_UART_Init+0x58>)
 800082a:	4a15      	ldr	r2, [pc, #84]	; (8000880 <MX_USART2_UART_Init+0x5c>)
 800082c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800082e:	4b13      	ldr	r3, [pc, #76]	; (800087c <MX_USART2_UART_Init+0x58>)
 8000830:	22e1      	movs	r2, #225	; 0xe1
 8000832:	0252      	lsls	r2, r2, #9
 8000834:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000836:	4b11      	ldr	r3, [pc, #68]	; (800087c <MX_USART2_UART_Init+0x58>)
 8000838:	2200      	movs	r2, #0
 800083a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800083c:	4b0f      	ldr	r3, [pc, #60]	; (800087c <MX_USART2_UART_Init+0x58>)
 800083e:	2200      	movs	r2, #0
 8000840:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000842:	4b0e      	ldr	r3, [pc, #56]	; (800087c <MX_USART2_UART_Init+0x58>)
 8000844:	2200      	movs	r2, #0
 8000846:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000848:	4b0c      	ldr	r3, [pc, #48]	; (800087c <MX_USART2_UART_Init+0x58>)
 800084a:	220c      	movs	r2, #12
 800084c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800084e:	4b0b      	ldr	r3, [pc, #44]	; (800087c <MX_USART2_UART_Init+0x58>)
 8000850:	2200      	movs	r2, #0
 8000852:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000854:	4b09      	ldr	r3, [pc, #36]	; (800087c <MX_USART2_UART_Init+0x58>)
 8000856:	2200      	movs	r2, #0
 8000858:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800085a:	4b08      	ldr	r3, [pc, #32]	; (800087c <MX_USART2_UART_Init+0x58>)
 800085c:	2200      	movs	r2, #0
 800085e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000860:	4b06      	ldr	r3, [pc, #24]	; (800087c <MX_USART2_UART_Init+0x58>)
 8000862:	2200      	movs	r2, #0
 8000864:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000866:	4b05      	ldr	r3, [pc, #20]	; (800087c <MX_USART2_UART_Init+0x58>)
 8000868:	0018      	movs	r0, r3
 800086a:	f002 f9df 	bl	8002c2c <HAL_UART_Init>
 800086e:	1e03      	subs	r3, r0, #0
 8000870:	d001      	beq.n	8000876 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000872:	f000 f8eb 	bl	8000a4c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000876:	46c0      	nop			; (mov r8, r8)
 8000878:	46bd      	mov	sp, r7
 800087a:	bd80      	pop	{r7, pc}
 800087c:	200000b0 	.word	0x200000b0
 8000880:	40004400 	.word	0x40004400

08000884 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	b082      	sub	sp, #8
 8000888:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800088a:	4b0c      	ldr	r3, [pc, #48]	; (80008bc <MX_DMA_Init+0x38>)
 800088c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800088e:	4b0b      	ldr	r3, [pc, #44]	; (80008bc <MX_DMA_Init+0x38>)
 8000890:	2101      	movs	r1, #1
 8000892:	430a      	orrs	r2, r1
 8000894:	631a      	str	r2, [r3, #48]	; 0x30
 8000896:	4b09      	ldr	r3, [pc, #36]	; (80008bc <MX_DMA_Init+0x38>)
 8000898:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800089a:	2201      	movs	r2, #1
 800089c:	4013      	ands	r3, r2
 800089e:	607b      	str	r3, [r7, #4]
 80008a0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel4_5_6_7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_5_6_7_IRQn, 0, 0);
 80008a2:	2200      	movs	r2, #0
 80008a4:	2100      	movs	r1, #0
 80008a6:	200b      	movs	r0, #11
 80008a8:	f000 fb2c 	bl	8000f04 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_5_6_7_IRQn);
 80008ac:	200b      	movs	r0, #11
 80008ae:	f000 fb3e 	bl	8000f2e <HAL_NVIC_EnableIRQ>

}
 80008b2:	46c0      	nop			; (mov r8, r8)
 80008b4:	46bd      	mov	sp, r7
 80008b6:	b002      	add	sp, #8
 80008b8:	bd80      	pop	{r7, pc}
 80008ba:	46c0      	nop			; (mov r8, r8)
 80008bc:	40021000 	.word	0x40021000

080008c0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008c0:	b580      	push	{r7, lr}
 80008c2:	b084      	sub	sp, #16
 80008c4:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008c6:	4b14      	ldr	r3, [pc, #80]	; (8000918 <MX_GPIO_Init+0x58>)
 80008c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80008ca:	4b13      	ldr	r3, [pc, #76]	; (8000918 <MX_GPIO_Init+0x58>)
 80008cc:	2104      	movs	r1, #4
 80008ce:	430a      	orrs	r2, r1
 80008d0:	62da      	str	r2, [r3, #44]	; 0x2c
 80008d2:	4b11      	ldr	r3, [pc, #68]	; (8000918 <MX_GPIO_Init+0x58>)
 80008d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80008d6:	2204      	movs	r2, #4
 80008d8:	4013      	ands	r3, r2
 80008da:	60fb      	str	r3, [r7, #12]
 80008dc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80008de:	4b0e      	ldr	r3, [pc, #56]	; (8000918 <MX_GPIO_Init+0x58>)
 80008e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80008e2:	4b0d      	ldr	r3, [pc, #52]	; (8000918 <MX_GPIO_Init+0x58>)
 80008e4:	2180      	movs	r1, #128	; 0x80
 80008e6:	430a      	orrs	r2, r1
 80008e8:	62da      	str	r2, [r3, #44]	; 0x2c
 80008ea:	4b0b      	ldr	r3, [pc, #44]	; (8000918 <MX_GPIO_Init+0x58>)
 80008ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80008ee:	2280      	movs	r2, #128	; 0x80
 80008f0:	4013      	ands	r3, r2
 80008f2:	60bb      	str	r3, [r7, #8]
 80008f4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008f6:	4b08      	ldr	r3, [pc, #32]	; (8000918 <MX_GPIO_Init+0x58>)
 80008f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80008fa:	4b07      	ldr	r3, [pc, #28]	; (8000918 <MX_GPIO_Init+0x58>)
 80008fc:	2101      	movs	r1, #1
 80008fe:	430a      	orrs	r2, r1
 8000900:	62da      	str	r2, [r3, #44]	; 0x2c
 8000902:	4b05      	ldr	r3, [pc, #20]	; (8000918 <MX_GPIO_Init+0x58>)
 8000904:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000906:	2201      	movs	r2, #1
 8000908:	4013      	ands	r3, r2
 800090a:	607b      	str	r3, [r7, #4]
 800090c:	687b      	ldr	r3, [r7, #4]

}
 800090e:	46c0      	nop			; (mov r8, r8)
 8000910:	46bd      	mov	sp, r7
 8000912:	b004      	add	sp, #16
 8000914:	bd80      	pop	{r7, pc}
 8000916:	46c0      	nop			; (mov r8, r8)
 8000918:	40021000 	.word	0x40021000

0800091c <HAL_UARTEx_RxEventCallback>:

/* USER CODE BEGIN 4 */
void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	b082      	sub	sp, #8
 8000920:	af00      	add	r7, sp, #0
 8000922:	6078      	str	r0, [r7, #4]
 8000924:	000a      	movs	r2, r1
 8000926:	1cbb      	adds	r3, r7, #2
 8000928:	801a      	strh	r2, [r3, #0]

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */

  if(huart->Instance == USART2)
 800092a:	687b      	ldr	r3, [r7, #4]
 800092c:	681b      	ldr	r3, [r3, #0]
 800092e:	4a0e      	ldr	r2, [pc, #56]	; (8000968 <HAL_UARTEx_RxEventCallback+0x4c>)
 8000930:	4293      	cmp	r3, r2
 8000932:	d114      	bne.n	800095e <HAL_UARTEx_RxEventCallback+0x42>
  {
	  memcpy(mainBuf, RxBuf, Size);
 8000934:	1cbb      	adds	r3, r7, #2
 8000936:	881a      	ldrh	r2, [r3, #0]
 8000938:	490c      	ldr	r1, [pc, #48]	; (800096c <HAL_UARTEx_RxEventCallback+0x50>)
 800093a:	4b0d      	ldr	r3, [pc, #52]	; (8000970 <HAL_UARTEx_RxEventCallback+0x54>)
 800093c:	0018      	movs	r0, r3
 800093e:	f003 fcad 	bl	800429c <memcpy>

	  HAL_UARTEx_ReceiveToIdle_DMA(&huart2, RxBuf, RxBuf_SIZE);
 8000942:	490a      	ldr	r1, [pc, #40]	; (800096c <HAL_UARTEx_RxEventCallback+0x50>)
 8000944:	4b0b      	ldr	r3, [pc, #44]	; (8000974 <HAL_UARTEx_RxEventCallback+0x58>)
 8000946:	220f      	movs	r2, #15
 8000948:	0018      	movs	r0, r3
 800094a:	f003 fc0e 	bl	800416a <HAL_UARTEx_ReceiveToIdle_DMA>
	  __HAL_DMA_DISABLE_IT(&hdma_usart2_rx, DMA_IT_HT);
 800094e:	4b0a      	ldr	r3, [pc, #40]	; (8000978 <HAL_UARTEx_RxEventCallback+0x5c>)
 8000950:	681b      	ldr	r3, [r3, #0]
 8000952:	681a      	ldr	r2, [r3, #0]
 8000954:	4b08      	ldr	r3, [pc, #32]	; (8000978 <HAL_UARTEx_RxEventCallback+0x5c>)
 8000956:	681b      	ldr	r3, [r3, #0]
 8000958:	2104      	movs	r1, #4
 800095a:	438a      	bics	r2, r1
 800095c:	601a      	str	r2, [r3, #0]
  }
}
 800095e:	46c0      	nop			; (mov r8, r8)
 8000960:	46bd      	mov	sp, r7
 8000962:	b002      	add	sp, #8
 8000964:	bd80      	pop	{r7, pc}
 8000966:	46c0      	nop			; (mov r8, r8)
 8000968:	40004400 	.word	0x40004400
 800096c:	2000017c 	.word	0x2000017c
 8000970:	2000018c 	.word	0x2000018c
 8000974:	200000b0 	.word	0x200000b0
 8000978:	20000134 	.word	0x20000134

0800097c <printCurrTime>:

static void printCurrTime(void)
{
 800097c:	b590      	push	{r4, r7, lr}
 800097e:	b08d      	sub	sp, #52	; 0x34
 8000980:	af02      	add	r7, sp, #8
	RTC_DateTypeDef sDate; //struktura za pohranjivanje dohvacenog datuma

	uint8_t currTime[9]; //za ispis vremena u lijepom obliku -> hh:mm:ss

    //dohvacanje trenutnog vremena i datuma
	HAL_RTC_GetTime(&hrtc, &gTime, RTC_FORMAT_BIN);
 8000982:	2414      	movs	r4, #20
 8000984:	1939      	adds	r1, r7, r4
 8000986:	4b15      	ldr	r3, [pc, #84]	; (80009dc <printCurrTime+0x60>)
 8000988:	2200      	movs	r2, #0
 800098a:	0018      	movs	r0, r3
 800098c:	f001 ff60 	bl	8002850 <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN); // samo zato jel bez nece azurirat vrijeme
 8000990:	2310      	movs	r3, #16
 8000992:	18f9      	adds	r1, r7, r3
 8000994:	4b11      	ldr	r3, [pc, #68]	; (80009dc <printCurrTime+0x60>)
 8000996:	2200      	movs	r2, #0
 8000998:	0018      	movs	r0, r3
 800099a:	f002 f863 	bl	8002a64 <HAL_RTC_GetDate>

	//pripremanje trenutnog vremena za ispis u hh:mm:ss obliku u varijablu currTime
	sprintf(currTime, "%02d:%02d:%02d", gTime.Hours, gTime.Minutes, gTime.Seconds);
 800099e:	0021      	movs	r1, r4
 80009a0:	187b      	adds	r3, r7, r1
 80009a2:	781b      	ldrb	r3, [r3, #0]
 80009a4:	001a      	movs	r2, r3
 80009a6:	187b      	adds	r3, r7, r1
 80009a8:	785b      	ldrb	r3, [r3, #1]
 80009aa:	001c      	movs	r4, r3
 80009ac:	187b      	adds	r3, r7, r1
 80009ae:	789b      	ldrb	r3, [r3, #2]
 80009b0:	490b      	ldr	r1, [pc, #44]	; (80009e0 <printCurrTime+0x64>)
 80009b2:	1d38      	adds	r0, r7, #4
 80009b4:	9300      	str	r3, [sp, #0]
 80009b6:	0023      	movs	r3, r4
 80009b8:	f003 fc82 	bl	80042c0 <siprintf>

	//ispis trenutnog vremena u novi red
	HAL_UART_Transmit(&huart2, currTime, sizeof(currTime), 100);
 80009bc:	1d39      	adds	r1, r7, #4
 80009be:	4809      	ldr	r0, [pc, #36]	; (80009e4 <printCurrTime+0x68>)
 80009c0:	2364      	movs	r3, #100	; 0x64
 80009c2:	2209      	movs	r2, #9
 80009c4:	f002 f986 	bl	8002cd4 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, "\n\r", sizeof("\n\r"), 100);
 80009c8:	4907      	ldr	r1, [pc, #28]	; (80009e8 <printCurrTime+0x6c>)
 80009ca:	4806      	ldr	r0, [pc, #24]	; (80009e4 <printCurrTime+0x68>)
 80009cc:	2364      	movs	r3, #100	; 0x64
 80009ce:	2203      	movs	r2, #3
 80009d0:	f002 f980 	bl	8002cd4 <HAL_UART_Transmit>

}
 80009d4:	46c0      	nop			; (mov r8, r8)
 80009d6:	46bd      	mov	sp, r7
 80009d8:	b00b      	add	sp, #44	; 0x2c
 80009da:	bd90      	pop	{r4, r7, pc}
 80009dc:	2000008c 	.word	0x2000008c
 80009e0:	08005624 	.word	0x08005624
 80009e4:	200000b0 	.word	0x200000b0
 80009e8:	08005634 	.word	0x08005634

080009ec <setTime>:

static void setTime(int h, int m, int s)
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	b08a      	sub	sp, #40	; 0x28
 80009f0:	af00      	add	r7, sp, #0
 80009f2:	60f8      	str	r0, [r7, #12]
 80009f4:	60b9      	str	r1, [r7, #8]
 80009f6:	607a      	str	r2, [r7, #4]
	RTC_TimeTypeDef sTime;

	sTime.Seconds = s;
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	b2da      	uxtb	r2, r3
 80009fc:	2114      	movs	r1, #20
 80009fe:	187b      	adds	r3, r7, r1
 8000a00:	709a      	strb	r2, [r3, #2]
	sTime.Minutes = m;
 8000a02:	68bb      	ldr	r3, [r7, #8]
 8000a04:	b2da      	uxtb	r2, r3
 8000a06:	187b      	adds	r3, r7, r1
 8000a08:	705a      	strb	r2, [r3, #1]
	sTime.Hours = h;
 8000a0a:	68fb      	ldr	r3, [r7, #12]
 8000a0c:	b2da      	uxtb	r2, r3
 8000a0e:	187b      	adds	r3, r7, r1
 8000a10:	701a      	strb	r2, [r3, #0]
	sTime.SubSeconds = 0;
 8000a12:	187b      	adds	r3, r7, r1
 8000a14:	2200      	movs	r2, #0
 8000a16:	605a      	str	r2, [r3, #4]
	sTime.SecondFraction = 0;
 8000a18:	187b      	adds	r3, r7, r1
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	609a      	str	r2, [r3, #8]
	sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000a1e:	187b      	adds	r3, r7, r1
 8000a20:	2200      	movs	r2, #0
 8000a22:	60da      	str	r2, [r3, #12]
	sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000a24:	187b      	adds	r3, r7, r1
 8000a26:	2200      	movs	r2, #0
 8000a28:	611a      	str	r2, [r3, #16]

	if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 8000a2a:	1879      	adds	r1, r7, r1
 8000a2c:	4b06      	ldr	r3, [pc, #24]	; (8000a48 <setTime+0x5c>)
 8000a2e:	2200      	movs	r2, #0
 8000a30:	0018      	movs	r0, r3
 8000a32:	f001 fe49 	bl	80026c8 <HAL_RTC_SetTime>
 8000a36:	1e03      	subs	r3, r0, #0
 8000a38:	d001      	beq.n	8000a3e <setTime+0x52>
	{
	  Error_Handler();
 8000a3a:	f000 f807 	bl	8000a4c <Error_Handler>
	}
}
 8000a3e:	46c0      	nop			; (mov r8, r8)
 8000a40:	46bd      	mov	sp, r7
 8000a42:	b00a      	add	sp, #40	; 0x28
 8000a44:	bd80      	pop	{r7, pc}
 8000a46:	46c0      	nop			; (mov r8, r8)
 8000a48:	2000008c 	.word	0x2000008c

08000a4c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a50:	b672      	cpsid	i
}
 8000a52:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a54:	e7fe      	b.n	8000a54 <Error_Handler+0x8>
	...

08000a58 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a5c:	4b07      	ldr	r3, [pc, #28]	; (8000a7c <HAL_MspInit+0x24>)
 8000a5e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000a60:	4b06      	ldr	r3, [pc, #24]	; (8000a7c <HAL_MspInit+0x24>)
 8000a62:	2101      	movs	r1, #1
 8000a64:	430a      	orrs	r2, r1
 8000a66:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a68:	4b04      	ldr	r3, [pc, #16]	; (8000a7c <HAL_MspInit+0x24>)
 8000a6a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000a6c:	4b03      	ldr	r3, [pc, #12]	; (8000a7c <HAL_MspInit+0x24>)
 8000a6e:	2180      	movs	r1, #128	; 0x80
 8000a70:	0549      	lsls	r1, r1, #21
 8000a72:	430a      	orrs	r2, r1
 8000a74:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a76:	46c0      	nop			; (mov r8, r8)
 8000a78:	46bd      	mov	sp, r7
 8000a7a:	bd80      	pop	{r7, pc}
 8000a7c:	40021000 	.word	0x40021000

08000a80 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	b082      	sub	sp, #8
 8000a84:	af00      	add	r7, sp, #0
 8000a86:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	681b      	ldr	r3, [r3, #0]
 8000a8c:	4a06      	ldr	r2, [pc, #24]	; (8000aa8 <HAL_RTC_MspInit+0x28>)
 8000a8e:	4293      	cmp	r3, r2
 8000a90:	d106      	bne.n	8000aa0 <HAL_RTC_MspInit+0x20>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000a92:	4b06      	ldr	r3, [pc, #24]	; (8000aac <HAL_RTC_MspInit+0x2c>)
 8000a94:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8000a96:	4b05      	ldr	r3, [pc, #20]	; (8000aac <HAL_RTC_MspInit+0x2c>)
 8000a98:	2180      	movs	r1, #128	; 0x80
 8000a9a:	02c9      	lsls	r1, r1, #11
 8000a9c:	430a      	orrs	r2, r1
 8000a9e:	651a      	str	r2, [r3, #80]	; 0x50
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8000aa0:	46c0      	nop			; (mov r8, r8)
 8000aa2:	46bd      	mov	sp, r7
 8000aa4:	b002      	add	sp, #8
 8000aa6:	bd80      	pop	{r7, pc}
 8000aa8:	40002800 	.word	0x40002800
 8000aac:	40021000 	.word	0x40021000

08000ab0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ab0:	b590      	push	{r4, r7, lr}
 8000ab2:	b089      	sub	sp, #36	; 0x24
 8000ab4:	af00      	add	r7, sp, #0
 8000ab6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ab8:	240c      	movs	r4, #12
 8000aba:	193b      	adds	r3, r7, r4
 8000abc:	0018      	movs	r0, r3
 8000abe:	2314      	movs	r3, #20
 8000ac0:	001a      	movs	r2, r3
 8000ac2:	2100      	movs	r1, #0
 8000ac4:	f003 fbf3 	bl	80042ae <memset>
  if(huart->Instance==USART2)
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	681b      	ldr	r3, [r3, #0]
 8000acc:	4a30      	ldr	r2, [pc, #192]	; (8000b90 <HAL_UART_MspInit+0xe0>)
 8000ace:	4293      	cmp	r3, r2
 8000ad0:	d15a      	bne.n	8000b88 <HAL_UART_MspInit+0xd8>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000ad2:	4b30      	ldr	r3, [pc, #192]	; (8000b94 <HAL_UART_MspInit+0xe4>)
 8000ad4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000ad6:	4b2f      	ldr	r3, [pc, #188]	; (8000b94 <HAL_UART_MspInit+0xe4>)
 8000ad8:	2180      	movs	r1, #128	; 0x80
 8000ada:	0289      	lsls	r1, r1, #10
 8000adc:	430a      	orrs	r2, r1
 8000ade:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ae0:	4b2c      	ldr	r3, [pc, #176]	; (8000b94 <HAL_UART_MspInit+0xe4>)
 8000ae2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000ae4:	4b2b      	ldr	r3, [pc, #172]	; (8000b94 <HAL_UART_MspInit+0xe4>)
 8000ae6:	2101      	movs	r1, #1
 8000ae8:	430a      	orrs	r2, r1
 8000aea:	62da      	str	r2, [r3, #44]	; 0x2c
 8000aec:	4b29      	ldr	r3, [pc, #164]	; (8000b94 <HAL_UART_MspInit+0xe4>)
 8000aee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000af0:	2201      	movs	r2, #1
 8000af2:	4013      	ands	r3, r2
 8000af4:	60bb      	str	r3, [r7, #8]
 8000af6:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000af8:	0021      	movs	r1, r4
 8000afa:	187b      	adds	r3, r7, r1
 8000afc:	220c      	movs	r2, #12
 8000afe:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b00:	187b      	adds	r3, r7, r1
 8000b02:	2202      	movs	r2, #2
 8000b04:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b06:	187b      	adds	r3, r7, r1
 8000b08:	2200      	movs	r2, #0
 8000b0a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b0c:	187b      	adds	r3, r7, r1
 8000b0e:	2203      	movs	r2, #3
 8000b10:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART2;
 8000b12:	187b      	adds	r3, r7, r1
 8000b14:	2204      	movs	r2, #4
 8000b16:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b18:	187a      	adds	r2, r7, r1
 8000b1a:	23a0      	movs	r3, #160	; 0xa0
 8000b1c:	05db      	lsls	r3, r3, #23
 8000b1e:	0011      	movs	r1, r2
 8000b20:	0018      	movs	r0, r3
 8000b22:	f000 fc63 	bl	80013ec <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel5;
 8000b26:	4b1c      	ldr	r3, [pc, #112]	; (8000b98 <HAL_UART_MspInit+0xe8>)
 8000b28:	4a1c      	ldr	r2, [pc, #112]	; (8000b9c <HAL_UART_MspInit+0xec>)
 8000b2a:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_4;
 8000b2c:	4b1a      	ldr	r3, [pc, #104]	; (8000b98 <HAL_UART_MspInit+0xe8>)
 8000b2e:	2204      	movs	r2, #4
 8000b30:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000b32:	4b19      	ldr	r3, [pc, #100]	; (8000b98 <HAL_UART_MspInit+0xe8>)
 8000b34:	2200      	movs	r2, #0
 8000b36:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000b38:	4b17      	ldr	r3, [pc, #92]	; (8000b98 <HAL_UART_MspInit+0xe8>)
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000b3e:	4b16      	ldr	r3, [pc, #88]	; (8000b98 <HAL_UART_MspInit+0xe8>)
 8000b40:	2280      	movs	r2, #128	; 0x80
 8000b42:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000b44:	4b14      	ldr	r3, [pc, #80]	; (8000b98 <HAL_UART_MspInit+0xe8>)
 8000b46:	2200      	movs	r2, #0
 8000b48:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000b4a:	4b13      	ldr	r3, [pc, #76]	; (8000b98 <HAL_UART_MspInit+0xe8>)
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8000b50:	4b11      	ldr	r3, [pc, #68]	; (8000b98 <HAL_UART_MspInit+0xe8>)
 8000b52:	2200      	movs	r2, #0
 8000b54:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000b56:	4b10      	ldr	r3, [pc, #64]	; (8000b98 <HAL_UART_MspInit+0xe8>)
 8000b58:	2200      	movs	r2, #0
 8000b5a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8000b5c:	4b0e      	ldr	r3, [pc, #56]	; (8000b98 <HAL_UART_MspInit+0xe8>)
 8000b5e:	0018      	movs	r0, r3
 8000b60:	f000 fa02 	bl	8000f68 <HAL_DMA_Init>
 8000b64:	1e03      	subs	r3, r0, #0
 8000b66:	d001      	beq.n	8000b6c <HAL_UART_MspInit+0xbc>
    {
      Error_Handler();
 8000b68:	f7ff ff70 	bl	8000a4c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	4a0a      	ldr	r2, [pc, #40]	; (8000b98 <HAL_UART_MspInit+0xe8>)
 8000b70:	671a      	str	r2, [r3, #112]	; 0x70
 8000b72:	4b09      	ldr	r3, [pc, #36]	; (8000b98 <HAL_UART_MspInit+0xe8>)
 8000b74:	687a      	ldr	r2, [r7, #4]
 8000b76:	629a      	str	r2, [r3, #40]	; 0x28

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000b78:	2200      	movs	r2, #0
 8000b7a:	2100      	movs	r1, #0
 8000b7c:	201c      	movs	r0, #28
 8000b7e:	f000 f9c1 	bl	8000f04 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000b82:	201c      	movs	r0, #28
 8000b84:	f000 f9d3 	bl	8000f2e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000b88:	46c0      	nop			; (mov r8, r8)
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	b009      	add	sp, #36	; 0x24
 8000b8e:	bd90      	pop	{r4, r7, pc}
 8000b90:	40004400 	.word	0x40004400
 8000b94:	40021000 	.word	0x40021000
 8000b98:	20000134 	.word	0x20000134
 8000b9c:	40020058 	.word	0x40020058

08000ba0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ba4:	e7fe      	b.n	8000ba4 <NMI_Handler+0x4>

08000ba6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ba6:	b580      	push	{r7, lr}
 8000ba8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000baa:	e7fe      	b.n	8000baa <HardFault_Handler+0x4>

08000bac <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000bb0:	46c0      	nop			; (mov r8, r8)
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	bd80      	pop	{r7, pc}

08000bb6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000bb6:	b580      	push	{r7, lr}
 8000bb8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000bba:	46c0      	nop			; (mov r8, r8)
 8000bbc:	46bd      	mov	sp, r7
 8000bbe:	bd80      	pop	{r7, pc}

08000bc0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000bc4:	f000 f8d6 	bl	8000d74 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000bc8:	46c0      	nop			; (mov r8, r8)
 8000bca:	46bd      	mov	sp, r7
 8000bcc:	bd80      	pop	{r7, pc}
	...

08000bd0 <DMA1_Channel4_5_6_7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 4, channel 5, channel 6 and channel 7 interrupts.
  */
void DMA1_Channel4_5_6_7_IRQHandler(void)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_5_6_7_IRQn 0 */

  /* USER CODE END DMA1_Channel4_5_6_7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8000bd4:	4b03      	ldr	r3, [pc, #12]	; (8000be4 <DMA1_Channel4_5_6_7_IRQHandler+0x14>)
 8000bd6:	0018      	movs	r0, r3
 8000bd8:	f000 fb2b 	bl	8001232 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_5_6_7_IRQn 1 */

  /* USER CODE END DMA1_Channel4_5_6_7_IRQn 1 */
}
 8000bdc:	46c0      	nop			; (mov r8, r8)
 8000bde:	46bd      	mov	sp, r7
 8000be0:	bd80      	pop	{r7, pc}
 8000be2:	46c0      	nop			; (mov r8, r8)
 8000be4:	20000134 	.word	0x20000134

08000be8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000bec:	4b03      	ldr	r3, [pc, #12]	; (8000bfc <USART2_IRQHandler+0x14>)
 8000bee:	0018      	movs	r0, r3
 8000bf0:	f002 f918 	bl	8002e24 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000bf4:	46c0      	nop			; (mov r8, r8)
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	bd80      	pop	{r7, pc}
 8000bfa:	46c0      	nop			; (mov r8, r8)
 8000bfc:	200000b0 	.word	0x200000b0

08000c00 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	b086      	sub	sp, #24
 8000c04:	af00      	add	r7, sp, #0
 8000c06:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c08:	4a14      	ldr	r2, [pc, #80]	; (8000c5c <_sbrk+0x5c>)
 8000c0a:	4b15      	ldr	r3, [pc, #84]	; (8000c60 <_sbrk+0x60>)
 8000c0c:	1ad3      	subs	r3, r2, r3
 8000c0e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c10:	697b      	ldr	r3, [r7, #20]
 8000c12:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c14:	4b13      	ldr	r3, [pc, #76]	; (8000c64 <_sbrk+0x64>)
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	d102      	bne.n	8000c22 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c1c:	4b11      	ldr	r3, [pc, #68]	; (8000c64 <_sbrk+0x64>)
 8000c1e:	4a12      	ldr	r2, [pc, #72]	; (8000c68 <_sbrk+0x68>)
 8000c20:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c22:	4b10      	ldr	r3, [pc, #64]	; (8000c64 <_sbrk+0x64>)
 8000c24:	681a      	ldr	r2, [r3, #0]
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	18d3      	adds	r3, r2, r3
 8000c2a:	693a      	ldr	r2, [r7, #16]
 8000c2c:	429a      	cmp	r2, r3
 8000c2e:	d207      	bcs.n	8000c40 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c30:	f003 fb0a 	bl	8004248 <__errno>
 8000c34:	0003      	movs	r3, r0
 8000c36:	220c      	movs	r2, #12
 8000c38:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c3a:	2301      	movs	r3, #1
 8000c3c:	425b      	negs	r3, r3
 8000c3e:	e009      	b.n	8000c54 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c40:	4b08      	ldr	r3, [pc, #32]	; (8000c64 <_sbrk+0x64>)
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c46:	4b07      	ldr	r3, [pc, #28]	; (8000c64 <_sbrk+0x64>)
 8000c48:	681a      	ldr	r2, [r3, #0]
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	18d2      	adds	r2, r2, r3
 8000c4e:	4b05      	ldr	r3, [pc, #20]	; (8000c64 <_sbrk+0x64>)
 8000c50:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8000c52:	68fb      	ldr	r3, [r7, #12]
}
 8000c54:	0018      	movs	r0, r3
 8000c56:	46bd      	mov	sp, r7
 8000c58:	b006      	add	sp, #24
 8000c5a:	bd80      	pop	{r7, pc}
 8000c5c:	20002000 	.word	0x20002000
 8000c60:	00000400 	.word	0x00000400
 8000c64:	200001b0 	.word	0x200001b0
 8000c68:	200001c8 	.word	0x200001c8

08000c6c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c70:	46c0      	nop			; (mov r8, r8)
 8000c72:	46bd      	mov	sp, r7
 8000c74:	bd80      	pop	{r7, pc}
	...

08000c78 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   r0, =_estack
 8000c78:	480d      	ldr	r0, [pc, #52]	; (8000cb0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000c7a:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000c7c:	480d      	ldr	r0, [pc, #52]	; (8000cb4 <LoopForever+0x6>)
  ldr r1, =_edata
 8000c7e:	490e      	ldr	r1, [pc, #56]	; (8000cb8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000c80:	4a0e      	ldr	r2, [pc, #56]	; (8000cbc <LoopForever+0xe>)
  movs r3, #0
 8000c82:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c84:	e002      	b.n	8000c8c <LoopCopyDataInit>

08000c86 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c86:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c88:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c8a:	3304      	adds	r3, #4

08000c8c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c8c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c8e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c90:	d3f9      	bcc.n	8000c86 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c92:	4a0b      	ldr	r2, [pc, #44]	; (8000cc0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000c94:	4c0b      	ldr	r4, [pc, #44]	; (8000cc4 <LoopForever+0x16>)
  movs r3, #0
 8000c96:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c98:	e001      	b.n	8000c9e <LoopFillZerobss>

08000c9a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c9a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c9c:	3204      	adds	r2, #4

08000c9e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c9e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ca0:	d3fb      	bcc.n	8000c9a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000ca2:	f7ff ffe3 	bl	8000c6c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000ca6:	f003 fad5 	bl	8004254 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000caa:	f7ff fc0f 	bl	80004cc <main>

08000cae <LoopForever>:

LoopForever:
    b LoopForever
 8000cae:	e7fe      	b.n	8000cae <LoopForever>
  ldr   r0, =_estack
 8000cb0:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8000cb4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000cb8:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000cbc:	08005870 	.word	0x08005870
  ldr r2, =_sbss
 8000cc0:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000cc4:	200001c8 	.word	0x200001c8

08000cc8 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000cc8:	e7fe      	b.n	8000cc8 <ADC1_COMP_IRQHandler>
	...

08000ccc <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	b082      	sub	sp, #8
 8000cd0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000cd2:	1dfb      	adds	r3, r7, #7
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8000cd8:	4b0b      	ldr	r3, [pc, #44]	; (8000d08 <HAL_Init+0x3c>)
 8000cda:	681a      	ldr	r2, [r3, #0]
 8000cdc:	4b0a      	ldr	r3, [pc, #40]	; (8000d08 <HAL_Init+0x3c>)
 8000cde:	2140      	movs	r1, #64	; 0x40
 8000ce0:	430a      	orrs	r2, r1
 8000ce2:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000ce4:	2003      	movs	r0, #3
 8000ce6:	f000 f811 	bl	8000d0c <HAL_InitTick>
 8000cea:	1e03      	subs	r3, r0, #0
 8000cec:	d003      	beq.n	8000cf6 <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8000cee:	1dfb      	adds	r3, r7, #7
 8000cf0:	2201      	movs	r2, #1
 8000cf2:	701a      	strb	r2, [r3, #0]
 8000cf4:	e001      	b.n	8000cfa <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000cf6:	f7ff feaf 	bl	8000a58 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000cfa:	1dfb      	adds	r3, r7, #7
 8000cfc:	781b      	ldrb	r3, [r3, #0]
}
 8000cfe:	0018      	movs	r0, r3
 8000d00:	46bd      	mov	sp, r7
 8000d02:	b002      	add	sp, #8
 8000d04:	bd80      	pop	{r7, pc}
 8000d06:	46c0      	nop			; (mov r8, r8)
 8000d08:	40022000 	.word	0x40022000

08000d0c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d0c:	b590      	push	{r4, r7, lr}
 8000d0e:	b083      	sub	sp, #12
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d14:	4b14      	ldr	r3, [pc, #80]	; (8000d68 <HAL_InitTick+0x5c>)
 8000d16:	681c      	ldr	r4, [r3, #0]
 8000d18:	4b14      	ldr	r3, [pc, #80]	; (8000d6c <HAL_InitTick+0x60>)
 8000d1a:	781b      	ldrb	r3, [r3, #0]
 8000d1c:	0019      	movs	r1, r3
 8000d1e:	23fa      	movs	r3, #250	; 0xfa
 8000d20:	0098      	lsls	r0, r3, #2
 8000d22:	f7ff fa03 	bl	800012c <__udivsi3>
 8000d26:	0003      	movs	r3, r0
 8000d28:	0019      	movs	r1, r3
 8000d2a:	0020      	movs	r0, r4
 8000d2c:	f7ff f9fe 	bl	800012c <__udivsi3>
 8000d30:	0003      	movs	r3, r0
 8000d32:	0018      	movs	r0, r3
 8000d34:	f000 f90b 	bl	8000f4e <HAL_SYSTICK_Config>
 8000d38:	1e03      	subs	r3, r0, #0
 8000d3a:	d001      	beq.n	8000d40 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000d3c:	2301      	movs	r3, #1
 8000d3e:	e00f      	b.n	8000d60 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	2b03      	cmp	r3, #3
 8000d44:	d80b      	bhi.n	8000d5e <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d46:	6879      	ldr	r1, [r7, #4]
 8000d48:	2301      	movs	r3, #1
 8000d4a:	425b      	negs	r3, r3
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	0018      	movs	r0, r3
 8000d50:	f000 f8d8 	bl	8000f04 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d54:	4b06      	ldr	r3, [pc, #24]	; (8000d70 <HAL_InitTick+0x64>)
 8000d56:	687a      	ldr	r2, [r7, #4]
 8000d58:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	e000      	b.n	8000d60 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000d5e:	2301      	movs	r3, #1
}
 8000d60:	0018      	movs	r0, r3
 8000d62:	46bd      	mov	sp, r7
 8000d64:	b003      	add	sp, #12
 8000d66:	bd90      	pop	{r4, r7, pc}
 8000d68:	20000000 	.word	0x20000000
 8000d6c:	20000008 	.word	0x20000008
 8000d70:	20000004 	.word	0x20000004

08000d74 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d78:	4b05      	ldr	r3, [pc, #20]	; (8000d90 <HAL_IncTick+0x1c>)
 8000d7a:	781b      	ldrb	r3, [r3, #0]
 8000d7c:	001a      	movs	r2, r3
 8000d7e:	4b05      	ldr	r3, [pc, #20]	; (8000d94 <HAL_IncTick+0x20>)
 8000d80:	681b      	ldr	r3, [r3, #0]
 8000d82:	18d2      	adds	r2, r2, r3
 8000d84:	4b03      	ldr	r3, [pc, #12]	; (8000d94 <HAL_IncTick+0x20>)
 8000d86:	601a      	str	r2, [r3, #0]
}
 8000d88:	46c0      	nop			; (mov r8, r8)
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	bd80      	pop	{r7, pc}
 8000d8e:	46c0      	nop			; (mov r8, r8)
 8000d90:	20000008 	.word	0x20000008
 8000d94:	200001b4 	.word	0x200001b4

08000d98 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	af00      	add	r7, sp, #0
  return uwTick;
 8000d9c:	4b02      	ldr	r3, [pc, #8]	; (8000da8 <HAL_GetTick+0x10>)
 8000d9e:	681b      	ldr	r3, [r3, #0]
}
 8000da0:	0018      	movs	r0, r3
 8000da2:	46bd      	mov	sp, r7
 8000da4:	bd80      	pop	{r7, pc}
 8000da6:	46c0      	nop			; (mov r8, r8)
 8000da8:	200001b4 	.word	0x200001b4

08000dac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	b082      	sub	sp, #8
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	0002      	movs	r2, r0
 8000db4:	1dfb      	adds	r3, r7, #7
 8000db6:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000db8:	1dfb      	adds	r3, r7, #7
 8000dba:	781b      	ldrb	r3, [r3, #0]
 8000dbc:	2b7f      	cmp	r3, #127	; 0x7f
 8000dbe:	d809      	bhi.n	8000dd4 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000dc0:	1dfb      	adds	r3, r7, #7
 8000dc2:	781b      	ldrb	r3, [r3, #0]
 8000dc4:	001a      	movs	r2, r3
 8000dc6:	231f      	movs	r3, #31
 8000dc8:	401a      	ands	r2, r3
 8000dca:	4b04      	ldr	r3, [pc, #16]	; (8000ddc <__NVIC_EnableIRQ+0x30>)
 8000dcc:	2101      	movs	r1, #1
 8000dce:	4091      	lsls	r1, r2
 8000dd0:	000a      	movs	r2, r1
 8000dd2:	601a      	str	r2, [r3, #0]
  }
}
 8000dd4:	46c0      	nop			; (mov r8, r8)
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	b002      	add	sp, #8
 8000dda:	bd80      	pop	{r7, pc}
 8000ddc:	e000e100 	.word	0xe000e100

08000de0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000de0:	b590      	push	{r4, r7, lr}
 8000de2:	b083      	sub	sp, #12
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	0002      	movs	r2, r0
 8000de8:	6039      	str	r1, [r7, #0]
 8000dea:	1dfb      	adds	r3, r7, #7
 8000dec:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000dee:	1dfb      	adds	r3, r7, #7
 8000df0:	781b      	ldrb	r3, [r3, #0]
 8000df2:	2b7f      	cmp	r3, #127	; 0x7f
 8000df4:	d828      	bhi.n	8000e48 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000df6:	4a2f      	ldr	r2, [pc, #188]	; (8000eb4 <__NVIC_SetPriority+0xd4>)
 8000df8:	1dfb      	adds	r3, r7, #7
 8000dfa:	781b      	ldrb	r3, [r3, #0]
 8000dfc:	b25b      	sxtb	r3, r3
 8000dfe:	089b      	lsrs	r3, r3, #2
 8000e00:	33c0      	adds	r3, #192	; 0xc0
 8000e02:	009b      	lsls	r3, r3, #2
 8000e04:	589b      	ldr	r3, [r3, r2]
 8000e06:	1dfa      	adds	r2, r7, #7
 8000e08:	7812      	ldrb	r2, [r2, #0]
 8000e0a:	0011      	movs	r1, r2
 8000e0c:	2203      	movs	r2, #3
 8000e0e:	400a      	ands	r2, r1
 8000e10:	00d2      	lsls	r2, r2, #3
 8000e12:	21ff      	movs	r1, #255	; 0xff
 8000e14:	4091      	lsls	r1, r2
 8000e16:	000a      	movs	r2, r1
 8000e18:	43d2      	mvns	r2, r2
 8000e1a:	401a      	ands	r2, r3
 8000e1c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000e1e:	683b      	ldr	r3, [r7, #0]
 8000e20:	019b      	lsls	r3, r3, #6
 8000e22:	22ff      	movs	r2, #255	; 0xff
 8000e24:	401a      	ands	r2, r3
 8000e26:	1dfb      	adds	r3, r7, #7
 8000e28:	781b      	ldrb	r3, [r3, #0]
 8000e2a:	0018      	movs	r0, r3
 8000e2c:	2303      	movs	r3, #3
 8000e2e:	4003      	ands	r3, r0
 8000e30:	00db      	lsls	r3, r3, #3
 8000e32:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000e34:	481f      	ldr	r0, [pc, #124]	; (8000eb4 <__NVIC_SetPriority+0xd4>)
 8000e36:	1dfb      	adds	r3, r7, #7
 8000e38:	781b      	ldrb	r3, [r3, #0]
 8000e3a:	b25b      	sxtb	r3, r3
 8000e3c:	089b      	lsrs	r3, r3, #2
 8000e3e:	430a      	orrs	r2, r1
 8000e40:	33c0      	adds	r3, #192	; 0xc0
 8000e42:	009b      	lsls	r3, r3, #2
 8000e44:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000e46:	e031      	b.n	8000eac <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000e48:	4a1b      	ldr	r2, [pc, #108]	; (8000eb8 <__NVIC_SetPriority+0xd8>)
 8000e4a:	1dfb      	adds	r3, r7, #7
 8000e4c:	781b      	ldrb	r3, [r3, #0]
 8000e4e:	0019      	movs	r1, r3
 8000e50:	230f      	movs	r3, #15
 8000e52:	400b      	ands	r3, r1
 8000e54:	3b08      	subs	r3, #8
 8000e56:	089b      	lsrs	r3, r3, #2
 8000e58:	3306      	adds	r3, #6
 8000e5a:	009b      	lsls	r3, r3, #2
 8000e5c:	18d3      	adds	r3, r2, r3
 8000e5e:	3304      	adds	r3, #4
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	1dfa      	adds	r2, r7, #7
 8000e64:	7812      	ldrb	r2, [r2, #0]
 8000e66:	0011      	movs	r1, r2
 8000e68:	2203      	movs	r2, #3
 8000e6a:	400a      	ands	r2, r1
 8000e6c:	00d2      	lsls	r2, r2, #3
 8000e6e:	21ff      	movs	r1, #255	; 0xff
 8000e70:	4091      	lsls	r1, r2
 8000e72:	000a      	movs	r2, r1
 8000e74:	43d2      	mvns	r2, r2
 8000e76:	401a      	ands	r2, r3
 8000e78:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000e7a:	683b      	ldr	r3, [r7, #0]
 8000e7c:	019b      	lsls	r3, r3, #6
 8000e7e:	22ff      	movs	r2, #255	; 0xff
 8000e80:	401a      	ands	r2, r3
 8000e82:	1dfb      	adds	r3, r7, #7
 8000e84:	781b      	ldrb	r3, [r3, #0]
 8000e86:	0018      	movs	r0, r3
 8000e88:	2303      	movs	r3, #3
 8000e8a:	4003      	ands	r3, r0
 8000e8c:	00db      	lsls	r3, r3, #3
 8000e8e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000e90:	4809      	ldr	r0, [pc, #36]	; (8000eb8 <__NVIC_SetPriority+0xd8>)
 8000e92:	1dfb      	adds	r3, r7, #7
 8000e94:	781b      	ldrb	r3, [r3, #0]
 8000e96:	001c      	movs	r4, r3
 8000e98:	230f      	movs	r3, #15
 8000e9a:	4023      	ands	r3, r4
 8000e9c:	3b08      	subs	r3, #8
 8000e9e:	089b      	lsrs	r3, r3, #2
 8000ea0:	430a      	orrs	r2, r1
 8000ea2:	3306      	adds	r3, #6
 8000ea4:	009b      	lsls	r3, r3, #2
 8000ea6:	18c3      	adds	r3, r0, r3
 8000ea8:	3304      	adds	r3, #4
 8000eaa:	601a      	str	r2, [r3, #0]
}
 8000eac:	46c0      	nop			; (mov r8, r8)
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	b003      	add	sp, #12
 8000eb2:	bd90      	pop	{r4, r7, pc}
 8000eb4:	e000e100 	.word	0xe000e100
 8000eb8:	e000ed00 	.word	0xe000ed00

08000ebc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b082      	sub	sp, #8
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	1e5a      	subs	r2, r3, #1
 8000ec8:	2380      	movs	r3, #128	; 0x80
 8000eca:	045b      	lsls	r3, r3, #17
 8000ecc:	429a      	cmp	r2, r3
 8000ece:	d301      	bcc.n	8000ed4 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000ed0:	2301      	movs	r3, #1
 8000ed2:	e010      	b.n	8000ef6 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ed4:	4b0a      	ldr	r3, [pc, #40]	; (8000f00 <SysTick_Config+0x44>)
 8000ed6:	687a      	ldr	r2, [r7, #4]
 8000ed8:	3a01      	subs	r2, #1
 8000eda:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000edc:	2301      	movs	r3, #1
 8000ede:	425b      	negs	r3, r3
 8000ee0:	2103      	movs	r1, #3
 8000ee2:	0018      	movs	r0, r3
 8000ee4:	f7ff ff7c 	bl	8000de0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ee8:	4b05      	ldr	r3, [pc, #20]	; (8000f00 <SysTick_Config+0x44>)
 8000eea:	2200      	movs	r2, #0
 8000eec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000eee:	4b04      	ldr	r3, [pc, #16]	; (8000f00 <SysTick_Config+0x44>)
 8000ef0:	2207      	movs	r2, #7
 8000ef2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ef4:	2300      	movs	r3, #0
}
 8000ef6:	0018      	movs	r0, r3
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	b002      	add	sp, #8
 8000efc:	bd80      	pop	{r7, pc}
 8000efe:	46c0      	nop			; (mov r8, r8)
 8000f00:	e000e010 	.word	0xe000e010

08000f04 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f04:	b580      	push	{r7, lr}
 8000f06:	b084      	sub	sp, #16
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	60b9      	str	r1, [r7, #8]
 8000f0c:	607a      	str	r2, [r7, #4]
 8000f0e:	210f      	movs	r1, #15
 8000f10:	187b      	adds	r3, r7, r1
 8000f12:	1c02      	adds	r2, r0, #0
 8000f14:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000f16:	68ba      	ldr	r2, [r7, #8]
 8000f18:	187b      	adds	r3, r7, r1
 8000f1a:	781b      	ldrb	r3, [r3, #0]
 8000f1c:	b25b      	sxtb	r3, r3
 8000f1e:	0011      	movs	r1, r2
 8000f20:	0018      	movs	r0, r3
 8000f22:	f7ff ff5d 	bl	8000de0 <__NVIC_SetPriority>
}
 8000f26:	46c0      	nop			; (mov r8, r8)
 8000f28:	46bd      	mov	sp, r7
 8000f2a:	b004      	add	sp, #16
 8000f2c:	bd80      	pop	{r7, pc}

08000f2e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f2e:	b580      	push	{r7, lr}
 8000f30:	b082      	sub	sp, #8
 8000f32:	af00      	add	r7, sp, #0
 8000f34:	0002      	movs	r2, r0
 8000f36:	1dfb      	adds	r3, r7, #7
 8000f38:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f3a:	1dfb      	adds	r3, r7, #7
 8000f3c:	781b      	ldrb	r3, [r3, #0]
 8000f3e:	b25b      	sxtb	r3, r3
 8000f40:	0018      	movs	r0, r3
 8000f42:	f7ff ff33 	bl	8000dac <__NVIC_EnableIRQ>
}
 8000f46:	46c0      	nop			; (mov r8, r8)
 8000f48:	46bd      	mov	sp, r7
 8000f4a:	b002      	add	sp, #8
 8000f4c:	bd80      	pop	{r7, pc}

08000f4e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f4e:	b580      	push	{r7, lr}
 8000f50:	b082      	sub	sp, #8
 8000f52:	af00      	add	r7, sp, #0
 8000f54:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	0018      	movs	r0, r3
 8000f5a:	f7ff ffaf 	bl	8000ebc <SysTick_Config>
 8000f5e:	0003      	movs	r3, r0
}
 8000f60:	0018      	movs	r0, r3
 8000f62:	46bd      	mov	sp, r7
 8000f64:	b002      	add	sp, #8
 8000f66:	bd80      	pop	{r7, pc}

08000f68 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	b084      	sub	sp, #16
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d101      	bne.n	8000f7a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8000f76:	2301      	movs	r3, #1
 8000f78:	e061      	b.n	800103e <HAL_DMA_Init+0xd6>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Compute the channel index */
  /* Only one DMA: DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	4a32      	ldr	r2, [pc, #200]	; (8001048 <HAL_DMA_Init+0xe0>)
 8000f80:	4694      	mov	ip, r2
 8000f82:	4463      	add	r3, ip
 8000f84:	2114      	movs	r1, #20
 8000f86:	0018      	movs	r0, r3
 8000f88:	f7ff f8d0 	bl	800012c <__udivsi3>
 8000f8c:	0003      	movs	r3, r0
 8000f8e:	009a      	lsls	r2, r3, #2
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->DmaBaseAddress = DMA1;
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	4a2d      	ldr	r2, [pc, #180]	; (800104c <HAL_DMA_Init+0xe4>)
 8000f98:	641a      	str	r2, [r3, #64]	; 0x40

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	2225      	movs	r2, #37	; 0x25
 8000f9e:	2102      	movs	r1, #2
 8000fa0:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8000faa:	68fb      	ldr	r3, [r7, #12]
 8000fac:	4a28      	ldr	r2, [pc, #160]	; (8001050 <HAL_DMA_Init+0xe8>)
 8000fae:	4013      	ands	r3, r2
 8000fb0:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8000fba:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	691b      	ldr	r3, [r3, #16]
 8000fc0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000fc6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	699b      	ldr	r3, [r3, #24]
 8000fcc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000fd2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	6a1b      	ldr	r3, [r3, #32]
 8000fd8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8000fda:	68fa      	ldr	r2, [r7, #12]
 8000fdc:	4313      	orrs	r3, r2
 8000fde:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	68fa      	ldr	r2, [r7, #12]
 8000fe6:	601a      	str	r2, [r3, #0]

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	689a      	ldr	r2, [r3, #8]
 8000fec:	2380      	movs	r3, #128	; 0x80
 8000fee:	01db      	lsls	r3, r3, #7
 8000ff0:	429a      	cmp	r2, r3
 8000ff2:	d018      	beq.n	8001026 <HAL_DMA_Init+0xbe>
  {
    /* Write to DMA channel selection register */
    /* Reset request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8000ff4:	4b17      	ldr	r3, [pc, #92]	; (8001054 <HAL_DMA_Init+0xec>)
 8000ff6:	681a      	ldr	r2, [r3, #0]
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ffc:	211c      	movs	r1, #28
 8000ffe:	400b      	ands	r3, r1
 8001000:	210f      	movs	r1, #15
 8001002:	4099      	lsls	r1, r3
 8001004:	000b      	movs	r3, r1
 8001006:	43d9      	mvns	r1, r3
 8001008:	4b12      	ldr	r3, [pc, #72]	; (8001054 <HAL_DMA_Init+0xec>)
 800100a:	400a      	ands	r2, r1
 800100c:	601a      	str	r2, [r3, #0]

    /* Configure request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800100e:	4b11      	ldr	r3, [pc, #68]	; (8001054 <HAL_DMA_Init+0xec>)
 8001010:	6819      	ldr	r1, [r3, #0]
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	685a      	ldr	r2, [r3, #4]
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800101a:	201c      	movs	r0, #28
 800101c:	4003      	ands	r3, r0
 800101e:	409a      	lsls	r2, r3
 8001020:	4b0c      	ldr	r3, [pc, #48]	; (8001054 <HAL_DMA_Init+0xec>)
 8001022:	430a      	orrs	r2, r1
 8001024:	601a      	str	r2, [r3, #0]
  }

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	2200      	movs	r2, #0
 800102a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	2225      	movs	r2, #37	; 0x25
 8001030:	2101      	movs	r1, #1
 8001032:	5499      	strb	r1, [r3, r2]

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	2224      	movs	r2, #36	; 0x24
 8001038:	2100      	movs	r1, #0
 800103a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800103c:	2300      	movs	r3, #0
}
 800103e:	0018      	movs	r0, r3
 8001040:	46bd      	mov	sp, r7
 8001042:	b004      	add	sp, #16
 8001044:	bd80      	pop	{r7, pc}
 8001046:	46c0      	nop			; (mov r8, r8)
 8001048:	bffdfff8 	.word	0xbffdfff8
 800104c:	40020000 	.word	0x40020000
 8001050:	ffff800f 	.word	0xffff800f
 8001054:	400200a8 	.word	0x400200a8

08001058 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	b086      	sub	sp, #24
 800105c:	af00      	add	r7, sp, #0
 800105e:	60f8      	str	r0, [r7, #12]
 8001060:	60b9      	str	r1, [r7, #8]
 8001062:	607a      	str	r2, [r7, #4]
 8001064:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001066:	2317      	movs	r3, #23
 8001068:	18fb      	adds	r3, r7, r3
 800106a:	2200      	movs	r2, #0
 800106c:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800106e:	68fb      	ldr	r3, [r7, #12]
 8001070:	2224      	movs	r2, #36	; 0x24
 8001072:	5c9b      	ldrb	r3, [r3, r2]
 8001074:	2b01      	cmp	r3, #1
 8001076:	d101      	bne.n	800107c <HAL_DMA_Start_IT+0x24>
 8001078:	2302      	movs	r3, #2
 800107a:	e04f      	b.n	800111c <HAL_DMA_Start_IT+0xc4>
 800107c:	68fb      	ldr	r3, [r7, #12]
 800107e:	2224      	movs	r2, #36	; 0x24
 8001080:	2101      	movs	r1, #1
 8001082:	5499      	strb	r1, [r3, r2]

  if(HAL_DMA_STATE_READY == hdma->State)
 8001084:	68fb      	ldr	r3, [r7, #12]
 8001086:	2225      	movs	r2, #37	; 0x25
 8001088:	5c9b      	ldrb	r3, [r3, r2]
 800108a:	b2db      	uxtb	r3, r3
 800108c:	2b01      	cmp	r3, #1
 800108e:	d13a      	bne.n	8001106 <HAL_DMA_Start_IT+0xae>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001090:	68fb      	ldr	r3, [r7, #12]
 8001092:	2225      	movs	r2, #37	; 0x25
 8001094:	2102      	movs	r1, #2
 8001096:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001098:	68fb      	ldr	r3, [r7, #12]
 800109a:	2200      	movs	r2, #0
 800109c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800109e:	68fb      	ldr	r3, [r7, #12]
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	681a      	ldr	r2, [r3, #0]
 80010a4:	68fb      	ldr	r3, [r7, #12]
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	2101      	movs	r1, #1
 80010aa:	438a      	bics	r2, r1
 80010ac:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80010ae:	683b      	ldr	r3, [r7, #0]
 80010b0:	687a      	ldr	r2, [r7, #4]
 80010b2:	68b9      	ldr	r1, [r7, #8]
 80010b4:	68f8      	ldr	r0, [r7, #12]
 80010b6:	f000 f96a 	bl	800138e <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 80010ba:	68fb      	ldr	r3, [r7, #12]
 80010bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d008      	beq.n	80010d4 <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80010c2:	68fb      	ldr	r3, [r7, #12]
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	681a      	ldr	r2, [r3, #0]
 80010c8:	68fb      	ldr	r3, [r7, #12]
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	210e      	movs	r1, #14
 80010ce:	430a      	orrs	r2, r1
 80010d0:	601a      	str	r2, [r3, #0]
 80010d2:	e00f      	b.n	80010f4 <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80010d4:	68fb      	ldr	r3, [r7, #12]
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	681a      	ldr	r2, [r3, #0]
 80010da:	68fb      	ldr	r3, [r7, #12]
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	2104      	movs	r1, #4
 80010e0:	438a      	bics	r2, r1
 80010e2:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80010e4:	68fb      	ldr	r3, [r7, #12]
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	681a      	ldr	r2, [r3, #0]
 80010ea:	68fb      	ldr	r3, [r7, #12]
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	210a      	movs	r1, #10
 80010f0:	430a      	orrs	r2, r1
 80010f2:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80010f4:	68fb      	ldr	r3, [r7, #12]
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	681a      	ldr	r2, [r3, #0]
 80010fa:	68fb      	ldr	r3, [r7, #12]
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	2101      	movs	r1, #1
 8001100:	430a      	orrs	r2, r1
 8001102:	601a      	str	r2, [r3, #0]
 8001104:	e007      	b.n	8001116 <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001106:	68fb      	ldr	r3, [r7, #12]
 8001108:	2224      	movs	r2, #36	; 0x24
 800110a:	2100      	movs	r1, #0
 800110c:	5499      	strb	r1, [r3, r2]

    /* Remain BUSY */
    status = HAL_BUSY;
 800110e:	2317      	movs	r3, #23
 8001110:	18fb      	adds	r3, r7, r3
 8001112:	2202      	movs	r2, #2
 8001114:	701a      	strb	r2, [r3, #0]
  }
  return status;
 8001116:	2317      	movs	r3, #23
 8001118:	18fb      	adds	r3, r7, r3
 800111a:	781b      	ldrb	r3, [r3, #0]
}
 800111c:	0018      	movs	r0, r3
 800111e:	46bd      	mov	sp, r7
 8001120:	b006      	add	sp, #24
 8001122:	bd80      	pop	{r7, pc}

08001124 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	b084      	sub	sp, #16
 8001128:	af00      	add	r7, sp, #0
 800112a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800112c:	230f      	movs	r3, #15
 800112e:	18fb      	adds	r3, r7, r3
 8001130:	2200      	movs	r2, #0
 8001132:	701a      	strb	r2, [r3, #0]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	2225      	movs	r2, #37	; 0x25
 8001138:	5c9b      	ldrb	r3, [r3, r2]
 800113a:	b2db      	uxtb	r3, r3
 800113c:	2b02      	cmp	r3, #2
 800113e:	d008      	beq.n	8001152 <HAL_DMA_Abort+0x2e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	2204      	movs	r2, #4
 8001144:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	2224      	movs	r2, #36	; 0x24
 800114a:	2100      	movs	r1, #0
 800114c:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 800114e:	2301      	movs	r3, #1
 8001150:	e024      	b.n	800119c <HAL_DMA_Abort+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	681a      	ldr	r2, [r3, #0]
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	210e      	movs	r1, #14
 800115e:	438a      	bics	r2, r1
 8001160:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	681a      	ldr	r2, [r3, #0]
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	2101      	movs	r1, #1
 800116e:	438a      	bics	r2, r1
 8001170:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001176:	221c      	movs	r2, #28
 8001178:	401a      	ands	r2, r3
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800117e:	2101      	movs	r1, #1
 8001180:	4091      	lsls	r1, r2
 8001182:	000a      	movs	r2, r1
 8001184:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	2225      	movs	r2, #37	; 0x25
 800118a:	2101      	movs	r1, #1
 800118c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	2224      	movs	r2, #36	; 0x24
 8001192:	2100      	movs	r1, #0
 8001194:	5499      	strb	r1, [r3, r2]

    return status;
 8001196:	230f      	movs	r3, #15
 8001198:	18fb      	adds	r3, r7, r3
 800119a:	781b      	ldrb	r3, [r3, #0]
  }
}
 800119c:	0018      	movs	r0, r3
 800119e:	46bd      	mov	sp, r7
 80011a0:	b004      	add	sp, #16
 80011a2:	bd80      	pop	{r7, pc}

080011a4 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	b084      	sub	sp, #16
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80011ac:	210f      	movs	r1, #15
 80011ae:	187b      	adds	r3, r7, r1
 80011b0:	2200      	movs	r2, #0
 80011b2:	701a      	strb	r2, [r3, #0]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	2225      	movs	r2, #37	; 0x25
 80011b8:	5c9b      	ldrb	r3, [r3, r2]
 80011ba:	b2db      	uxtb	r3, r3
 80011bc:	2b02      	cmp	r3, #2
 80011be:	d006      	beq.n	80011ce <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	2204      	movs	r2, #4
 80011c4:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80011c6:	187b      	adds	r3, r7, r1
 80011c8:	2201      	movs	r2, #1
 80011ca:	701a      	strb	r2, [r3, #0]
 80011cc:	e02a      	b.n	8001224 <HAL_DMA_Abort_IT+0x80>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	681a      	ldr	r2, [r3, #0]
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	210e      	movs	r1, #14
 80011da:	438a      	bics	r2, r1
 80011dc:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	681a      	ldr	r2, [r3, #0]
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	2101      	movs	r1, #1
 80011ea:	438a      	bics	r2, r1
 80011ec:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011f2:	221c      	movs	r2, #28
 80011f4:	401a      	ands	r2, r3
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011fa:	2101      	movs	r1, #1
 80011fc:	4091      	lsls	r1, r2
 80011fe:	000a      	movs	r2, r1
 8001200:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	2225      	movs	r2, #37	; 0x25
 8001206:	2101      	movs	r1, #1
 8001208:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	2224      	movs	r2, #36	; 0x24
 800120e:	2100      	movs	r1, #0
 8001210:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001216:	2b00      	cmp	r3, #0
 8001218:	d004      	beq.n	8001224 <HAL_DMA_Abort_IT+0x80>
    {
      hdma->XferAbortCallback(hdma);
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800121e:	687a      	ldr	r2, [r7, #4]
 8001220:	0010      	movs	r0, r2
 8001222:	4798      	blx	r3
    }
  }
  return status;
 8001224:	230f      	movs	r3, #15
 8001226:	18fb      	adds	r3, r7, r3
 8001228:	781b      	ldrb	r3, [r3, #0]
}
 800122a:	0018      	movs	r0, r3
 800122c:	46bd      	mov	sp, r7
 800122e:	b004      	add	sp, #16
 8001230:	bd80      	pop	{r7, pc}

08001232 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001232:	b580      	push	{r7, lr}
 8001234:	b084      	sub	sp, #16
 8001236:	af00      	add	r7, sp, #0
 8001238:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_HT)))
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800124e:	221c      	movs	r2, #28
 8001250:	4013      	ands	r3, r2
 8001252:	2204      	movs	r2, #4
 8001254:	409a      	lsls	r2, r3
 8001256:	0013      	movs	r3, r2
 8001258:	68fa      	ldr	r2, [r7, #12]
 800125a:	4013      	ands	r3, r2
 800125c:	d026      	beq.n	80012ac <HAL_DMA_IRQHandler+0x7a>
 800125e:	68bb      	ldr	r3, [r7, #8]
 8001260:	2204      	movs	r2, #4
 8001262:	4013      	ands	r3, r2
 8001264:	d022      	beq.n	80012ac <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	2220      	movs	r2, #32
 800126e:	4013      	ands	r3, r2
 8001270:	d107      	bne.n	8001282 <HAL_DMA_IRQHandler+0x50>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	681a      	ldr	r2, [r3, #0]
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	2104      	movs	r1, #4
 800127e:	438a      	bics	r2, r1
 8001280:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1cU);
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001286:	221c      	movs	r2, #28
 8001288:	401a      	ands	r2, r3
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800128e:	2104      	movs	r1, #4
 8001290:	4091      	lsls	r1, r2
 8001292:	000a      	movs	r2, r1
 8001294:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

     if(hdma->XferHalfCpltCallback != NULL)
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800129a:	2b00      	cmp	r3, #0
 800129c:	d100      	bne.n	80012a0 <HAL_DMA_IRQHandler+0x6e>
 800129e:	e071      	b.n	8001384 <HAL_DMA_IRQHandler+0x152>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012a4:	687a      	ldr	r2, [r7, #4]
 80012a6:	0010      	movs	r0, r2
 80012a8:	4798      	blx	r3
     if(hdma->XferHalfCpltCallback != NULL)
 80012aa:	e06b      	b.n	8001384 <HAL_DMA_IRQHandler+0x152>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TC)))
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012b0:	221c      	movs	r2, #28
 80012b2:	4013      	ands	r3, r2
 80012b4:	2202      	movs	r2, #2
 80012b6:	409a      	lsls	r2, r3
 80012b8:	0013      	movs	r3, r2
 80012ba:	68fa      	ldr	r2, [r7, #12]
 80012bc:	4013      	ands	r3, r2
 80012be:	d02d      	beq.n	800131c <HAL_DMA_IRQHandler+0xea>
 80012c0:	68bb      	ldr	r3, [r7, #8]
 80012c2:	2202      	movs	r2, #2
 80012c4:	4013      	ands	r3, r2
 80012c6:	d029      	beq.n	800131c <HAL_DMA_IRQHandler+0xea>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	2220      	movs	r2, #32
 80012d0:	4013      	ands	r3, r2
 80012d2:	d10b      	bne.n	80012ec <HAL_DMA_IRQHandler+0xba>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	681a      	ldr	r2, [r3, #0]
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	210a      	movs	r1, #10
 80012e0:	438a      	bics	r2, r1
 80012e2:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	2225      	movs	r2, #37	; 0x25
 80012e8:	2101      	movs	r1, #1
 80012ea:	5499      	strb	r1, [r3, r2]
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012f0:	221c      	movs	r2, #28
 80012f2:	401a      	ands	r2, r3
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012f8:	2102      	movs	r1, #2
 80012fa:	4091      	lsls	r1, r2
 80012fc:	000a      	movs	r2, r1
 80012fe:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	2224      	movs	r2, #36	; 0x24
 8001304:	2100      	movs	r1, #0
 8001306:	5499      	strb	r1, [r3, r2]

    if(hdma->XferCpltCallback != NULL)
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800130c:	2b00      	cmp	r3, #0
 800130e:	d039      	beq.n	8001384 <HAL_DMA_IRQHandler+0x152>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001314:	687a      	ldr	r2, [r7, #4]
 8001316:	0010      	movs	r0, r2
 8001318:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 800131a:	e033      	b.n	8001384 <HAL_DMA_IRQHandler+0x152>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TE)))
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001320:	221c      	movs	r2, #28
 8001322:	4013      	ands	r3, r2
 8001324:	2208      	movs	r2, #8
 8001326:	409a      	lsls	r2, r3
 8001328:	0013      	movs	r3, r2
 800132a:	68fa      	ldr	r2, [r7, #12]
 800132c:	4013      	ands	r3, r2
 800132e:	d02a      	beq.n	8001386 <HAL_DMA_IRQHandler+0x154>
 8001330:	68bb      	ldr	r3, [r7, #8]
 8001332:	2208      	movs	r2, #8
 8001334:	4013      	ands	r3, r2
 8001336:	d026      	beq.n	8001386 <HAL_DMA_IRQHandler+0x154>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	681a      	ldr	r2, [r3, #0]
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	210e      	movs	r1, #14
 8001344:	438a      	bics	r2, r1
 8001346:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800134c:	221c      	movs	r2, #28
 800134e:	401a      	ands	r2, r3
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001354:	2101      	movs	r1, #1
 8001356:	4091      	lsls	r1, r2
 8001358:	000a      	movs	r2, r1
 800135a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	2201      	movs	r2, #1
 8001360:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	2225      	movs	r2, #37	; 0x25
 8001366:	2101      	movs	r1, #1
 8001368:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	2224      	movs	r2, #36	; 0x24
 800136e:	2100      	movs	r1, #0
 8001370:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001376:	2b00      	cmp	r3, #0
 8001378:	d005      	beq.n	8001386 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800137e:	687a      	ldr	r2, [r7, #4]
 8001380:	0010      	movs	r0, r2
 8001382:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8001384:	46c0      	nop			; (mov r8, r8)
 8001386:	46c0      	nop			; (mov r8, r8)
}
 8001388:	46bd      	mov	sp, r7
 800138a:	b004      	add	sp, #16
 800138c:	bd80      	pop	{r7, pc}

0800138e <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800138e:	b580      	push	{r7, lr}
 8001390:	b084      	sub	sp, #16
 8001392:	af00      	add	r7, sp, #0
 8001394:	60f8      	str	r0, [r7, #12]
 8001396:	60b9      	str	r1, [r7, #8]
 8001398:	607a      	str	r2, [r7, #4]
 800139a:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800139c:	68fb      	ldr	r3, [r7, #12]
 800139e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013a0:	221c      	movs	r2, #28
 80013a2:	401a      	ands	r2, r3
 80013a4:	68fb      	ldr	r3, [r7, #12]
 80013a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013a8:	2101      	movs	r1, #1
 80013aa:	4091      	lsls	r1, r2
 80013ac:	000a      	movs	r2, r1
 80013ae:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80013b0:	68fb      	ldr	r3, [r7, #12]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	683a      	ldr	r2, [r7, #0]
 80013b6:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80013b8:	68fb      	ldr	r3, [r7, #12]
 80013ba:	689b      	ldr	r3, [r3, #8]
 80013bc:	2b10      	cmp	r3, #16
 80013be:	d108      	bne.n	80013d2 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80013c0:	68fb      	ldr	r3, [r7, #12]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	687a      	ldr	r2, [r7, #4]
 80013c6:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80013c8:	68fb      	ldr	r3, [r7, #12]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	68ba      	ldr	r2, [r7, #8]
 80013ce:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80013d0:	e007      	b.n	80013e2 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 80013d2:	68fb      	ldr	r3, [r7, #12]
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	68ba      	ldr	r2, [r7, #8]
 80013d8:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80013da:	68fb      	ldr	r3, [r7, #12]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	687a      	ldr	r2, [r7, #4]
 80013e0:	60da      	str	r2, [r3, #12]
}
 80013e2:	46c0      	nop			; (mov r8, r8)
 80013e4:	46bd      	mov	sp, r7
 80013e6:	b004      	add	sp, #16
 80013e8:	bd80      	pop	{r7, pc}
	...

080013ec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b086      	sub	sp, #24
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	6078      	str	r0, [r7, #4]
 80013f4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80013f6:	2300      	movs	r3, #0
 80013f8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80013fa:	2300      	movs	r3, #0
 80013fc:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 80013fe:	2300      	movs	r3, #0
 8001400:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8001402:	e14f      	b.n	80016a4 <HAL_GPIO_Init+0x2b8>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8001404:	683b      	ldr	r3, [r7, #0]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	2101      	movs	r1, #1
 800140a:	697a      	ldr	r2, [r7, #20]
 800140c:	4091      	lsls	r1, r2
 800140e:	000a      	movs	r2, r1
 8001410:	4013      	ands	r3, r2
 8001412:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8001414:	68fb      	ldr	r3, [r7, #12]
 8001416:	2b00      	cmp	r3, #0
 8001418:	d100      	bne.n	800141c <HAL_GPIO_Init+0x30>
 800141a:	e140      	b.n	800169e <HAL_GPIO_Init+0x2b2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800141c:	683b      	ldr	r3, [r7, #0]
 800141e:	685b      	ldr	r3, [r3, #4]
 8001420:	2203      	movs	r2, #3
 8001422:	4013      	ands	r3, r2
 8001424:	2b01      	cmp	r3, #1
 8001426:	d005      	beq.n	8001434 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001428:	683b      	ldr	r3, [r7, #0]
 800142a:	685b      	ldr	r3, [r3, #4]
 800142c:	2203      	movs	r2, #3
 800142e:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001430:	2b02      	cmp	r3, #2
 8001432:	d130      	bne.n	8001496 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	689b      	ldr	r3, [r3, #8]
 8001438:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 800143a:	697b      	ldr	r3, [r7, #20]
 800143c:	005b      	lsls	r3, r3, #1
 800143e:	2203      	movs	r2, #3
 8001440:	409a      	lsls	r2, r3
 8001442:	0013      	movs	r3, r2
 8001444:	43da      	mvns	r2, r3
 8001446:	693b      	ldr	r3, [r7, #16]
 8001448:	4013      	ands	r3, r2
 800144a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800144c:	683b      	ldr	r3, [r7, #0]
 800144e:	68da      	ldr	r2, [r3, #12]
 8001450:	697b      	ldr	r3, [r7, #20]
 8001452:	005b      	lsls	r3, r3, #1
 8001454:	409a      	lsls	r2, r3
 8001456:	0013      	movs	r3, r2
 8001458:	693a      	ldr	r2, [r7, #16]
 800145a:	4313      	orrs	r3, r2
 800145c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	693a      	ldr	r2, [r7, #16]
 8001462:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	685b      	ldr	r3, [r3, #4]
 8001468:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800146a:	2201      	movs	r2, #1
 800146c:	697b      	ldr	r3, [r7, #20]
 800146e:	409a      	lsls	r2, r3
 8001470:	0013      	movs	r3, r2
 8001472:	43da      	mvns	r2, r3
 8001474:	693b      	ldr	r3, [r7, #16]
 8001476:	4013      	ands	r3, r2
 8001478:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800147a:	683b      	ldr	r3, [r7, #0]
 800147c:	685b      	ldr	r3, [r3, #4]
 800147e:	091b      	lsrs	r3, r3, #4
 8001480:	2201      	movs	r2, #1
 8001482:	401a      	ands	r2, r3
 8001484:	697b      	ldr	r3, [r7, #20]
 8001486:	409a      	lsls	r2, r3
 8001488:	0013      	movs	r3, r2
 800148a:	693a      	ldr	r2, [r7, #16]
 800148c:	4313      	orrs	r3, r2
 800148e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	693a      	ldr	r2, [r7, #16]
 8001494:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001496:	683b      	ldr	r3, [r7, #0]
 8001498:	685b      	ldr	r3, [r3, #4]
 800149a:	2203      	movs	r2, #3
 800149c:	4013      	ands	r3, r2
 800149e:	2b03      	cmp	r3, #3
 80014a0:	d017      	beq.n	80014d2 <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	68db      	ldr	r3, [r3, #12]
 80014a6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80014a8:	697b      	ldr	r3, [r7, #20]
 80014aa:	005b      	lsls	r3, r3, #1
 80014ac:	2203      	movs	r2, #3
 80014ae:	409a      	lsls	r2, r3
 80014b0:	0013      	movs	r3, r2
 80014b2:	43da      	mvns	r2, r3
 80014b4:	693b      	ldr	r3, [r7, #16]
 80014b6:	4013      	ands	r3, r2
 80014b8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80014ba:	683b      	ldr	r3, [r7, #0]
 80014bc:	689a      	ldr	r2, [r3, #8]
 80014be:	697b      	ldr	r3, [r7, #20]
 80014c0:	005b      	lsls	r3, r3, #1
 80014c2:	409a      	lsls	r2, r3
 80014c4:	0013      	movs	r3, r2
 80014c6:	693a      	ldr	r2, [r7, #16]
 80014c8:	4313      	orrs	r3, r2
 80014ca:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	693a      	ldr	r2, [r7, #16]
 80014d0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80014d2:	683b      	ldr	r3, [r7, #0]
 80014d4:	685b      	ldr	r3, [r3, #4]
 80014d6:	2203      	movs	r2, #3
 80014d8:	4013      	ands	r3, r2
 80014da:	2b02      	cmp	r3, #2
 80014dc:	d123      	bne.n	8001526 <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80014de:	697b      	ldr	r3, [r7, #20]
 80014e0:	08da      	lsrs	r2, r3, #3
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	3208      	adds	r2, #8
 80014e6:	0092      	lsls	r2, r2, #2
 80014e8:	58d3      	ldr	r3, [r2, r3]
 80014ea:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 80014ec:	697b      	ldr	r3, [r7, #20]
 80014ee:	2207      	movs	r2, #7
 80014f0:	4013      	ands	r3, r2
 80014f2:	009b      	lsls	r3, r3, #2
 80014f4:	220f      	movs	r2, #15
 80014f6:	409a      	lsls	r2, r3
 80014f8:	0013      	movs	r3, r2
 80014fa:	43da      	mvns	r2, r3
 80014fc:	693b      	ldr	r3, [r7, #16]
 80014fe:	4013      	ands	r3, r2
 8001500:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8001502:	683b      	ldr	r3, [r7, #0]
 8001504:	691a      	ldr	r2, [r3, #16]
 8001506:	697b      	ldr	r3, [r7, #20]
 8001508:	2107      	movs	r1, #7
 800150a:	400b      	ands	r3, r1
 800150c:	009b      	lsls	r3, r3, #2
 800150e:	409a      	lsls	r2, r3
 8001510:	0013      	movs	r3, r2
 8001512:	693a      	ldr	r2, [r7, #16]
 8001514:	4313      	orrs	r3, r2
 8001516:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001518:	697b      	ldr	r3, [r7, #20]
 800151a:	08da      	lsrs	r2, r3, #3
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	3208      	adds	r2, #8
 8001520:	0092      	lsls	r2, r2, #2
 8001522:	6939      	ldr	r1, [r7, #16]
 8001524:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800152c:	697b      	ldr	r3, [r7, #20]
 800152e:	005b      	lsls	r3, r3, #1
 8001530:	2203      	movs	r2, #3
 8001532:	409a      	lsls	r2, r3
 8001534:	0013      	movs	r3, r2
 8001536:	43da      	mvns	r2, r3
 8001538:	693b      	ldr	r3, [r7, #16]
 800153a:	4013      	ands	r3, r2
 800153c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800153e:	683b      	ldr	r3, [r7, #0]
 8001540:	685b      	ldr	r3, [r3, #4]
 8001542:	2203      	movs	r2, #3
 8001544:	401a      	ands	r2, r3
 8001546:	697b      	ldr	r3, [r7, #20]
 8001548:	005b      	lsls	r3, r3, #1
 800154a:	409a      	lsls	r2, r3
 800154c:	0013      	movs	r3, r2
 800154e:	693a      	ldr	r2, [r7, #16]
 8001550:	4313      	orrs	r3, r2
 8001552:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	693a      	ldr	r2, [r7, #16]
 8001558:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800155a:	683b      	ldr	r3, [r7, #0]
 800155c:	685a      	ldr	r2, [r3, #4]
 800155e:	23c0      	movs	r3, #192	; 0xc0
 8001560:	029b      	lsls	r3, r3, #10
 8001562:	4013      	ands	r3, r2
 8001564:	d100      	bne.n	8001568 <HAL_GPIO_Init+0x17c>
 8001566:	e09a      	b.n	800169e <HAL_GPIO_Init+0x2b2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001568:	4b54      	ldr	r3, [pc, #336]	; (80016bc <HAL_GPIO_Init+0x2d0>)
 800156a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800156c:	4b53      	ldr	r3, [pc, #332]	; (80016bc <HAL_GPIO_Init+0x2d0>)
 800156e:	2101      	movs	r1, #1
 8001570:	430a      	orrs	r2, r1
 8001572:	635a      	str	r2, [r3, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8001574:	4a52      	ldr	r2, [pc, #328]	; (80016c0 <HAL_GPIO_Init+0x2d4>)
 8001576:	697b      	ldr	r3, [r7, #20]
 8001578:	089b      	lsrs	r3, r3, #2
 800157a:	3302      	adds	r3, #2
 800157c:	009b      	lsls	r3, r3, #2
 800157e:	589b      	ldr	r3, [r3, r2]
 8001580:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8001582:	697b      	ldr	r3, [r7, #20]
 8001584:	2203      	movs	r2, #3
 8001586:	4013      	ands	r3, r2
 8001588:	009b      	lsls	r3, r3, #2
 800158a:	220f      	movs	r2, #15
 800158c:	409a      	lsls	r2, r3
 800158e:	0013      	movs	r3, r2
 8001590:	43da      	mvns	r2, r3
 8001592:	693b      	ldr	r3, [r7, #16]
 8001594:	4013      	ands	r3, r2
 8001596:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8001598:	687a      	ldr	r2, [r7, #4]
 800159a:	23a0      	movs	r3, #160	; 0xa0
 800159c:	05db      	lsls	r3, r3, #23
 800159e:	429a      	cmp	r2, r3
 80015a0:	d019      	beq.n	80015d6 <HAL_GPIO_Init+0x1ea>
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	4a47      	ldr	r2, [pc, #284]	; (80016c4 <HAL_GPIO_Init+0x2d8>)
 80015a6:	4293      	cmp	r3, r2
 80015a8:	d013      	beq.n	80015d2 <HAL_GPIO_Init+0x1e6>
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	4a46      	ldr	r2, [pc, #280]	; (80016c8 <HAL_GPIO_Init+0x2dc>)
 80015ae:	4293      	cmp	r3, r2
 80015b0:	d00d      	beq.n	80015ce <HAL_GPIO_Init+0x1e2>
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	4a45      	ldr	r2, [pc, #276]	; (80016cc <HAL_GPIO_Init+0x2e0>)
 80015b6:	4293      	cmp	r3, r2
 80015b8:	d007      	beq.n	80015ca <HAL_GPIO_Init+0x1de>
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	4a44      	ldr	r2, [pc, #272]	; (80016d0 <HAL_GPIO_Init+0x2e4>)
 80015be:	4293      	cmp	r3, r2
 80015c0:	d101      	bne.n	80015c6 <HAL_GPIO_Init+0x1da>
 80015c2:	2305      	movs	r3, #5
 80015c4:	e008      	b.n	80015d8 <HAL_GPIO_Init+0x1ec>
 80015c6:	2306      	movs	r3, #6
 80015c8:	e006      	b.n	80015d8 <HAL_GPIO_Init+0x1ec>
 80015ca:	2303      	movs	r3, #3
 80015cc:	e004      	b.n	80015d8 <HAL_GPIO_Init+0x1ec>
 80015ce:	2302      	movs	r3, #2
 80015d0:	e002      	b.n	80015d8 <HAL_GPIO_Init+0x1ec>
 80015d2:	2301      	movs	r3, #1
 80015d4:	e000      	b.n	80015d8 <HAL_GPIO_Init+0x1ec>
 80015d6:	2300      	movs	r3, #0
 80015d8:	697a      	ldr	r2, [r7, #20]
 80015da:	2103      	movs	r1, #3
 80015dc:	400a      	ands	r2, r1
 80015de:	0092      	lsls	r2, r2, #2
 80015e0:	4093      	lsls	r3, r2
 80015e2:	693a      	ldr	r2, [r7, #16]
 80015e4:	4313      	orrs	r3, r2
 80015e6:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80015e8:	4935      	ldr	r1, [pc, #212]	; (80016c0 <HAL_GPIO_Init+0x2d4>)
 80015ea:	697b      	ldr	r3, [r7, #20]
 80015ec:	089b      	lsrs	r3, r3, #2
 80015ee:	3302      	adds	r3, #2
 80015f0:	009b      	lsls	r3, r3, #2
 80015f2:	693a      	ldr	r2, [r7, #16]
 80015f4:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80015f6:	4b37      	ldr	r3, [pc, #220]	; (80016d4 <HAL_GPIO_Init+0x2e8>)
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	43da      	mvns	r2, r3
 8001600:	693b      	ldr	r3, [r7, #16]
 8001602:	4013      	ands	r3, r2
 8001604:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001606:	683b      	ldr	r3, [r7, #0]
 8001608:	685a      	ldr	r2, [r3, #4]
 800160a:	2380      	movs	r3, #128	; 0x80
 800160c:	025b      	lsls	r3, r3, #9
 800160e:	4013      	ands	r3, r2
 8001610:	d003      	beq.n	800161a <HAL_GPIO_Init+0x22e>
        {
          temp |= iocurrent;
 8001612:	693a      	ldr	r2, [r7, #16]
 8001614:	68fb      	ldr	r3, [r7, #12]
 8001616:	4313      	orrs	r3, r2
 8001618:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800161a:	4b2e      	ldr	r3, [pc, #184]	; (80016d4 <HAL_GPIO_Init+0x2e8>)
 800161c:	693a      	ldr	r2, [r7, #16]
 800161e:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8001620:	4b2c      	ldr	r3, [pc, #176]	; (80016d4 <HAL_GPIO_Init+0x2e8>)
 8001622:	685b      	ldr	r3, [r3, #4]
 8001624:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001626:	68fb      	ldr	r3, [r7, #12]
 8001628:	43da      	mvns	r2, r3
 800162a:	693b      	ldr	r3, [r7, #16]
 800162c:	4013      	ands	r3, r2
 800162e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001630:	683b      	ldr	r3, [r7, #0]
 8001632:	685a      	ldr	r2, [r3, #4]
 8001634:	2380      	movs	r3, #128	; 0x80
 8001636:	029b      	lsls	r3, r3, #10
 8001638:	4013      	ands	r3, r2
 800163a:	d003      	beq.n	8001644 <HAL_GPIO_Init+0x258>
        {
          temp |= iocurrent;
 800163c:	693a      	ldr	r2, [r7, #16]
 800163e:	68fb      	ldr	r3, [r7, #12]
 8001640:	4313      	orrs	r3, r2
 8001642:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001644:	4b23      	ldr	r3, [pc, #140]	; (80016d4 <HAL_GPIO_Init+0x2e8>)
 8001646:	693a      	ldr	r2, [r7, #16]
 8001648:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800164a:	4b22      	ldr	r3, [pc, #136]	; (80016d4 <HAL_GPIO_Init+0x2e8>)
 800164c:	689b      	ldr	r3, [r3, #8]
 800164e:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001650:	68fb      	ldr	r3, [r7, #12]
 8001652:	43da      	mvns	r2, r3
 8001654:	693b      	ldr	r3, [r7, #16]
 8001656:	4013      	ands	r3, r2
 8001658:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800165a:	683b      	ldr	r3, [r7, #0]
 800165c:	685a      	ldr	r2, [r3, #4]
 800165e:	2380      	movs	r3, #128	; 0x80
 8001660:	035b      	lsls	r3, r3, #13
 8001662:	4013      	ands	r3, r2
 8001664:	d003      	beq.n	800166e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001666:	693a      	ldr	r2, [r7, #16]
 8001668:	68fb      	ldr	r3, [r7, #12]
 800166a:	4313      	orrs	r3, r2
 800166c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800166e:	4b19      	ldr	r3, [pc, #100]	; (80016d4 <HAL_GPIO_Init+0x2e8>)
 8001670:	693a      	ldr	r2, [r7, #16]
 8001672:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001674:	4b17      	ldr	r3, [pc, #92]	; (80016d4 <HAL_GPIO_Init+0x2e8>)
 8001676:	68db      	ldr	r3, [r3, #12]
 8001678:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800167a:	68fb      	ldr	r3, [r7, #12]
 800167c:	43da      	mvns	r2, r3
 800167e:	693b      	ldr	r3, [r7, #16]
 8001680:	4013      	ands	r3, r2
 8001682:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001684:	683b      	ldr	r3, [r7, #0]
 8001686:	685a      	ldr	r2, [r3, #4]
 8001688:	2380      	movs	r3, #128	; 0x80
 800168a:	039b      	lsls	r3, r3, #14
 800168c:	4013      	ands	r3, r2
 800168e:	d003      	beq.n	8001698 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001690:	693a      	ldr	r2, [r7, #16]
 8001692:	68fb      	ldr	r3, [r7, #12]
 8001694:	4313      	orrs	r3, r2
 8001696:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001698:	4b0e      	ldr	r3, [pc, #56]	; (80016d4 <HAL_GPIO_Init+0x2e8>)
 800169a:	693a      	ldr	r2, [r7, #16]
 800169c:	60da      	str	r2, [r3, #12]
      }
    }
    position++;
 800169e:	697b      	ldr	r3, [r7, #20]
 80016a0:	3301      	adds	r3, #1
 80016a2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 80016a4:	683b      	ldr	r3, [r7, #0]
 80016a6:	681a      	ldr	r2, [r3, #0]
 80016a8:	697b      	ldr	r3, [r7, #20]
 80016aa:	40da      	lsrs	r2, r3
 80016ac:	1e13      	subs	r3, r2, #0
 80016ae:	d000      	beq.n	80016b2 <HAL_GPIO_Init+0x2c6>
 80016b0:	e6a8      	b.n	8001404 <HAL_GPIO_Init+0x18>
  }
}
 80016b2:	46c0      	nop			; (mov r8, r8)
 80016b4:	46c0      	nop			; (mov r8, r8)
 80016b6:	46bd      	mov	sp, r7
 80016b8:	b006      	add	sp, #24
 80016ba:	bd80      	pop	{r7, pc}
 80016bc:	40021000 	.word	0x40021000
 80016c0:	40010000 	.word	0x40010000
 80016c4:	50000400 	.word	0x50000400
 80016c8:	50000800 	.word	0x50000800
 80016cc:	50000c00 	.word	0x50000c00
 80016d0:	50001c00 	.word	0x50001c00
 80016d4:	40010400 	.word	0x40010400

080016d8 <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 2, 4, 8 or 16 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80016d8:	b580      	push	{r7, lr}
 80016da:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR, PWR_CR_DBP);
 80016dc:	4b04      	ldr	r3, [pc, #16]	; (80016f0 <HAL_PWR_EnableBkUpAccess+0x18>)
 80016de:	681a      	ldr	r2, [r3, #0]
 80016e0:	4b03      	ldr	r3, [pc, #12]	; (80016f0 <HAL_PWR_EnableBkUpAccess+0x18>)
 80016e2:	2180      	movs	r1, #128	; 0x80
 80016e4:	0049      	lsls	r1, r1, #1
 80016e6:	430a      	orrs	r2, r1
 80016e8:	601a      	str	r2, [r3, #0]
}
 80016ea:	46c0      	nop			; (mov r8, r8)
 80016ec:	46bd      	mov	sp, r7
 80016ee:	bd80      	pop	{r7, pc}
 80016f0:	40007000 	.word	0x40007000

080016f4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80016f4:	b5b0      	push	{r4, r5, r7, lr}
 80016f6:	b08a      	sub	sp, #40	; 0x28
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d102      	bne.n	8001708 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001702:	2301      	movs	r3, #1
 8001704:	f000 fbaf 	bl	8001e66 <HAL_RCC_OscConfig+0x772>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001708:	4bcf      	ldr	r3, [pc, #828]	; (8001a48 <HAL_RCC_OscConfig+0x354>)
 800170a:	68db      	ldr	r3, [r3, #12]
 800170c:	220c      	movs	r2, #12
 800170e:	4013      	ands	r3, r2
 8001710:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001712:	4bcd      	ldr	r3, [pc, #820]	; (8001a48 <HAL_RCC_OscConfig+0x354>)
 8001714:	68da      	ldr	r2, [r3, #12]
 8001716:	2380      	movs	r3, #128	; 0x80
 8001718:	025b      	lsls	r3, r3, #9
 800171a:	4013      	ands	r3, r2
 800171c:	61fb      	str	r3, [r7, #28]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	2201      	movs	r2, #1
 8001724:	4013      	ands	r3, r2
 8001726:	d100      	bne.n	800172a <HAL_RCC_OscConfig+0x36>
 8001728:	e07e      	b.n	8001828 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 800172a:	6a3b      	ldr	r3, [r7, #32]
 800172c:	2b08      	cmp	r3, #8
 800172e:	d007      	beq.n	8001740 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001730:	6a3b      	ldr	r3, [r7, #32]
 8001732:	2b0c      	cmp	r3, #12
 8001734:	d112      	bne.n	800175c <HAL_RCC_OscConfig+0x68>
 8001736:	69fa      	ldr	r2, [r7, #28]
 8001738:	2380      	movs	r3, #128	; 0x80
 800173a:	025b      	lsls	r3, r3, #9
 800173c:	429a      	cmp	r2, r3
 800173e:	d10d      	bne.n	800175c <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001740:	4bc1      	ldr	r3, [pc, #772]	; (8001a48 <HAL_RCC_OscConfig+0x354>)
 8001742:	681a      	ldr	r2, [r3, #0]
 8001744:	2380      	movs	r3, #128	; 0x80
 8001746:	029b      	lsls	r3, r3, #10
 8001748:	4013      	ands	r3, r2
 800174a:	d100      	bne.n	800174e <HAL_RCC_OscConfig+0x5a>
 800174c:	e06b      	b.n	8001826 <HAL_RCC_OscConfig+0x132>
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	685b      	ldr	r3, [r3, #4]
 8001752:	2b00      	cmp	r3, #0
 8001754:	d167      	bne.n	8001826 <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 8001756:	2301      	movs	r3, #1
 8001758:	f000 fb85 	bl	8001e66 <HAL_RCC_OscConfig+0x772>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	685a      	ldr	r2, [r3, #4]
 8001760:	2380      	movs	r3, #128	; 0x80
 8001762:	025b      	lsls	r3, r3, #9
 8001764:	429a      	cmp	r2, r3
 8001766:	d107      	bne.n	8001778 <HAL_RCC_OscConfig+0x84>
 8001768:	4bb7      	ldr	r3, [pc, #732]	; (8001a48 <HAL_RCC_OscConfig+0x354>)
 800176a:	681a      	ldr	r2, [r3, #0]
 800176c:	4bb6      	ldr	r3, [pc, #728]	; (8001a48 <HAL_RCC_OscConfig+0x354>)
 800176e:	2180      	movs	r1, #128	; 0x80
 8001770:	0249      	lsls	r1, r1, #9
 8001772:	430a      	orrs	r2, r1
 8001774:	601a      	str	r2, [r3, #0]
 8001776:	e027      	b.n	80017c8 <HAL_RCC_OscConfig+0xd4>
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	685a      	ldr	r2, [r3, #4]
 800177c:	23a0      	movs	r3, #160	; 0xa0
 800177e:	02db      	lsls	r3, r3, #11
 8001780:	429a      	cmp	r2, r3
 8001782:	d10e      	bne.n	80017a2 <HAL_RCC_OscConfig+0xae>
 8001784:	4bb0      	ldr	r3, [pc, #704]	; (8001a48 <HAL_RCC_OscConfig+0x354>)
 8001786:	681a      	ldr	r2, [r3, #0]
 8001788:	4baf      	ldr	r3, [pc, #700]	; (8001a48 <HAL_RCC_OscConfig+0x354>)
 800178a:	2180      	movs	r1, #128	; 0x80
 800178c:	02c9      	lsls	r1, r1, #11
 800178e:	430a      	orrs	r2, r1
 8001790:	601a      	str	r2, [r3, #0]
 8001792:	4bad      	ldr	r3, [pc, #692]	; (8001a48 <HAL_RCC_OscConfig+0x354>)
 8001794:	681a      	ldr	r2, [r3, #0]
 8001796:	4bac      	ldr	r3, [pc, #688]	; (8001a48 <HAL_RCC_OscConfig+0x354>)
 8001798:	2180      	movs	r1, #128	; 0x80
 800179a:	0249      	lsls	r1, r1, #9
 800179c:	430a      	orrs	r2, r1
 800179e:	601a      	str	r2, [r3, #0]
 80017a0:	e012      	b.n	80017c8 <HAL_RCC_OscConfig+0xd4>
 80017a2:	4ba9      	ldr	r3, [pc, #676]	; (8001a48 <HAL_RCC_OscConfig+0x354>)
 80017a4:	681a      	ldr	r2, [r3, #0]
 80017a6:	4ba8      	ldr	r3, [pc, #672]	; (8001a48 <HAL_RCC_OscConfig+0x354>)
 80017a8:	49a8      	ldr	r1, [pc, #672]	; (8001a4c <HAL_RCC_OscConfig+0x358>)
 80017aa:	400a      	ands	r2, r1
 80017ac:	601a      	str	r2, [r3, #0]
 80017ae:	4ba6      	ldr	r3, [pc, #664]	; (8001a48 <HAL_RCC_OscConfig+0x354>)
 80017b0:	681a      	ldr	r2, [r3, #0]
 80017b2:	2380      	movs	r3, #128	; 0x80
 80017b4:	025b      	lsls	r3, r3, #9
 80017b6:	4013      	ands	r3, r2
 80017b8:	60fb      	str	r3, [r7, #12]
 80017ba:	68fb      	ldr	r3, [r7, #12]
 80017bc:	4ba2      	ldr	r3, [pc, #648]	; (8001a48 <HAL_RCC_OscConfig+0x354>)
 80017be:	681a      	ldr	r2, [r3, #0]
 80017c0:	4ba1      	ldr	r3, [pc, #644]	; (8001a48 <HAL_RCC_OscConfig+0x354>)
 80017c2:	49a3      	ldr	r1, [pc, #652]	; (8001a50 <HAL_RCC_OscConfig+0x35c>)
 80017c4:	400a      	ands	r2, r1
 80017c6:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	685b      	ldr	r3, [r3, #4]
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d015      	beq.n	80017fc <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017d0:	f7ff fae2 	bl	8000d98 <HAL_GetTick>
 80017d4:	0003      	movs	r3, r0
 80017d6:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80017d8:	e009      	b.n	80017ee <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80017da:	f7ff fadd 	bl	8000d98 <HAL_GetTick>
 80017de:	0002      	movs	r2, r0
 80017e0:	69bb      	ldr	r3, [r7, #24]
 80017e2:	1ad3      	subs	r3, r2, r3
 80017e4:	2b64      	cmp	r3, #100	; 0x64
 80017e6:	d902      	bls.n	80017ee <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80017e8:	2303      	movs	r3, #3
 80017ea:	f000 fb3c 	bl	8001e66 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80017ee:	4b96      	ldr	r3, [pc, #600]	; (8001a48 <HAL_RCC_OscConfig+0x354>)
 80017f0:	681a      	ldr	r2, [r3, #0]
 80017f2:	2380      	movs	r3, #128	; 0x80
 80017f4:	029b      	lsls	r3, r3, #10
 80017f6:	4013      	ands	r3, r2
 80017f8:	d0ef      	beq.n	80017da <HAL_RCC_OscConfig+0xe6>
 80017fa:	e015      	b.n	8001828 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017fc:	f7ff facc 	bl	8000d98 <HAL_GetTick>
 8001800:	0003      	movs	r3, r0
 8001802:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001804:	e008      	b.n	8001818 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001806:	f7ff fac7 	bl	8000d98 <HAL_GetTick>
 800180a:	0002      	movs	r2, r0
 800180c:	69bb      	ldr	r3, [r7, #24]
 800180e:	1ad3      	subs	r3, r2, r3
 8001810:	2b64      	cmp	r3, #100	; 0x64
 8001812:	d901      	bls.n	8001818 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 8001814:	2303      	movs	r3, #3
 8001816:	e326      	b.n	8001e66 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001818:	4b8b      	ldr	r3, [pc, #556]	; (8001a48 <HAL_RCC_OscConfig+0x354>)
 800181a:	681a      	ldr	r2, [r3, #0]
 800181c:	2380      	movs	r3, #128	; 0x80
 800181e:	029b      	lsls	r3, r3, #10
 8001820:	4013      	ands	r3, r2
 8001822:	d1f0      	bne.n	8001806 <HAL_RCC_OscConfig+0x112>
 8001824:	e000      	b.n	8001828 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001826:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	2202      	movs	r2, #2
 800182e:	4013      	ands	r3, r2
 8001830:	d100      	bne.n	8001834 <HAL_RCC_OscConfig+0x140>
 8001832:	e08b      	b.n	800194c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	68db      	ldr	r3, [r3, #12]
 8001838:	617b      	str	r3, [r7, #20]
      hsi_state &= ~RCC_CR_HSIOUTEN;
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 800183a:	6a3b      	ldr	r3, [r7, #32]
 800183c:	2b04      	cmp	r3, #4
 800183e:	d005      	beq.n	800184c <HAL_RCC_OscConfig+0x158>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001840:	6a3b      	ldr	r3, [r7, #32]
 8001842:	2b0c      	cmp	r3, #12
 8001844:	d13e      	bne.n	80018c4 <HAL_RCC_OscConfig+0x1d0>
 8001846:	69fb      	ldr	r3, [r7, #28]
 8001848:	2b00      	cmp	r3, #0
 800184a:	d13b      	bne.n	80018c4 <HAL_RCC_OscConfig+0x1d0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 800184c:	4b7e      	ldr	r3, [pc, #504]	; (8001a48 <HAL_RCC_OscConfig+0x354>)
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	2204      	movs	r2, #4
 8001852:	4013      	ands	r3, r2
 8001854:	d004      	beq.n	8001860 <HAL_RCC_OscConfig+0x16c>
 8001856:	697b      	ldr	r3, [r7, #20]
 8001858:	2b00      	cmp	r3, #0
 800185a:	d101      	bne.n	8001860 <HAL_RCC_OscConfig+0x16c>
      {
        return HAL_ERROR;
 800185c:	2301      	movs	r3, #1
 800185e:	e302      	b.n	8001e66 <HAL_RCC_OscConfig+0x772>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001860:	4b79      	ldr	r3, [pc, #484]	; (8001a48 <HAL_RCC_OscConfig+0x354>)
 8001862:	685b      	ldr	r3, [r3, #4]
 8001864:	4a7b      	ldr	r2, [pc, #492]	; (8001a54 <HAL_RCC_OscConfig+0x360>)
 8001866:	4013      	ands	r3, r2
 8001868:	0019      	movs	r1, r3
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	691b      	ldr	r3, [r3, #16]
 800186e:	021a      	lsls	r2, r3, #8
 8001870:	4b75      	ldr	r3, [pc, #468]	; (8001a48 <HAL_RCC_OscConfig+0x354>)
 8001872:	430a      	orrs	r2, r1
 8001874:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8001876:	4b74      	ldr	r3, [pc, #464]	; (8001a48 <HAL_RCC_OscConfig+0x354>)
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	2209      	movs	r2, #9
 800187c:	4393      	bics	r3, r2
 800187e:	0019      	movs	r1, r3
 8001880:	4b71      	ldr	r3, [pc, #452]	; (8001a48 <HAL_RCC_OscConfig+0x354>)
 8001882:	697a      	ldr	r2, [r7, #20]
 8001884:	430a      	orrs	r2, r1
 8001886:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001888:	f000 fc40 	bl	800210c <HAL_RCC_GetSysClockFreq>
 800188c:	0001      	movs	r1, r0
 800188e:	4b6e      	ldr	r3, [pc, #440]	; (8001a48 <HAL_RCC_OscConfig+0x354>)
 8001890:	68db      	ldr	r3, [r3, #12]
 8001892:	091b      	lsrs	r3, r3, #4
 8001894:	220f      	movs	r2, #15
 8001896:	4013      	ands	r3, r2
 8001898:	4a6f      	ldr	r2, [pc, #444]	; (8001a58 <HAL_RCC_OscConfig+0x364>)
 800189a:	5cd3      	ldrb	r3, [r2, r3]
 800189c:	000a      	movs	r2, r1
 800189e:	40da      	lsrs	r2, r3
 80018a0:	4b6e      	ldr	r3, [pc, #440]	; (8001a5c <HAL_RCC_OscConfig+0x368>)
 80018a2:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 80018a4:	4b6e      	ldr	r3, [pc, #440]	; (8001a60 <HAL_RCC_OscConfig+0x36c>)
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	2513      	movs	r5, #19
 80018aa:	197c      	adds	r4, r7, r5
 80018ac:	0018      	movs	r0, r3
 80018ae:	f7ff fa2d 	bl	8000d0c <HAL_InitTick>
 80018b2:	0003      	movs	r3, r0
 80018b4:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 80018b6:	197b      	adds	r3, r7, r5
 80018b8:	781b      	ldrb	r3, [r3, #0]
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d046      	beq.n	800194c <HAL_RCC_OscConfig+0x258>
      {
        return status;
 80018be:	197b      	adds	r3, r7, r5
 80018c0:	781b      	ldrb	r3, [r3, #0]
 80018c2:	e2d0      	b.n	8001e66 <HAL_RCC_OscConfig+0x772>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 80018c4:	697b      	ldr	r3, [r7, #20]
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d027      	beq.n	800191a <HAL_RCC_OscConfig+0x226>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 80018ca:	4b5f      	ldr	r3, [pc, #380]	; (8001a48 <HAL_RCC_OscConfig+0x354>)
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	2209      	movs	r2, #9
 80018d0:	4393      	bics	r3, r2
 80018d2:	0019      	movs	r1, r3
 80018d4:	4b5c      	ldr	r3, [pc, #368]	; (8001a48 <HAL_RCC_OscConfig+0x354>)
 80018d6:	697a      	ldr	r2, [r7, #20]
 80018d8:	430a      	orrs	r2, r1
 80018da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018dc:	f7ff fa5c 	bl	8000d98 <HAL_GetTick>
 80018e0:	0003      	movs	r3, r0
 80018e2:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80018e4:	e008      	b.n	80018f8 <HAL_RCC_OscConfig+0x204>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80018e6:	f7ff fa57 	bl	8000d98 <HAL_GetTick>
 80018ea:	0002      	movs	r2, r0
 80018ec:	69bb      	ldr	r3, [r7, #24]
 80018ee:	1ad3      	subs	r3, r2, r3
 80018f0:	2b02      	cmp	r3, #2
 80018f2:	d901      	bls.n	80018f8 <HAL_RCC_OscConfig+0x204>
          {
            return HAL_TIMEOUT;
 80018f4:	2303      	movs	r3, #3
 80018f6:	e2b6      	b.n	8001e66 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80018f8:	4b53      	ldr	r3, [pc, #332]	; (8001a48 <HAL_RCC_OscConfig+0x354>)
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	2204      	movs	r2, #4
 80018fe:	4013      	ands	r3, r2
 8001900:	d0f1      	beq.n	80018e6 <HAL_RCC_OscConfig+0x1f2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001902:	4b51      	ldr	r3, [pc, #324]	; (8001a48 <HAL_RCC_OscConfig+0x354>)
 8001904:	685b      	ldr	r3, [r3, #4]
 8001906:	4a53      	ldr	r2, [pc, #332]	; (8001a54 <HAL_RCC_OscConfig+0x360>)
 8001908:	4013      	ands	r3, r2
 800190a:	0019      	movs	r1, r3
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	691b      	ldr	r3, [r3, #16]
 8001910:	021a      	lsls	r2, r3, #8
 8001912:	4b4d      	ldr	r3, [pc, #308]	; (8001a48 <HAL_RCC_OscConfig+0x354>)
 8001914:	430a      	orrs	r2, r1
 8001916:	605a      	str	r2, [r3, #4]
 8001918:	e018      	b.n	800194c <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800191a:	4b4b      	ldr	r3, [pc, #300]	; (8001a48 <HAL_RCC_OscConfig+0x354>)
 800191c:	681a      	ldr	r2, [r3, #0]
 800191e:	4b4a      	ldr	r3, [pc, #296]	; (8001a48 <HAL_RCC_OscConfig+0x354>)
 8001920:	2101      	movs	r1, #1
 8001922:	438a      	bics	r2, r1
 8001924:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001926:	f7ff fa37 	bl	8000d98 <HAL_GetTick>
 800192a:	0003      	movs	r3, r0
 800192c:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800192e:	e008      	b.n	8001942 <HAL_RCC_OscConfig+0x24e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001930:	f7ff fa32 	bl	8000d98 <HAL_GetTick>
 8001934:	0002      	movs	r2, r0
 8001936:	69bb      	ldr	r3, [r7, #24]
 8001938:	1ad3      	subs	r3, r2, r3
 800193a:	2b02      	cmp	r3, #2
 800193c:	d901      	bls.n	8001942 <HAL_RCC_OscConfig+0x24e>
          {
            return HAL_TIMEOUT;
 800193e:	2303      	movs	r3, #3
 8001940:	e291      	b.n	8001e66 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001942:	4b41      	ldr	r3, [pc, #260]	; (8001a48 <HAL_RCC_OscConfig+0x354>)
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	2204      	movs	r2, #4
 8001948:	4013      	ands	r3, r2
 800194a:	d1f1      	bne.n	8001930 <HAL_RCC_OscConfig+0x23c>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	2210      	movs	r2, #16
 8001952:	4013      	ands	r3, r2
 8001954:	d100      	bne.n	8001958 <HAL_RCC_OscConfig+0x264>
 8001956:	e0a1      	b.n	8001a9c <HAL_RCC_OscConfig+0x3a8>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001958:	6a3b      	ldr	r3, [r7, #32]
 800195a:	2b00      	cmp	r3, #0
 800195c:	d140      	bne.n	80019e0 <HAL_RCC_OscConfig+0x2ec>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800195e:	4b3a      	ldr	r3, [pc, #232]	; (8001a48 <HAL_RCC_OscConfig+0x354>)
 8001960:	681a      	ldr	r2, [r3, #0]
 8001962:	2380      	movs	r3, #128	; 0x80
 8001964:	009b      	lsls	r3, r3, #2
 8001966:	4013      	ands	r3, r2
 8001968:	d005      	beq.n	8001976 <HAL_RCC_OscConfig+0x282>
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	69db      	ldr	r3, [r3, #28]
 800196e:	2b00      	cmp	r3, #0
 8001970:	d101      	bne.n	8001976 <HAL_RCC_OscConfig+0x282>
      {
        return HAL_ERROR;
 8001972:	2301      	movs	r3, #1
 8001974:	e277      	b.n	8001e66 <HAL_RCC_OscConfig+0x772>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001976:	4b34      	ldr	r3, [pc, #208]	; (8001a48 <HAL_RCC_OscConfig+0x354>)
 8001978:	685b      	ldr	r3, [r3, #4]
 800197a:	4a3a      	ldr	r2, [pc, #232]	; (8001a64 <HAL_RCC_OscConfig+0x370>)
 800197c:	4013      	ands	r3, r2
 800197e:	0019      	movs	r1, r3
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001984:	4b30      	ldr	r3, [pc, #192]	; (8001a48 <HAL_RCC_OscConfig+0x354>)
 8001986:	430a      	orrs	r2, r1
 8001988:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800198a:	4b2f      	ldr	r3, [pc, #188]	; (8001a48 <HAL_RCC_OscConfig+0x354>)
 800198c:	685b      	ldr	r3, [r3, #4]
 800198e:	021b      	lsls	r3, r3, #8
 8001990:	0a19      	lsrs	r1, r3, #8
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	6a1b      	ldr	r3, [r3, #32]
 8001996:	061a      	lsls	r2, r3, #24
 8001998:	4b2b      	ldr	r3, [pc, #172]	; (8001a48 <HAL_RCC_OscConfig+0x354>)
 800199a:	430a      	orrs	r2, r1
 800199c:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019a2:	0b5b      	lsrs	r3, r3, #13
 80019a4:	3301      	adds	r3, #1
 80019a6:	2280      	movs	r2, #128	; 0x80
 80019a8:	0212      	lsls	r2, r2, #8
 80019aa:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 80019ac:	4b26      	ldr	r3, [pc, #152]	; (8001a48 <HAL_RCC_OscConfig+0x354>)
 80019ae:	68db      	ldr	r3, [r3, #12]
 80019b0:	091b      	lsrs	r3, r3, #4
 80019b2:	210f      	movs	r1, #15
 80019b4:	400b      	ands	r3, r1
 80019b6:	4928      	ldr	r1, [pc, #160]	; (8001a58 <HAL_RCC_OscConfig+0x364>)
 80019b8:	5ccb      	ldrb	r3, [r1, r3]
 80019ba:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80019bc:	4b27      	ldr	r3, [pc, #156]	; (8001a5c <HAL_RCC_OscConfig+0x368>)
 80019be:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 80019c0:	4b27      	ldr	r3, [pc, #156]	; (8001a60 <HAL_RCC_OscConfig+0x36c>)
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	2513      	movs	r5, #19
 80019c6:	197c      	adds	r4, r7, r5
 80019c8:	0018      	movs	r0, r3
 80019ca:	f7ff f99f 	bl	8000d0c <HAL_InitTick>
 80019ce:	0003      	movs	r3, r0
 80019d0:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 80019d2:	197b      	adds	r3, r7, r5
 80019d4:	781b      	ldrb	r3, [r3, #0]
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d060      	beq.n	8001a9c <HAL_RCC_OscConfig+0x3a8>
        {
          return status;
 80019da:	197b      	adds	r3, r7, r5
 80019dc:	781b      	ldrb	r3, [r3, #0]
 80019de:	e242      	b.n	8001e66 <HAL_RCC_OscConfig+0x772>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	69db      	ldr	r3, [r3, #28]
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d03f      	beq.n	8001a68 <HAL_RCC_OscConfig+0x374>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80019e8:	4b17      	ldr	r3, [pc, #92]	; (8001a48 <HAL_RCC_OscConfig+0x354>)
 80019ea:	681a      	ldr	r2, [r3, #0]
 80019ec:	4b16      	ldr	r3, [pc, #88]	; (8001a48 <HAL_RCC_OscConfig+0x354>)
 80019ee:	2180      	movs	r1, #128	; 0x80
 80019f0:	0049      	lsls	r1, r1, #1
 80019f2:	430a      	orrs	r2, r1
 80019f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019f6:	f7ff f9cf 	bl	8000d98 <HAL_GetTick>
 80019fa:	0003      	movs	r3, r0
 80019fc:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80019fe:	e008      	b.n	8001a12 <HAL_RCC_OscConfig+0x31e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001a00:	f7ff f9ca 	bl	8000d98 <HAL_GetTick>
 8001a04:	0002      	movs	r2, r0
 8001a06:	69bb      	ldr	r3, [r7, #24]
 8001a08:	1ad3      	subs	r3, r2, r3
 8001a0a:	2b02      	cmp	r3, #2
 8001a0c:	d901      	bls.n	8001a12 <HAL_RCC_OscConfig+0x31e>
          {
            return HAL_TIMEOUT;
 8001a0e:	2303      	movs	r3, #3
 8001a10:	e229      	b.n	8001e66 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001a12:	4b0d      	ldr	r3, [pc, #52]	; (8001a48 <HAL_RCC_OscConfig+0x354>)
 8001a14:	681a      	ldr	r2, [r3, #0]
 8001a16:	2380      	movs	r3, #128	; 0x80
 8001a18:	009b      	lsls	r3, r3, #2
 8001a1a:	4013      	ands	r3, r2
 8001a1c:	d0f0      	beq.n	8001a00 <HAL_RCC_OscConfig+0x30c>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001a1e:	4b0a      	ldr	r3, [pc, #40]	; (8001a48 <HAL_RCC_OscConfig+0x354>)
 8001a20:	685b      	ldr	r3, [r3, #4]
 8001a22:	4a10      	ldr	r2, [pc, #64]	; (8001a64 <HAL_RCC_OscConfig+0x370>)
 8001a24:	4013      	ands	r3, r2
 8001a26:	0019      	movs	r1, r3
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001a2c:	4b06      	ldr	r3, [pc, #24]	; (8001a48 <HAL_RCC_OscConfig+0x354>)
 8001a2e:	430a      	orrs	r2, r1
 8001a30:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001a32:	4b05      	ldr	r3, [pc, #20]	; (8001a48 <HAL_RCC_OscConfig+0x354>)
 8001a34:	685b      	ldr	r3, [r3, #4]
 8001a36:	021b      	lsls	r3, r3, #8
 8001a38:	0a19      	lsrs	r1, r3, #8
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	6a1b      	ldr	r3, [r3, #32]
 8001a3e:	061a      	lsls	r2, r3, #24
 8001a40:	4b01      	ldr	r3, [pc, #4]	; (8001a48 <HAL_RCC_OscConfig+0x354>)
 8001a42:	430a      	orrs	r2, r1
 8001a44:	605a      	str	r2, [r3, #4]
 8001a46:	e029      	b.n	8001a9c <HAL_RCC_OscConfig+0x3a8>
 8001a48:	40021000 	.word	0x40021000
 8001a4c:	fffeffff 	.word	0xfffeffff
 8001a50:	fffbffff 	.word	0xfffbffff
 8001a54:	ffffe0ff 	.word	0xffffe0ff
 8001a58:	08005644 	.word	0x08005644
 8001a5c:	20000000 	.word	0x20000000
 8001a60:	20000004 	.word	0x20000004
 8001a64:	ffff1fff 	.word	0xffff1fff
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001a68:	4bbd      	ldr	r3, [pc, #756]	; (8001d60 <HAL_RCC_OscConfig+0x66c>)
 8001a6a:	681a      	ldr	r2, [r3, #0]
 8001a6c:	4bbc      	ldr	r3, [pc, #752]	; (8001d60 <HAL_RCC_OscConfig+0x66c>)
 8001a6e:	49bd      	ldr	r1, [pc, #756]	; (8001d64 <HAL_RCC_OscConfig+0x670>)
 8001a70:	400a      	ands	r2, r1
 8001a72:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a74:	f7ff f990 	bl	8000d98 <HAL_GetTick>
 8001a78:	0003      	movs	r3, r0
 8001a7a:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8001a7c:	e008      	b.n	8001a90 <HAL_RCC_OscConfig+0x39c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001a7e:	f7ff f98b 	bl	8000d98 <HAL_GetTick>
 8001a82:	0002      	movs	r2, r0
 8001a84:	69bb      	ldr	r3, [r7, #24]
 8001a86:	1ad3      	subs	r3, r2, r3
 8001a88:	2b02      	cmp	r3, #2
 8001a8a:	d901      	bls.n	8001a90 <HAL_RCC_OscConfig+0x39c>
          {
            return HAL_TIMEOUT;
 8001a8c:	2303      	movs	r3, #3
 8001a8e:	e1ea      	b.n	8001e66 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8001a90:	4bb3      	ldr	r3, [pc, #716]	; (8001d60 <HAL_RCC_OscConfig+0x66c>)
 8001a92:	681a      	ldr	r2, [r3, #0]
 8001a94:	2380      	movs	r3, #128	; 0x80
 8001a96:	009b      	lsls	r3, r3, #2
 8001a98:	4013      	ands	r3, r2
 8001a9a:	d1f0      	bne.n	8001a7e <HAL_RCC_OscConfig+0x38a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	2208      	movs	r2, #8
 8001aa2:	4013      	ands	r3, r2
 8001aa4:	d036      	beq.n	8001b14 <HAL_RCC_OscConfig+0x420>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	695b      	ldr	r3, [r3, #20]
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d019      	beq.n	8001ae2 <HAL_RCC_OscConfig+0x3ee>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001aae:	4bac      	ldr	r3, [pc, #688]	; (8001d60 <HAL_RCC_OscConfig+0x66c>)
 8001ab0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001ab2:	4bab      	ldr	r3, [pc, #684]	; (8001d60 <HAL_RCC_OscConfig+0x66c>)
 8001ab4:	2101      	movs	r1, #1
 8001ab6:	430a      	orrs	r2, r1
 8001ab8:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001aba:	f7ff f96d 	bl	8000d98 <HAL_GetTick>
 8001abe:	0003      	movs	r3, r0
 8001ac0:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001ac2:	e008      	b.n	8001ad6 <HAL_RCC_OscConfig+0x3e2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001ac4:	f7ff f968 	bl	8000d98 <HAL_GetTick>
 8001ac8:	0002      	movs	r2, r0
 8001aca:	69bb      	ldr	r3, [r7, #24]
 8001acc:	1ad3      	subs	r3, r2, r3
 8001ace:	2b02      	cmp	r3, #2
 8001ad0:	d901      	bls.n	8001ad6 <HAL_RCC_OscConfig+0x3e2>
        {
          return HAL_TIMEOUT;
 8001ad2:	2303      	movs	r3, #3
 8001ad4:	e1c7      	b.n	8001e66 <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001ad6:	4ba2      	ldr	r3, [pc, #648]	; (8001d60 <HAL_RCC_OscConfig+0x66c>)
 8001ad8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001ada:	2202      	movs	r2, #2
 8001adc:	4013      	ands	r3, r2
 8001ade:	d0f1      	beq.n	8001ac4 <HAL_RCC_OscConfig+0x3d0>
 8001ae0:	e018      	b.n	8001b14 <HAL_RCC_OscConfig+0x420>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001ae2:	4b9f      	ldr	r3, [pc, #636]	; (8001d60 <HAL_RCC_OscConfig+0x66c>)
 8001ae4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001ae6:	4b9e      	ldr	r3, [pc, #632]	; (8001d60 <HAL_RCC_OscConfig+0x66c>)
 8001ae8:	2101      	movs	r1, #1
 8001aea:	438a      	bics	r2, r1
 8001aec:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001aee:	f7ff f953 	bl	8000d98 <HAL_GetTick>
 8001af2:	0003      	movs	r3, r0
 8001af4:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001af6:	e008      	b.n	8001b0a <HAL_RCC_OscConfig+0x416>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001af8:	f7ff f94e 	bl	8000d98 <HAL_GetTick>
 8001afc:	0002      	movs	r2, r0
 8001afe:	69bb      	ldr	r3, [r7, #24]
 8001b00:	1ad3      	subs	r3, r2, r3
 8001b02:	2b02      	cmp	r3, #2
 8001b04:	d901      	bls.n	8001b0a <HAL_RCC_OscConfig+0x416>
        {
          return HAL_TIMEOUT;
 8001b06:	2303      	movs	r3, #3
 8001b08:	e1ad      	b.n	8001e66 <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001b0a:	4b95      	ldr	r3, [pc, #596]	; (8001d60 <HAL_RCC_OscConfig+0x66c>)
 8001b0c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001b0e:	2202      	movs	r2, #2
 8001b10:	4013      	ands	r3, r2
 8001b12:	d1f1      	bne.n	8001af8 <HAL_RCC_OscConfig+0x404>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	2204      	movs	r2, #4
 8001b1a:	4013      	ands	r3, r2
 8001b1c:	d100      	bne.n	8001b20 <HAL_RCC_OscConfig+0x42c>
 8001b1e:	e0ae      	b.n	8001c7e <HAL_RCC_OscConfig+0x58a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001b20:	2027      	movs	r0, #39	; 0x27
 8001b22:	183b      	adds	r3, r7, r0
 8001b24:	2200      	movs	r2, #0
 8001b26:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001b28:	4b8d      	ldr	r3, [pc, #564]	; (8001d60 <HAL_RCC_OscConfig+0x66c>)
 8001b2a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001b2c:	2380      	movs	r3, #128	; 0x80
 8001b2e:	055b      	lsls	r3, r3, #21
 8001b30:	4013      	ands	r3, r2
 8001b32:	d109      	bne.n	8001b48 <HAL_RCC_OscConfig+0x454>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001b34:	4b8a      	ldr	r3, [pc, #552]	; (8001d60 <HAL_RCC_OscConfig+0x66c>)
 8001b36:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001b38:	4b89      	ldr	r3, [pc, #548]	; (8001d60 <HAL_RCC_OscConfig+0x66c>)
 8001b3a:	2180      	movs	r1, #128	; 0x80
 8001b3c:	0549      	lsls	r1, r1, #21
 8001b3e:	430a      	orrs	r2, r1
 8001b40:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8001b42:	183b      	adds	r3, r7, r0
 8001b44:	2201      	movs	r2, #1
 8001b46:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b48:	4b87      	ldr	r3, [pc, #540]	; (8001d68 <HAL_RCC_OscConfig+0x674>)
 8001b4a:	681a      	ldr	r2, [r3, #0]
 8001b4c:	2380      	movs	r3, #128	; 0x80
 8001b4e:	005b      	lsls	r3, r3, #1
 8001b50:	4013      	ands	r3, r2
 8001b52:	d11a      	bne.n	8001b8a <HAL_RCC_OscConfig+0x496>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001b54:	4b84      	ldr	r3, [pc, #528]	; (8001d68 <HAL_RCC_OscConfig+0x674>)
 8001b56:	681a      	ldr	r2, [r3, #0]
 8001b58:	4b83      	ldr	r3, [pc, #524]	; (8001d68 <HAL_RCC_OscConfig+0x674>)
 8001b5a:	2180      	movs	r1, #128	; 0x80
 8001b5c:	0049      	lsls	r1, r1, #1
 8001b5e:	430a      	orrs	r2, r1
 8001b60:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001b62:	f7ff f919 	bl	8000d98 <HAL_GetTick>
 8001b66:	0003      	movs	r3, r0
 8001b68:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b6a:	e008      	b.n	8001b7e <HAL_RCC_OscConfig+0x48a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b6c:	f7ff f914 	bl	8000d98 <HAL_GetTick>
 8001b70:	0002      	movs	r2, r0
 8001b72:	69bb      	ldr	r3, [r7, #24]
 8001b74:	1ad3      	subs	r3, r2, r3
 8001b76:	2b64      	cmp	r3, #100	; 0x64
 8001b78:	d901      	bls.n	8001b7e <HAL_RCC_OscConfig+0x48a>
        {
          return HAL_TIMEOUT;
 8001b7a:	2303      	movs	r3, #3
 8001b7c:	e173      	b.n	8001e66 <HAL_RCC_OscConfig+0x772>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b7e:	4b7a      	ldr	r3, [pc, #488]	; (8001d68 <HAL_RCC_OscConfig+0x674>)
 8001b80:	681a      	ldr	r2, [r3, #0]
 8001b82:	2380      	movs	r3, #128	; 0x80
 8001b84:	005b      	lsls	r3, r3, #1
 8001b86:	4013      	ands	r3, r2
 8001b88:	d0f0      	beq.n	8001b6c <HAL_RCC_OscConfig+0x478>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	689a      	ldr	r2, [r3, #8]
 8001b8e:	2380      	movs	r3, #128	; 0x80
 8001b90:	005b      	lsls	r3, r3, #1
 8001b92:	429a      	cmp	r2, r3
 8001b94:	d107      	bne.n	8001ba6 <HAL_RCC_OscConfig+0x4b2>
 8001b96:	4b72      	ldr	r3, [pc, #456]	; (8001d60 <HAL_RCC_OscConfig+0x66c>)
 8001b98:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001b9a:	4b71      	ldr	r3, [pc, #452]	; (8001d60 <HAL_RCC_OscConfig+0x66c>)
 8001b9c:	2180      	movs	r1, #128	; 0x80
 8001b9e:	0049      	lsls	r1, r1, #1
 8001ba0:	430a      	orrs	r2, r1
 8001ba2:	651a      	str	r2, [r3, #80]	; 0x50
 8001ba4:	e031      	b.n	8001c0a <HAL_RCC_OscConfig+0x516>
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	689b      	ldr	r3, [r3, #8]
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d10c      	bne.n	8001bc8 <HAL_RCC_OscConfig+0x4d4>
 8001bae:	4b6c      	ldr	r3, [pc, #432]	; (8001d60 <HAL_RCC_OscConfig+0x66c>)
 8001bb0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001bb2:	4b6b      	ldr	r3, [pc, #428]	; (8001d60 <HAL_RCC_OscConfig+0x66c>)
 8001bb4:	496b      	ldr	r1, [pc, #428]	; (8001d64 <HAL_RCC_OscConfig+0x670>)
 8001bb6:	400a      	ands	r2, r1
 8001bb8:	651a      	str	r2, [r3, #80]	; 0x50
 8001bba:	4b69      	ldr	r3, [pc, #420]	; (8001d60 <HAL_RCC_OscConfig+0x66c>)
 8001bbc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001bbe:	4b68      	ldr	r3, [pc, #416]	; (8001d60 <HAL_RCC_OscConfig+0x66c>)
 8001bc0:	496a      	ldr	r1, [pc, #424]	; (8001d6c <HAL_RCC_OscConfig+0x678>)
 8001bc2:	400a      	ands	r2, r1
 8001bc4:	651a      	str	r2, [r3, #80]	; 0x50
 8001bc6:	e020      	b.n	8001c0a <HAL_RCC_OscConfig+0x516>
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	689a      	ldr	r2, [r3, #8]
 8001bcc:	23a0      	movs	r3, #160	; 0xa0
 8001bce:	00db      	lsls	r3, r3, #3
 8001bd0:	429a      	cmp	r2, r3
 8001bd2:	d10e      	bne.n	8001bf2 <HAL_RCC_OscConfig+0x4fe>
 8001bd4:	4b62      	ldr	r3, [pc, #392]	; (8001d60 <HAL_RCC_OscConfig+0x66c>)
 8001bd6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001bd8:	4b61      	ldr	r3, [pc, #388]	; (8001d60 <HAL_RCC_OscConfig+0x66c>)
 8001bda:	2180      	movs	r1, #128	; 0x80
 8001bdc:	00c9      	lsls	r1, r1, #3
 8001bde:	430a      	orrs	r2, r1
 8001be0:	651a      	str	r2, [r3, #80]	; 0x50
 8001be2:	4b5f      	ldr	r3, [pc, #380]	; (8001d60 <HAL_RCC_OscConfig+0x66c>)
 8001be4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001be6:	4b5e      	ldr	r3, [pc, #376]	; (8001d60 <HAL_RCC_OscConfig+0x66c>)
 8001be8:	2180      	movs	r1, #128	; 0x80
 8001bea:	0049      	lsls	r1, r1, #1
 8001bec:	430a      	orrs	r2, r1
 8001bee:	651a      	str	r2, [r3, #80]	; 0x50
 8001bf0:	e00b      	b.n	8001c0a <HAL_RCC_OscConfig+0x516>
 8001bf2:	4b5b      	ldr	r3, [pc, #364]	; (8001d60 <HAL_RCC_OscConfig+0x66c>)
 8001bf4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001bf6:	4b5a      	ldr	r3, [pc, #360]	; (8001d60 <HAL_RCC_OscConfig+0x66c>)
 8001bf8:	495a      	ldr	r1, [pc, #360]	; (8001d64 <HAL_RCC_OscConfig+0x670>)
 8001bfa:	400a      	ands	r2, r1
 8001bfc:	651a      	str	r2, [r3, #80]	; 0x50
 8001bfe:	4b58      	ldr	r3, [pc, #352]	; (8001d60 <HAL_RCC_OscConfig+0x66c>)
 8001c00:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001c02:	4b57      	ldr	r3, [pc, #348]	; (8001d60 <HAL_RCC_OscConfig+0x66c>)
 8001c04:	4959      	ldr	r1, [pc, #356]	; (8001d6c <HAL_RCC_OscConfig+0x678>)
 8001c06:	400a      	ands	r2, r1
 8001c08:	651a      	str	r2, [r3, #80]	; 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	689b      	ldr	r3, [r3, #8]
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d015      	beq.n	8001c3e <HAL_RCC_OscConfig+0x54a>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c12:	f7ff f8c1 	bl	8000d98 <HAL_GetTick>
 8001c16:	0003      	movs	r3, r0
 8001c18:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001c1a:	e009      	b.n	8001c30 <HAL_RCC_OscConfig+0x53c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001c1c:	f7ff f8bc 	bl	8000d98 <HAL_GetTick>
 8001c20:	0002      	movs	r2, r0
 8001c22:	69bb      	ldr	r3, [r7, #24]
 8001c24:	1ad3      	subs	r3, r2, r3
 8001c26:	4a52      	ldr	r2, [pc, #328]	; (8001d70 <HAL_RCC_OscConfig+0x67c>)
 8001c28:	4293      	cmp	r3, r2
 8001c2a:	d901      	bls.n	8001c30 <HAL_RCC_OscConfig+0x53c>
        {
          return HAL_TIMEOUT;
 8001c2c:	2303      	movs	r3, #3
 8001c2e:	e11a      	b.n	8001e66 <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001c30:	4b4b      	ldr	r3, [pc, #300]	; (8001d60 <HAL_RCC_OscConfig+0x66c>)
 8001c32:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001c34:	2380      	movs	r3, #128	; 0x80
 8001c36:	009b      	lsls	r3, r3, #2
 8001c38:	4013      	ands	r3, r2
 8001c3a:	d0ef      	beq.n	8001c1c <HAL_RCC_OscConfig+0x528>
 8001c3c:	e014      	b.n	8001c68 <HAL_RCC_OscConfig+0x574>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c3e:	f7ff f8ab 	bl	8000d98 <HAL_GetTick>
 8001c42:	0003      	movs	r3, r0
 8001c44:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001c46:	e009      	b.n	8001c5c <HAL_RCC_OscConfig+0x568>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001c48:	f7ff f8a6 	bl	8000d98 <HAL_GetTick>
 8001c4c:	0002      	movs	r2, r0
 8001c4e:	69bb      	ldr	r3, [r7, #24]
 8001c50:	1ad3      	subs	r3, r2, r3
 8001c52:	4a47      	ldr	r2, [pc, #284]	; (8001d70 <HAL_RCC_OscConfig+0x67c>)
 8001c54:	4293      	cmp	r3, r2
 8001c56:	d901      	bls.n	8001c5c <HAL_RCC_OscConfig+0x568>
        {
          return HAL_TIMEOUT;
 8001c58:	2303      	movs	r3, #3
 8001c5a:	e104      	b.n	8001e66 <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001c5c:	4b40      	ldr	r3, [pc, #256]	; (8001d60 <HAL_RCC_OscConfig+0x66c>)
 8001c5e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001c60:	2380      	movs	r3, #128	; 0x80
 8001c62:	009b      	lsls	r3, r3, #2
 8001c64:	4013      	ands	r3, r2
 8001c66:	d1ef      	bne.n	8001c48 <HAL_RCC_OscConfig+0x554>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001c68:	2327      	movs	r3, #39	; 0x27
 8001c6a:	18fb      	adds	r3, r7, r3
 8001c6c:	781b      	ldrb	r3, [r3, #0]
 8001c6e:	2b01      	cmp	r3, #1
 8001c70:	d105      	bne.n	8001c7e <HAL_RCC_OscConfig+0x58a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001c72:	4b3b      	ldr	r3, [pc, #236]	; (8001d60 <HAL_RCC_OscConfig+0x66c>)
 8001c74:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001c76:	4b3a      	ldr	r3, [pc, #232]	; (8001d60 <HAL_RCC_OscConfig+0x66c>)
 8001c78:	493e      	ldr	r1, [pc, #248]	; (8001d74 <HAL_RCC_OscConfig+0x680>)
 8001c7a:	400a      	ands	r2, r1
 8001c7c:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	2220      	movs	r2, #32
 8001c84:	4013      	ands	r3, r2
 8001c86:	d049      	beq.n	8001d1c <HAL_RCC_OscConfig+0x628>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	699b      	ldr	r3, [r3, #24]
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d026      	beq.n	8001cde <HAL_RCC_OscConfig+0x5ea>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8001c90:	4b33      	ldr	r3, [pc, #204]	; (8001d60 <HAL_RCC_OscConfig+0x66c>)
 8001c92:	689a      	ldr	r2, [r3, #8]
 8001c94:	4b32      	ldr	r3, [pc, #200]	; (8001d60 <HAL_RCC_OscConfig+0x66c>)
 8001c96:	2101      	movs	r1, #1
 8001c98:	430a      	orrs	r2, r1
 8001c9a:	609a      	str	r2, [r3, #8]
 8001c9c:	4b30      	ldr	r3, [pc, #192]	; (8001d60 <HAL_RCC_OscConfig+0x66c>)
 8001c9e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001ca0:	4b2f      	ldr	r3, [pc, #188]	; (8001d60 <HAL_RCC_OscConfig+0x66c>)
 8001ca2:	2101      	movs	r1, #1
 8001ca4:	430a      	orrs	r2, r1
 8001ca6:	635a      	str	r2, [r3, #52]	; 0x34
 8001ca8:	4b33      	ldr	r3, [pc, #204]	; (8001d78 <HAL_RCC_OscConfig+0x684>)
 8001caa:	6a1a      	ldr	r2, [r3, #32]
 8001cac:	4b32      	ldr	r3, [pc, #200]	; (8001d78 <HAL_RCC_OscConfig+0x684>)
 8001cae:	2180      	movs	r1, #128	; 0x80
 8001cb0:	0189      	lsls	r1, r1, #6
 8001cb2:	430a      	orrs	r2, r1
 8001cb4:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cb6:	f7ff f86f 	bl	8000d98 <HAL_GetTick>
 8001cba:	0003      	movs	r3, r0
 8001cbc:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001cbe:	e008      	b.n	8001cd2 <HAL_RCC_OscConfig+0x5de>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001cc0:	f7ff f86a 	bl	8000d98 <HAL_GetTick>
 8001cc4:	0002      	movs	r2, r0
 8001cc6:	69bb      	ldr	r3, [r7, #24]
 8001cc8:	1ad3      	subs	r3, r2, r3
 8001cca:	2b02      	cmp	r3, #2
 8001ccc:	d901      	bls.n	8001cd2 <HAL_RCC_OscConfig+0x5de>
          {
            return HAL_TIMEOUT;
 8001cce:	2303      	movs	r3, #3
 8001cd0:	e0c9      	b.n	8001e66 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001cd2:	4b23      	ldr	r3, [pc, #140]	; (8001d60 <HAL_RCC_OscConfig+0x66c>)
 8001cd4:	689b      	ldr	r3, [r3, #8]
 8001cd6:	2202      	movs	r2, #2
 8001cd8:	4013      	ands	r3, r2
 8001cda:	d0f1      	beq.n	8001cc0 <HAL_RCC_OscConfig+0x5cc>
 8001cdc:	e01e      	b.n	8001d1c <HAL_RCC_OscConfig+0x628>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8001cde:	4b20      	ldr	r3, [pc, #128]	; (8001d60 <HAL_RCC_OscConfig+0x66c>)
 8001ce0:	689a      	ldr	r2, [r3, #8]
 8001ce2:	4b1f      	ldr	r3, [pc, #124]	; (8001d60 <HAL_RCC_OscConfig+0x66c>)
 8001ce4:	2101      	movs	r1, #1
 8001ce6:	438a      	bics	r2, r1
 8001ce8:	609a      	str	r2, [r3, #8]
 8001cea:	4b23      	ldr	r3, [pc, #140]	; (8001d78 <HAL_RCC_OscConfig+0x684>)
 8001cec:	6a1a      	ldr	r2, [r3, #32]
 8001cee:	4b22      	ldr	r3, [pc, #136]	; (8001d78 <HAL_RCC_OscConfig+0x684>)
 8001cf0:	4922      	ldr	r1, [pc, #136]	; (8001d7c <HAL_RCC_OscConfig+0x688>)
 8001cf2:	400a      	ands	r2, r1
 8001cf4:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cf6:	f7ff f84f 	bl	8000d98 <HAL_GetTick>
 8001cfa:	0003      	movs	r3, r0
 8001cfc:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001cfe:	e008      	b.n	8001d12 <HAL_RCC_OscConfig+0x61e>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001d00:	f7ff f84a 	bl	8000d98 <HAL_GetTick>
 8001d04:	0002      	movs	r2, r0
 8001d06:	69bb      	ldr	r3, [r7, #24]
 8001d08:	1ad3      	subs	r3, r2, r3
 8001d0a:	2b02      	cmp	r3, #2
 8001d0c:	d901      	bls.n	8001d12 <HAL_RCC_OscConfig+0x61e>
          {
            return HAL_TIMEOUT;
 8001d0e:	2303      	movs	r3, #3
 8001d10:	e0a9      	b.n	8001e66 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001d12:	4b13      	ldr	r3, [pc, #76]	; (8001d60 <HAL_RCC_OscConfig+0x66c>)
 8001d14:	689b      	ldr	r3, [r3, #8]
 8001d16:	2202      	movs	r2, #2
 8001d18:	4013      	ands	r3, r2
 8001d1a:	d1f1      	bne.n	8001d00 <HAL_RCC_OscConfig+0x60c>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d100      	bne.n	8001d26 <HAL_RCC_OscConfig+0x632>
 8001d24:	e09e      	b.n	8001e64 <HAL_RCC_OscConfig+0x770>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001d26:	6a3b      	ldr	r3, [r7, #32]
 8001d28:	2b0c      	cmp	r3, #12
 8001d2a:	d100      	bne.n	8001d2e <HAL_RCC_OscConfig+0x63a>
 8001d2c:	e077      	b.n	8001e1e <HAL_RCC_OscConfig+0x72a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d32:	2b02      	cmp	r3, #2
 8001d34:	d158      	bne.n	8001de8 <HAL_RCC_OscConfig+0x6f4>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d36:	4b0a      	ldr	r3, [pc, #40]	; (8001d60 <HAL_RCC_OscConfig+0x66c>)
 8001d38:	681a      	ldr	r2, [r3, #0]
 8001d3a:	4b09      	ldr	r3, [pc, #36]	; (8001d60 <HAL_RCC_OscConfig+0x66c>)
 8001d3c:	4910      	ldr	r1, [pc, #64]	; (8001d80 <HAL_RCC_OscConfig+0x68c>)
 8001d3e:	400a      	ands	r2, r1
 8001d40:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d42:	f7ff f829 	bl	8000d98 <HAL_GetTick>
 8001d46:	0003      	movs	r3, r0
 8001d48:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001d4a:	e01b      	b.n	8001d84 <HAL_RCC_OscConfig+0x690>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001d4c:	f7ff f824 	bl	8000d98 <HAL_GetTick>
 8001d50:	0002      	movs	r2, r0
 8001d52:	69bb      	ldr	r3, [r7, #24]
 8001d54:	1ad3      	subs	r3, r2, r3
 8001d56:	2b02      	cmp	r3, #2
 8001d58:	d914      	bls.n	8001d84 <HAL_RCC_OscConfig+0x690>
          {
            return HAL_TIMEOUT;
 8001d5a:	2303      	movs	r3, #3
 8001d5c:	e083      	b.n	8001e66 <HAL_RCC_OscConfig+0x772>
 8001d5e:	46c0      	nop			; (mov r8, r8)
 8001d60:	40021000 	.word	0x40021000
 8001d64:	fffffeff 	.word	0xfffffeff
 8001d68:	40007000 	.word	0x40007000
 8001d6c:	fffffbff 	.word	0xfffffbff
 8001d70:	00001388 	.word	0x00001388
 8001d74:	efffffff 	.word	0xefffffff
 8001d78:	40010000 	.word	0x40010000
 8001d7c:	ffffdfff 	.word	0xffffdfff
 8001d80:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001d84:	4b3a      	ldr	r3, [pc, #232]	; (8001e70 <HAL_RCC_OscConfig+0x77c>)
 8001d86:	681a      	ldr	r2, [r3, #0]
 8001d88:	2380      	movs	r3, #128	; 0x80
 8001d8a:	049b      	lsls	r3, r3, #18
 8001d8c:	4013      	ands	r3, r2
 8001d8e:	d1dd      	bne.n	8001d4c <HAL_RCC_OscConfig+0x658>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001d90:	4b37      	ldr	r3, [pc, #220]	; (8001e70 <HAL_RCC_OscConfig+0x77c>)
 8001d92:	68db      	ldr	r3, [r3, #12]
 8001d94:	4a37      	ldr	r2, [pc, #220]	; (8001e74 <HAL_RCC_OscConfig+0x780>)
 8001d96:	4013      	ands	r3, r2
 8001d98:	0019      	movs	r1, r3
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001da2:	431a      	orrs	r2, r3
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001da8:	431a      	orrs	r2, r3
 8001daa:	4b31      	ldr	r3, [pc, #196]	; (8001e70 <HAL_RCC_OscConfig+0x77c>)
 8001dac:	430a      	orrs	r2, r1
 8001dae:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001db0:	4b2f      	ldr	r3, [pc, #188]	; (8001e70 <HAL_RCC_OscConfig+0x77c>)
 8001db2:	681a      	ldr	r2, [r3, #0]
 8001db4:	4b2e      	ldr	r3, [pc, #184]	; (8001e70 <HAL_RCC_OscConfig+0x77c>)
 8001db6:	2180      	movs	r1, #128	; 0x80
 8001db8:	0449      	lsls	r1, r1, #17
 8001dba:	430a      	orrs	r2, r1
 8001dbc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dbe:	f7fe ffeb 	bl	8000d98 <HAL_GetTick>
 8001dc2:	0003      	movs	r3, r0
 8001dc4:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8001dc6:	e008      	b.n	8001dda <HAL_RCC_OscConfig+0x6e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001dc8:	f7fe ffe6 	bl	8000d98 <HAL_GetTick>
 8001dcc:	0002      	movs	r2, r0
 8001dce:	69bb      	ldr	r3, [r7, #24]
 8001dd0:	1ad3      	subs	r3, r2, r3
 8001dd2:	2b02      	cmp	r3, #2
 8001dd4:	d901      	bls.n	8001dda <HAL_RCC_OscConfig+0x6e6>
          {
            return HAL_TIMEOUT;
 8001dd6:	2303      	movs	r3, #3
 8001dd8:	e045      	b.n	8001e66 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8001dda:	4b25      	ldr	r3, [pc, #148]	; (8001e70 <HAL_RCC_OscConfig+0x77c>)
 8001ddc:	681a      	ldr	r2, [r3, #0]
 8001dde:	2380      	movs	r3, #128	; 0x80
 8001de0:	049b      	lsls	r3, r3, #18
 8001de2:	4013      	ands	r3, r2
 8001de4:	d0f0      	beq.n	8001dc8 <HAL_RCC_OscConfig+0x6d4>
 8001de6:	e03d      	b.n	8001e64 <HAL_RCC_OscConfig+0x770>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001de8:	4b21      	ldr	r3, [pc, #132]	; (8001e70 <HAL_RCC_OscConfig+0x77c>)
 8001dea:	681a      	ldr	r2, [r3, #0]
 8001dec:	4b20      	ldr	r3, [pc, #128]	; (8001e70 <HAL_RCC_OscConfig+0x77c>)
 8001dee:	4922      	ldr	r1, [pc, #136]	; (8001e78 <HAL_RCC_OscConfig+0x784>)
 8001df0:	400a      	ands	r2, r1
 8001df2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001df4:	f7fe ffd0 	bl	8000d98 <HAL_GetTick>
 8001df8:	0003      	movs	r3, r0
 8001dfa:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001dfc:	e008      	b.n	8001e10 <HAL_RCC_OscConfig+0x71c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001dfe:	f7fe ffcb 	bl	8000d98 <HAL_GetTick>
 8001e02:	0002      	movs	r2, r0
 8001e04:	69bb      	ldr	r3, [r7, #24]
 8001e06:	1ad3      	subs	r3, r2, r3
 8001e08:	2b02      	cmp	r3, #2
 8001e0a:	d901      	bls.n	8001e10 <HAL_RCC_OscConfig+0x71c>
          {
            return HAL_TIMEOUT;
 8001e0c:	2303      	movs	r3, #3
 8001e0e:	e02a      	b.n	8001e66 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001e10:	4b17      	ldr	r3, [pc, #92]	; (8001e70 <HAL_RCC_OscConfig+0x77c>)
 8001e12:	681a      	ldr	r2, [r3, #0]
 8001e14:	2380      	movs	r3, #128	; 0x80
 8001e16:	049b      	lsls	r3, r3, #18
 8001e18:	4013      	ands	r3, r2
 8001e1a:	d1f0      	bne.n	8001dfe <HAL_RCC_OscConfig+0x70a>
 8001e1c:	e022      	b.n	8001e64 <HAL_RCC_OscConfig+0x770>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e22:	2b01      	cmp	r3, #1
 8001e24:	d101      	bne.n	8001e2a <HAL_RCC_OscConfig+0x736>
      {
        return HAL_ERROR;
 8001e26:	2301      	movs	r3, #1
 8001e28:	e01d      	b.n	8001e66 <HAL_RCC_OscConfig+0x772>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001e2a:	4b11      	ldr	r3, [pc, #68]	; (8001e70 <HAL_RCC_OscConfig+0x77c>)
 8001e2c:	68db      	ldr	r3, [r3, #12]
 8001e2e:	61fb      	str	r3, [r7, #28]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e30:	69fa      	ldr	r2, [r7, #28]
 8001e32:	2380      	movs	r3, #128	; 0x80
 8001e34:	025b      	lsls	r3, r3, #9
 8001e36:	401a      	ands	r2, r3
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e3c:	429a      	cmp	r2, r3
 8001e3e:	d10f      	bne.n	8001e60 <HAL_RCC_OscConfig+0x76c>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8001e40:	69fa      	ldr	r2, [r7, #28]
 8001e42:	23f0      	movs	r3, #240	; 0xf0
 8001e44:	039b      	lsls	r3, r3, #14
 8001e46:	401a      	ands	r2, r3
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e4c:	429a      	cmp	r2, r3
 8001e4e:	d107      	bne.n	8001e60 <HAL_RCC_OscConfig+0x76c>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8001e50:	69fa      	ldr	r2, [r7, #28]
 8001e52:	23c0      	movs	r3, #192	; 0xc0
 8001e54:	041b      	lsls	r3, r3, #16
 8001e56:	401a      	ands	r2, r3
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8001e5c:	429a      	cmp	r2, r3
 8001e5e:	d001      	beq.n	8001e64 <HAL_RCC_OscConfig+0x770>
        {
          return HAL_ERROR;
 8001e60:	2301      	movs	r3, #1
 8001e62:	e000      	b.n	8001e66 <HAL_RCC_OscConfig+0x772>
        }
      }
    }
  }
  return HAL_OK;
 8001e64:	2300      	movs	r3, #0
}
 8001e66:	0018      	movs	r0, r3
 8001e68:	46bd      	mov	sp, r7
 8001e6a:	b00a      	add	sp, #40	; 0x28
 8001e6c:	bdb0      	pop	{r4, r5, r7, pc}
 8001e6e:	46c0      	nop			; (mov r8, r8)
 8001e70:	40021000 	.word	0x40021000
 8001e74:	ff02ffff 	.word	0xff02ffff
 8001e78:	feffffff 	.word	0xfeffffff

08001e7c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001e7c:	b5b0      	push	{r4, r5, r7, lr}
 8001e7e:	b084      	sub	sp, #16
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	6078      	str	r0, [r7, #4]
 8001e84:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d101      	bne.n	8001e90 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001e8c:	2301      	movs	r3, #1
 8001e8e:	e128      	b.n	80020e2 <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001e90:	4b96      	ldr	r3, [pc, #600]	; (80020ec <HAL_RCC_ClockConfig+0x270>)
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	2201      	movs	r2, #1
 8001e96:	4013      	ands	r3, r2
 8001e98:	683a      	ldr	r2, [r7, #0]
 8001e9a:	429a      	cmp	r2, r3
 8001e9c:	d91e      	bls.n	8001edc <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e9e:	4b93      	ldr	r3, [pc, #588]	; (80020ec <HAL_RCC_ClockConfig+0x270>)
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	2201      	movs	r2, #1
 8001ea4:	4393      	bics	r3, r2
 8001ea6:	0019      	movs	r1, r3
 8001ea8:	4b90      	ldr	r3, [pc, #576]	; (80020ec <HAL_RCC_ClockConfig+0x270>)
 8001eaa:	683a      	ldr	r2, [r7, #0]
 8001eac:	430a      	orrs	r2, r1
 8001eae:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001eb0:	f7fe ff72 	bl	8000d98 <HAL_GetTick>
 8001eb4:	0003      	movs	r3, r0
 8001eb6:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001eb8:	e009      	b.n	8001ece <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001eba:	f7fe ff6d 	bl	8000d98 <HAL_GetTick>
 8001ebe:	0002      	movs	r2, r0
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	1ad3      	subs	r3, r2, r3
 8001ec4:	4a8a      	ldr	r2, [pc, #552]	; (80020f0 <HAL_RCC_ClockConfig+0x274>)
 8001ec6:	4293      	cmp	r3, r2
 8001ec8:	d901      	bls.n	8001ece <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8001eca:	2303      	movs	r3, #3
 8001ecc:	e109      	b.n	80020e2 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ece:	4b87      	ldr	r3, [pc, #540]	; (80020ec <HAL_RCC_ClockConfig+0x270>)
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	2201      	movs	r2, #1
 8001ed4:	4013      	ands	r3, r2
 8001ed6:	683a      	ldr	r2, [r7, #0]
 8001ed8:	429a      	cmp	r2, r3
 8001eda:	d1ee      	bne.n	8001eba <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	2202      	movs	r2, #2
 8001ee2:	4013      	ands	r3, r2
 8001ee4:	d009      	beq.n	8001efa <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ee6:	4b83      	ldr	r3, [pc, #524]	; (80020f4 <HAL_RCC_ClockConfig+0x278>)
 8001ee8:	68db      	ldr	r3, [r3, #12]
 8001eea:	22f0      	movs	r2, #240	; 0xf0
 8001eec:	4393      	bics	r3, r2
 8001eee:	0019      	movs	r1, r3
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	689a      	ldr	r2, [r3, #8]
 8001ef4:	4b7f      	ldr	r3, [pc, #508]	; (80020f4 <HAL_RCC_ClockConfig+0x278>)
 8001ef6:	430a      	orrs	r2, r1
 8001ef8:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	2201      	movs	r2, #1
 8001f00:	4013      	ands	r3, r2
 8001f02:	d100      	bne.n	8001f06 <HAL_RCC_ClockConfig+0x8a>
 8001f04:	e089      	b.n	800201a <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	685b      	ldr	r3, [r3, #4]
 8001f0a:	2b02      	cmp	r3, #2
 8001f0c:	d107      	bne.n	8001f1e <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001f0e:	4b79      	ldr	r3, [pc, #484]	; (80020f4 <HAL_RCC_ClockConfig+0x278>)
 8001f10:	681a      	ldr	r2, [r3, #0]
 8001f12:	2380      	movs	r3, #128	; 0x80
 8001f14:	029b      	lsls	r3, r3, #10
 8001f16:	4013      	ands	r3, r2
 8001f18:	d120      	bne.n	8001f5c <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001f1a:	2301      	movs	r3, #1
 8001f1c:	e0e1      	b.n	80020e2 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	685b      	ldr	r3, [r3, #4]
 8001f22:	2b03      	cmp	r3, #3
 8001f24:	d107      	bne.n	8001f36 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001f26:	4b73      	ldr	r3, [pc, #460]	; (80020f4 <HAL_RCC_ClockConfig+0x278>)
 8001f28:	681a      	ldr	r2, [r3, #0]
 8001f2a:	2380      	movs	r3, #128	; 0x80
 8001f2c:	049b      	lsls	r3, r3, #18
 8001f2e:	4013      	ands	r3, r2
 8001f30:	d114      	bne.n	8001f5c <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001f32:	2301      	movs	r3, #1
 8001f34:	e0d5      	b.n	80020e2 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	685b      	ldr	r3, [r3, #4]
 8001f3a:	2b01      	cmp	r3, #1
 8001f3c:	d106      	bne.n	8001f4c <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001f3e:	4b6d      	ldr	r3, [pc, #436]	; (80020f4 <HAL_RCC_ClockConfig+0x278>)
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	2204      	movs	r2, #4
 8001f44:	4013      	ands	r3, r2
 8001f46:	d109      	bne.n	8001f5c <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001f48:	2301      	movs	r3, #1
 8001f4a:	e0ca      	b.n	80020e2 <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001f4c:	4b69      	ldr	r3, [pc, #420]	; (80020f4 <HAL_RCC_ClockConfig+0x278>)
 8001f4e:	681a      	ldr	r2, [r3, #0]
 8001f50:	2380      	movs	r3, #128	; 0x80
 8001f52:	009b      	lsls	r3, r3, #2
 8001f54:	4013      	ands	r3, r2
 8001f56:	d101      	bne.n	8001f5c <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001f58:	2301      	movs	r3, #1
 8001f5a:	e0c2      	b.n	80020e2 <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001f5c:	4b65      	ldr	r3, [pc, #404]	; (80020f4 <HAL_RCC_ClockConfig+0x278>)
 8001f5e:	68db      	ldr	r3, [r3, #12]
 8001f60:	2203      	movs	r2, #3
 8001f62:	4393      	bics	r3, r2
 8001f64:	0019      	movs	r1, r3
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	685a      	ldr	r2, [r3, #4]
 8001f6a:	4b62      	ldr	r3, [pc, #392]	; (80020f4 <HAL_RCC_ClockConfig+0x278>)
 8001f6c:	430a      	orrs	r2, r1
 8001f6e:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001f70:	f7fe ff12 	bl	8000d98 <HAL_GetTick>
 8001f74:	0003      	movs	r3, r0
 8001f76:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	685b      	ldr	r3, [r3, #4]
 8001f7c:	2b02      	cmp	r3, #2
 8001f7e:	d111      	bne.n	8001fa4 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001f80:	e009      	b.n	8001f96 <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f82:	f7fe ff09 	bl	8000d98 <HAL_GetTick>
 8001f86:	0002      	movs	r2, r0
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	1ad3      	subs	r3, r2, r3
 8001f8c:	4a58      	ldr	r2, [pc, #352]	; (80020f0 <HAL_RCC_ClockConfig+0x274>)
 8001f8e:	4293      	cmp	r3, r2
 8001f90:	d901      	bls.n	8001f96 <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 8001f92:	2303      	movs	r3, #3
 8001f94:	e0a5      	b.n	80020e2 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001f96:	4b57      	ldr	r3, [pc, #348]	; (80020f4 <HAL_RCC_ClockConfig+0x278>)
 8001f98:	68db      	ldr	r3, [r3, #12]
 8001f9a:	220c      	movs	r2, #12
 8001f9c:	4013      	ands	r3, r2
 8001f9e:	2b08      	cmp	r3, #8
 8001fa0:	d1ef      	bne.n	8001f82 <HAL_RCC_ClockConfig+0x106>
 8001fa2:	e03a      	b.n	800201a <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	685b      	ldr	r3, [r3, #4]
 8001fa8:	2b03      	cmp	r3, #3
 8001faa:	d111      	bne.n	8001fd0 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001fac:	e009      	b.n	8001fc2 <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001fae:	f7fe fef3 	bl	8000d98 <HAL_GetTick>
 8001fb2:	0002      	movs	r2, r0
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	1ad3      	subs	r3, r2, r3
 8001fb8:	4a4d      	ldr	r2, [pc, #308]	; (80020f0 <HAL_RCC_ClockConfig+0x274>)
 8001fba:	4293      	cmp	r3, r2
 8001fbc:	d901      	bls.n	8001fc2 <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 8001fbe:	2303      	movs	r3, #3
 8001fc0:	e08f      	b.n	80020e2 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001fc2:	4b4c      	ldr	r3, [pc, #304]	; (80020f4 <HAL_RCC_ClockConfig+0x278>)
 8001fc4:	68db      	ldr	r3, [r3, #12]
 8001fc6:	220c      	movs	r2, #12
 8001fc8:	4013      	ands	r3, r2
 8001fca:	2b0c      	cmp	r3, #12
 8001fcc:	d1ef      	bne.n	8001fae <HAL_RCC_ClockConfig+0x132>
 8001fce:	e024      	b.n	800201a <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	685b      	ldr	r3, [r3, #4]
 8001fd4:	2b01      	cmp	r3, #1
 8001fd6:	d11b      	bne.n	8002010 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001fd8:	e009      	b.n	8001fee <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001fda:	f7fe fedd 	bl	8000d98 <HAL_GetTick>
 8001fde:	0002      	movs	r2, r0
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	1ad3      	subs	r3, r2, r3
 8001fe4:	4a42      	ldr	r2, [pc, #264]	; (80020f0 <HAL_RCC_ClockConfig+0x274>)
 8001fe6:	4293      	cmp	r3, r2
 8001fe8:	d901      	bls.n	8001fee <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 8001fea:	2303      	movs	r3, #3
 8001fec:	e079      	b.n	80020e2 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001fee:	4b41      	ldr	r3, [pc, #260]	; (80020f4 <HAL_RCC_ClockConfig+0x278>)
 8001ff0:	68db      	ldr	r3, [r3, #12]
 8001ff2:	220c      	movs	r2, #12
 8001ff4:	4013      	ands	r3, r2
 8001ff6:	2b04      	cmp	r3, #4
 8001ff8:	d1ef      	bne.n	8001fda <HAL_RCC_ClockConfig+0x15e>
 8001ffa:	e00e      	b.n	800201a <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ffc:	f7fe fecc 	bl	8000d98 <HAL_GetTick>
 8002000:	0002      	movs	r2, r0
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	1ad3      	subs	r3, r2, r3
 8002006:	4a3a      	ldr	r2, [pc, #232]	; (80020f0 <HAL_RCC_ClockConfig+0x274>)
 8002008:	4293      	cmp	r3, r2
 800200a:	d901      	bls.n	8002010 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 800200c:	2303      	movs	r3, #3
 800200e:	e068      	b.n	80020e2 <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8002010:	4b38      	ldr	r3, [pc, #224]	; (80020f4 <HAL_RCC_ClockConfig+0x278>)
 8002012:	68db      	ldr	r3, [r3, #12]
 8002014:	220c      	movs	r2, #12
 8002016:	4013      	ands	r3, r2
 8002018:	d1f0      	bne.n	8001ffc <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800201a:	4b34      	ldr	r3, [pc, #208]	; (80020ec <HAL_RCC_ClockConfig+0x270>)
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	2201      	movs	r2, #1
 8002020:	4013      	ands	r3, r2
 8002022:	683a      	ldr	r2, [r7, #0]
 8002024:	429a      	cmp	r2, r3
 8002026:	d21e      	bcs.n	8002066 <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002028:	4b30      	ldr	r3, [pc, #192]	; (80020ec <HAL_RCC_ClockConfig+0x270>)
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	2201      	movs	r2, #1
 800202e:	4393      	bics	r3, r2
 8002030:	0019      	movs	r1, r3
 8002032:	4b2e      	ldr	r3, [pc, #184]	; (80020ec <HAL_RCC_ClockConfig+0x270>)
 8002034:	683a      	ldr	r2, [r7, #0]
 8002036:	430a      	orrs	r2, r1
 8002038:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800203a:	f7fe fead 	bl	8000d98 <HAL_GetTick>
 800203e:	0003      	movs	r3, r0
 8002040:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002042:	e009      	b.n	8002058 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002044:	f7fe fea8 	bl	8000d98 <HAL_GetTick>
 8002048:	0002      	movs	r2, r0
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	1ad3      	subs	r3, r2, r3
 800204e:	4a28      	ldr	r2, [pc, #160]	; (80020f0 <HAL_RCC_ClockConfig+0x274>)
 8002050:	4293      	cmp	r3, r2
 8002052:	d901      	bls.n	8002058 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 8002054:	2303      	movs	r3, #3
 8002056:	e044      	b.n	80020e2 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002058:	4b24      	ldr	r3, [pc, #144]	; (80020ec <HAL_RCC_ClockConfig+0x270>)
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	2201      	movs	r2, #1
 800205e:	4013      	ands	r3, r2
 8002060:	683a      	ldr	r2, [r7, #0]
 8002062:	429a      	cmp	r2, r3
 8002064:	d1ee      	bne.n	8002044 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	2204      	movs	r2, #4
 800206c:	4013      	ands	r3, r2
 800206e:	d009      	beq.n	8002084 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002070:	4b20      	ldr	r3, [pc, #128]	; (80020f4 <HAL_RCC_ClockConfig+0x278>)
 8002072:	68db      	ldr	r3, [r3, #12]
 8002074:	4a20      	ldr	r2, [pc, #128]	; (80020f8 <HAL_RCC_ClockConfig+0x27c>)
 8002076:	4013      	ands	r3, r2
 8002078:	0019      	movs	r1, r3
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	68da      	ldr	r2, [r3, #12]
 800207e:	4b1d      	ldr	r3, [pc, #116]	; (80020f4 <HAL_RCC_ClockConfig+0x278>)
 8002080:	430a      	orrs	r2, r1
 8002082:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	2208      	movs	r2, #8
 800208a:	4013      	ands	r3, r2
 800208c:	d00a      	beq.n	80020a4 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800208e:	4b19      	ldr	r3, [pc, #100]	; (80020f4 <HAL_RCC_ClockConfig+0x278>)
 8002090:	68db      	ldr	r3, [r3, #12]
 8002092:	4a1a      	ldr	r2, [pc, #104]	; (80020fc <HAL_RCC_ClockConfig+0x280>)
 8002094:	4013      	ands	r3, r2
 8002096:	0019      	movs	r1, r3
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	691b      	ldr	r3, [r3, #16]
 800209c:	00da      	lsls	r2, r3, #3
 800209e:	4b15      	ldr	r3, [pc, #84]	; (80020f4 <HAL_RCC_ClockConfig+0x278>)
 80020a0:	430a      	orrs	r2, r1
 80020a2:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80020a4:	f000 f832 	bl	800210c <HAL_RCC_GetSysClockFreq>
 80020a8:	0001      	movs	r1, r0
 80020aa:	4b12      	ldr	r3, [pc, #72]	; (80020f4 <HAL_RCC_ClockConfig+0x278>)
 80020ac:	68db      	ldr	r3, [r3, #12]
 80020ae:	091b      	lsrs	r3, r3, #4
 80020b0:	220f      	movs	r2, #15
 80020b2:	4013      	ands	r3, r2
 80020b4:	4a12      	ldr	r2, [pc, #72]	; (8002100 <HAL_RCC_ClockConfig+0x284>)
 80020b6:	5cd3      	ldrb	r3, [r2, r3]
 80020b8:	000a      	movs	r2, r1
 80020ba:	40da      	lsrs	r2, r3
 80020bc:	4b11      	ldr	r3, [pc, #68]	; (8002104 <HAL_RCC_ClockConfig+0x288>)
 80020be:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80020c0:	4b11      	ldr	r3, [pc, #68]	; (8002108 <HAL_RCC_ClockConfig+0x28c>)
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	250b      	movs	r5, #11
 80020c6:	197c      	adds	r4, r7, r5
 80020c8:	0018      	movs	r0, r3
 80020ca:	f7fe fe1f 	bl	8000d0c <HAL_InitTick>
 80020ce:	0003      	movs	r3, r0
 80020d0:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 80020d2:	197b      	adds	r3, r7, r5
 80020d4:	781b      	ldrb	r3, [r3, #0]
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d002      	beq.n	80020e0 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 80020da:	197b      	adds	r3, r7, r5
 80020dc:	781b      	ldrb	r3, [r3, #0]
 80020de:	e000      	b.n	80020e2 <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 80020e0:	2300      	movs	r3, #0
}
 80020e2:	0018      	movs	r0, r3
 80020e4:	46bd      	mov	sp, r7
 80020e6:	b004      	add	sp, #16
 80020e8:	bdb0      	pop	{r4, r5, r7, pc}
 80020ea:	46c0      	nop			; (mov r8, r8)
 80020ec:	40022000 	.word	0x40022000
 80020f0:	00001388 	.word	0x00001388
 80020f4:	40021000 	.word	0x40021000
 80020f8:	fffff8ff 	.word	0xfffff8ff
 80020fc:	ffffc7ff 	.word	0xffffc7ff
 8002100:	08005644 	.word	0x08005644
 8002104:	20000000 	.word	0x20000000
 8002108:	20000004 	.word	0x20000004

0800210c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800210c:	b5b0      	push	{r4, r5, r7, lr}
 800210e:	b08e      	sub	sp, #56	; 0x38
 8002110:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 8002112:	4b4c      	ldr	r3, [pc, #304]	; (8002244 <HAL_RCC_GetSysClockFreq+0x138>)
 8002114:	68db      	ldr	r3, [r3, #12]
 8002116:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002118:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800211a:	230c      	movs	r3, #12
 800211c:	4013      	ands	r3, r2
 800211e:	2b0c      	cmp	r3, #12
 8002120:	d014      	beq.n	800214c <HAL_RCC_GetSysClockFreq+0x40>
 8002122:	d900      	bls.n	8002126 <HAL_RCC_GetSysClockFreq+0x1a>
 8002124:	e07b      	b.n	800221e <HAL_RCC_GetSysClockFreq+0x112>
 8002126:	2b04      	cmp	r3, #4
 8002128:	d002      	beq.n	8002130 <HAL_RCC_GetSysClockFreq+0x24>
 800212a:	2b08      	cmp	r3, #8
 800212c:	d00b      	beq.n	8002146 <HAL_RCC_GetSysClockFreq+0x3a>
 800212e:	e076      	b.n	800221e <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8002130:	4b44      	ldr	r3, [pc, #272]	; (8002244 <HAL_RCC_GetSysClockFreq+0x138>)
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	2210      	movs	r2, #16
 8002136:	4013      	ands	r3, r2
 8002138:	d002      	beq.n	8002140 <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 800213a:	4b43      	ldr	r3, [pc, #268]	; (8002248 <HAL_RCC_GetSysClockFreq+0x13c>)
 800213c:	633b      	str	r3, [r7, #48]	; 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 800213e:	e07c      	b.n	800223a <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 8002140:	4b42      	ldr	r3, [pc, #264]	; (800224c <HAL_RCC_GetSysClockFreq+0x140>)
 8002142:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002144:	e079      	b.n	800223a <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002146:	4b42      	ldr	r3, [pc, #264]	; (8002250 <HAL_RCC_GetSysClockFreq+0x144>)
 8002148:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800214a:	e076      	b.n	800223a <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 800214c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800214e:	0c9a      	lsrs	r2, r3, #18
 8002150:	230f      	movs	r3, #15
 8002152:	401a      	ands	r2, r3
 8002154:	4b3f      	ldr	r3, [pc, #252]	; (8002254 <HAL_RCC_GetSysClockFreq+0x148>)
 8002156:	5c9b      	ldrb	r3, [r3, r2]
 8002158:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 800215a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800215c:	0d9a      	lsrs	r2, r3, #22
 800215e:	2303      	movs	r3, #3
 8002160:	4013      	ands	r3, r2
 8002162:	3301      	adds	r3, #1
 8002164:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002166:	4b37      	ldr	r3, [pc, #220]	; (8002244 <HAL_RCC_GetSysClockFreq+0x138>)
 8002168:	68da      	ldr	r2, [r3, #12]
 800216a:	2380      	movs	r3, #128	; 0x80
 800216c:	025b      	lsls	r3, r3, #9
 800216e:	4013      	ands	r3, r2
 8002170:	d01a      	beq.n	80021a8 <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8002172:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002174:	61bb      	str	r3, [r7, #24]
 8002176:	2300      	movs	r3, #0
 8002178:	61fb      	str	r3, [r7, #28]
 800217a:	4a35      	ldr	r2, [pc, #212]	; (8002250 <HAL_RCC_GetSysClockFreq+0x144>)
 800217c:	2300      	movs	r3, #0
 800217e:	69b8      	ldr	r0, [r7, #24]
 8002180:	69f9      	ldr	r1, [r7, #28]
 8002182:	f7fe f87f 	bl	8000284 <__aeabi_lmul>
 8002186:	0002      	movs	r2, r0
 8002188:	000b      	movs	r3, r1
 800218a:	0010      	movs	r0, r2
 800218c:	0019      	movs	r1, r3
 800218e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002190:	613b      	str	r3, [r7, #16]
 8002192:	2300      	movs	r3, #0
 8002194:	617b      	str	r3, [r7, #20]
 8002196:	693a      	ldr	r2, [r7, #16]
 8002198:	697b      	ldr	r3, [r7, #20]
 800219a:	f7fe f853 	bl	8000244 <__aeabi_uldivmod>
 800219e:	0002      	movs	r2, r0
 80021a0:	000b      	movs	r3, r1
 80021a2:	0013      	movs	r3, r2
 80021a4:	637b      	str	r3, [r7, #52]	; 0x34
 80021a6:	e037      	b.n	8002218 <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 80021a8:	4b26      	ldr	r3, [pc, #152]	; (8002244 <HAL_RCC_GetSysClockFreq+0x138>)
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	2210      	movs	r2, #16
 80021ae:	4013      	ands	r3, r2
 80021b0:	d01a      	beq.n	80021e8 <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 80021b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80021b4:	60bb      	str	r3, [r7, #8]
 80021b6:	2300      	movs	r3, #0
 80021b8:	60fb      	str	r3, [r7, #12]
 80021ba:	4a23      	ldr	r2, [pc, #140]	; (8002248 <HAL_RCC_GetSysClockFreq+0x13c>)
 80021bc:	2300      	movs	r3, #0
 80021be:	68b8      	ldr	r0, [r7, #8]
 80021c0:	68f9      	ldr	r1, [r7, #12]
 80021c2:	f7fe f85f 	bl	8000284 <__aeabi_lmul>
 80021c6:	0002      	movs	r2, r0
 80021c8:	000b      	movs	r3, r1
 80021ca:	0010      	movs	r0, r2
 80021cc:	0019      	movs	r1, r3
 80021ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021d0:	603b      	str	r3, [r7, #0]
 80021d2:	2300      	movs	r3, #0
 80021d4:	607b      	str	r3, [r7, #4]
 80021d6:	683a      	ldr	r2, [r7, #0]
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	f7fe f833 	bl	8000244 <__aeabi_uldivmod>
 80021de:	0002      	movs	r2, r0
 80021e0:	000b      	movs	r3, r1
 80021e2:	0013      	movs	r3, r2
 80021e4:	637b      	str	r3, [r7, #52]	; 0x34
 80021e6:	e017      	b.n	8002218 <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 80021e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80021ea:	0018      	movs	r0, r3
 80021ec:	2300      	movs	r3, #0
 80021ee:	0019      	movs	r1, r3
 80021f0:	4a16      	ldr	r2, [pc, #88]	; (800224c <HAL_RCC_GetSysClockFreq+0x140>)
 80021f2:	2300      	movs	r3, #0
 80021f4:	f7fe f846 	bl	8000284 <__aeabi_lmul>
 80021f8:	0002      	movs	r2, r0
 80021fa:	000b      	movs	r3, r1
 80021fc:	0010      	movs	r0, r2
 80021fe:	0019      	movs	r1, r3
 8002200:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002202:	001c      	movs	r4, r3
 8002204:	2300      	movs	r3, #0
 8002206:	001d      	movs	r5, r3
 8002208:	0022      	movs	r2, r4
 800220a:	002b      	movs	r3, r5
 800220c:	f7fe f81a 	bl	8000244 <__aeabi_uldivmod>
 8002210:	0002      	movs	r2, r0
 8002212:	000b      	movs	r3, r1
 8002214:	0013      	movs	r3, r2
 8002216:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
      sysclockfreq = pllvco;
 8002218:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800221a:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800221c:	e00d      	b.n	800223a <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 800221e:	4b09      	ldr	r3, [pc, #36]	; (8002244 <HAL_RCC_GetSysClockFreq+0x138>)
 8002220:	685b      	ldr	r3, [r3, #4]
 8002222:	0b5b      	lsrs	r3, r3, #13
 8002224:	2207      	movs	r2, #7
 8002226:	4013      	ands	r3, r2
 8002228:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 800222a:	6a3b      	ldr	r3, [r7, #32]
 800222c:	3301      	adds	r3, #1
 800222e:	2280      	movs	r2, #128	; 0x80
 8002230:	0212      	lsls	r2, r2, #8
 8002232:	409a      	lsls	r2, r3
 8002234:	0013      	movs	r3, r2
 8002236:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002238:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 800223a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 800223c:	0018      	movs	r0, r3
 800223e:	46bd      	mov	sp, r7
 8002240:	b00e      	add	sp, #56	; 0x38
 8002242:	bdb0      	pop	{r4, r5, r7, pc}
 8002244:	40021000 	.word	0x40021000
 8002248:	003d0900 	.word	0x003d0900
 800224c:	00f42400 	.word	0x00f42400
 8002250:	007a1200 	.word	0x007a1200
 8002254:	0800565c 	.word	0x0800565c

08002258 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002258:	b580      	push	{r7, lr}
 800225a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800225c:	4b02      	ldr	r3, [pc, #8]	; (8002268 <HAL_RCC_GetHCLKFreq+0x10>)
 800225e:	681b      	ldr	r3, [r3, #0]
}
 8002260:	0018      	movs	r0, r3
 8002262:	46bd      	mov	sp, r7
 8002264:	bd80      	pop	{r7, pc}
 8002266:	46c0      	nop			; (mov r8, r8)
 8002268:	20000000 	.word	0x20000000

0800226c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800226c:	b580      	push	{r7, lr}
 800226e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002270:	f7ff fff2 	bl	8002258 <HAL_RCC_GetHCLKFreq>
 8002274:	0001      	movs	r1, r0
 8002276:	4b06      	ldr	r3, [pc, #24]	; (8002290 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002278:	68db      	ldr	r3, [r3, #12]
 800227a:	0a1b      	lsrs	r3, r3, #8
 800227c:	2207      	movs	r2, #7
 800227e:	4013      	ands	r3, r2
 8002280:	4a04      	ldr	r2, [pc, #16]	; (8002294 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002282:	5cd3      	ldrb	r3, [r2, r3]
 8002284:	40d9      	lsrs	r1, r3
 8002286:	000b      	movs	r3, r1
}
 8002288:	0018      	movs	r0, r3
 800228a:	46bd      	mov	sp, r7
 800228c:	bd80      	pop	{r7, pc}
 800228e:	46c0      	nop			; (mov r8, r8)
 8002290:	40021000 	.word	0x40021000
 8002294:	08005654 	.word	0x08005654

08002298 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002298:	b580      	push	{r7, lr}
 800229a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800229c:	f7ff ffdc 	bl	8002258 <HAL_RCC_GetHCLKFreq>
 80022a0:	0001      	movs	r1, r0
 80022a2:	4b06      	ldr	r3, [pc, #24]	; (80022bc <HAL_RCC_GetPCLK2Freq+0x24>)
 80022a4:	68db      	ldr	r3, [r3, #12]
 80022a6:	0adb      	lsrs	r3, r3, #11
 80022a8:	2207      	movs	r2, #7
 80022aa:	4013      	ands	r3, r2
 80022ac:	4a04      	ldr	r2, [pc, #16]	; (80022c0 <HAL_RCC_GetPCLK2Freq+0x28>)
 80022ae:	5cd3      	ldrb	r3, [r2, r3]
 80022b0:	40d9      	lsrs	r1, r3
 80022b2:	000b      	movs	r3, r1
}
 80022b4:	0018      	movs	r0, r3
 80022b6:	46bd      	mov	sp, r7
 80022b8:	bd80      	pop	{r7, pc}
 80022ba:	46c0      	nop			; (mov r8, r8)
 80022bc:	40021000 	.word	0x40021000
 80022c0:	08005654 	.word	0x08005654

080022c4 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80022c4:	b580      	push	{r7, lr}
 80022c6:	b086      	sub	sp, #24
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 80022cc:	2317      	movs	r3, #23
 80022ce:	18fb      	adds	r3, r7, r3
 80022d0:	2200      	movs	r2, #0
 80022d2:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	2220      	movs	r2, #32
 80022da:	4013      	ands	r3, r2
 80022dc:	d106      	bne.n	80022ec <HAL_RCCEx_PeriphCLKConfig+0x28>
#if defined(LCD)
   || (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681a      	ldr	r2, [r3, #0]
 80022e2:	2380      	movs	r3, #128	; 0x80
 80022e4:	011b      	lsls	r3, r3, #4
 80022e6:	4013      	ands	r3, r2
 80022e8:	d100      	bne.n	80022ec <HAL_RCCEx_PeriphCLKConfig+0x28>
 80022ea:	e0d9      	b.n	80024a0 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80022ec:	4b9c      	ldr	r3, [pc, #624]	; (8002560 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 80022ee:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80022f0:	2380      	movs	r3, #128	; 0x80
 80022f2:	055b      	lsls	r3, r3, #21
 80022f4:	4013      	ands	r3, r2
 80022f6:	d10a      	bne.n	800230e <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80022f8:	4b99      	ldr	r3, [pc, #612]	; (8002560 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 80022fa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80022fc:	4b98      	ldr	r3, [pc, #608]	; (8002560 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 80022fe:	2180      	movs	r1, #128	; 0x80
 8002300:	0549      	lsls	r1, r1, #21
 8002302:	430a      	orrs	r2, r1
 8002304:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8002306:	2317      	movs	r3, #23
 8002308:	18fb      	adds	r3, r7, r3
 800230a:	2201      	movs	r2, #1
 800230c:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800230e:	4b95      	ldr	r3, [pc, #596]	; (8002564 <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 8002310:	681a      	ldr	r2, [r3, #0]
 8002312:	2380      	movs	r3, #128	; 0x80
 8002314:	005b      	lsls	r3, r3, #1
 8002316:	4013      	ands	r3, r2
 8002318:	d11a      	bne.n	8002350 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800231a:	4b92      	ldr	r3, [pc, #584]	; (8002564 <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 800231c:	681a      	ldr	r2, [r3, #0]
 800231e:	4b91      	ldr	r3, [pc, #580]	; (8002564 <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 8002320:	2180      	movs	r1, #128	; 0x80
 8002322:	0049      	lsls	r1, r1, #1
 8002324:	430a      	orrs	r2, r1
 8002326:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002328:	f7fe fd36 	bl	8000d98 <HAL_GetTick>
 800232c:	0003      	movs	r3, r0
 800232e:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002330:	e008      	b.n	8002344 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002332:	f7fe fd31 	bl	8000d98 <HAL_GetTick>
 8002336:	0002      	movs	r2, r0
 8002338:	693b      	ldr	r3, [r7, #16]
 800233a:	1ad3      	subs	r3, r2, r3
 800233c:	2b64      	cmp	r3, #100	; 0x64
 800233e:	d901      	bls.n	8002344 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8002340:	2303      	movs	r3, #3
 8002342:	e108      	b.n	8002556 <HAL_RCCEx_PeriphCLKConfig+0x292>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002344:	4b87      	ldr	r3, [pc, #540]	; (8002564 <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 8002346:	681a      	ldr	r2, [r3, #0]
 8002348:	2380      	movs	r3, #128	; 0x80
 800234a:	005b      	lsls	r3, r3, #1
 800234c:	4013      	ands	r3, r2
 800234e:	d0f0      	beq.n	8002332 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8002350:	4b83      	ldr	r3, [pc, #524]	; (8002560 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8002352:	681a      	ldr	r2, [r3, #0]
 8002354:	23c0      	movs	r3, #192	; 0xc0
 8002356:	039b      	lsls	r3, r3, #14
 8002358:	4013      	ands	r3, r2
 800235a:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	685a      	ldr	r2, [r3, #4]
 8002360:	23c0      	movs	r3, #192	; 0xc0
 8002362:	039b      	lsls	r3, r3, #14
 8002364:	4013      	ands	r3, r2
 8002366:	68fa      	ldr	r2, [r7, #12]
 8002368:	429a      	cmp	r2, r3
 800236a:	d107      	bne.n	800237c <HAL_RCCEx_PeriphCLKConfig+0xb8>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	689a      	ldr	r2, [r3, #8]
 8002370:	23c0      	movs	r3, #192	; 0xc0
 8002372:	039b      	lsls	r3, r3, #14
 8002374:	4013      	ands	r3, r2
 8002376:	68fa      	ldr	r2, [r7, #12]
 8002378:	429a      	cmp	r2, r3
 800237a:	d013      	beq.n	80023a4 <HAL_RCCEx_PeriphCLKConfig+0xe0>
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	685a      	ldr	r2, [r3, #4]
 8002380:	23c0      	movs	r3, #192	; 0xc0
 8002382:	029b      	lsls	r3, r3, #10
 8002384:	401a      	ands	r2, r3
 8002386:	23c0      	movs	r3, #192	; 0xc0
 8002388:	029b      	lsls	r3, r3, #10
 800238a:	429a      	cmp	r2, r3
 800238c:	d10a      	bne.n	80023a4 <HAL_RCCEx_PeriphCLKConfig+0xe0>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800238e:	4b74      	ldr	r3, [pc, #464]	; (8002560 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8002390:	681a      	ldr	r2, [r3, #0]
 8002392:	2380      	movs	r3, #128	; 0x80
 8002394:	029b      	lsls	r3, r3, #10
 8002396:	401a      	ands	r2, r3
 8002398:	2380      	movs	r3, #128	; 0x80
 800239a:	029b      	lsls	r3, r3, #10
 800239c:	429a      	cmp	r2, r3
 800239e:	d101      	bne.n	80023a4 <HAL_RCCEx_PeriphCLKConfig+0xe0>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 80023a0:	2301      	movs	r3, #1
 80023a2:	e0d8      	b.n	8002556 <HAL_RCCEx_PeriphCLKConfig+0x292>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 80023a4:	4b6e      	ldr	r3, [pc, #440]	; (8002560 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 80023a6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80023a8:	23c0      	movs	r3, #192	; 0xc0
 80023aa:	029b      	lsls	r3, r3, #10
 80023ac:	4013      	ands	r3, r2
 80023ae:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d049      	beq.n	800244a <HAL_RCCEx_PeriphCLKConfig+0x186>
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	685a      	ldr	r2, [r3, #4]
 80023ba:	23c0      	movs	r3, #192	; 0xc0
 80023bc:	029b      	lsls	r3, r3, #10
 80023be:	4013      	ands	r3, r2
 80023c0:	68fa      	ldr	r2, [r7, #12]
 80023c2:	429a      	cmp	r2, r3
 80023c4:	d004      	beq.n	80023d0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	2220      	movs	r2, #32
 80023cc:	4013      	ands	r3, r2
 80023ce:	d10d      	bne.n	80023ec <HAL_RCCEx_PeriphCLKConfig+0x128>
#if defined(LCD)
      || ((temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CSR_RTCSEL)) \
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	689a      	ldr	r2, [r3, #8]
 80023d4:	23c0      	movs	r3, #192	; 0xc0
 80023d6:	029b      	lsls	r3, r3, #10
 80023d8:	4013      	ands	r3, r2
 80023da:	68fa      	ldr	r2, [r7, #12]
 80023dc:	429a      	cmp	r2, r3
 80023de:	d034      	beq.n	800244a <HAL_RCCEx_PeriphCLKConfig+0x186>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681a      	ldr	r2, [r3, #0]
 80023e4:	2380      	movs	r3, #128	; 0x80
 80023e6:	011b      	lsls	r3, r3, #4
 80023e8:	4013      	ands	r3, r2
 80023ea:	d02e      	beq.n	800244a <HAL_RCCEx_PeriphCLKConfig+0x186>
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 80023ec:	4b5c      	ldr	r3, [pc, #368]	; (8002560 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 80023ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80023f0:	4a5d      	ldr	r2, [pc, #372]	; (8002568 <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 80023f2:	4013      	ands	r3, r2
 80023f4:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80023f6:	4b5a      	ldr	r3, [pc, #360]	; (8002560 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 80023f8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80023fa:	4b59      	ldr	r3, [pc, #356]	; (8002560 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 80023fc:	2180      	movs	r1, #128	; 0x80
 80023fe:	0309      	lsls	r1, r1, #12
 8002400:	430a      	orrs	r2, r1
 8002402:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002404:	4b56      	ldr	r3, [pc, #344]	; (8002560 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8002406:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002408:	4b55      	ldr	r3, [pc, #340]	; (8002560 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 800240a:	4958      	ldr	r1, [pc, #352]	; (800256c <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
 800240c:	400a      	ands	r2, r1
 800240e:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8002410:	4b53      	ldr	r3, [pc, #332]	; (8002560 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8002412:	68fa      	ldr	r2, [r7, #12]
 8002414:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8002416:	68fa      	ldr	r2, [r7, #12]
 8002418:	2380      	movs	r3, #128	; 0x80
 800241a:	005b      	lsls	r3, r3, #1
 800241c:	4013      	ands	r3, r2
 800241e:	d014      	beq.n	800244a <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002420:	f7fe fcba 	bl	8000d98 <HAL_GetTick>
 8002424:	0003      	movs	r3, r0
 8002426:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002428:	e009      	b.n	800243e <HAL_RCCEx_PeriphCLKConfig+0x17a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800242a:	f7fe fcb5 	bl	8000d98 <HAL_GetTick>
 800242e:	0002      	movs	r2, r0
 8002430:	693b      	ldr	r3, [r7, #16]
 8002432:	1ad3      	subs	r3, r2, r3
 8002434:	4a4e      	ldr	r2, [pc, #312]	; (8002570 <HAL_RCCEx_PeriphCLKConfig+0x2ac>)
 8002436:	4293      	cmp	r3, r2
 8002438:	d901      	bls.n	800243e <HAL_RCCEx_PeriphCLKConfig+0x17a>
          {
            return HAL_TIMEOUT;
 800243a:	2303      	movs	r3, #3
 800243c:	e08b      	b.n	8002556 <HAL_RCCEx_PeriphCLKConfig+0x292>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800243e:	4b48      	ldr	r3, [pc, #288]	; (8002560 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8002440:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002442:	2380      	movs	r3, #128	; 0x80
 8002444:	009b      	lsls	r3, r3, #2
 8002446:	4013      	ands	r3, r2
 8002448:	d0ef      	beq.n	800242a <HAL_RCCEx_PeriphCLKConfig+0x166>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	685a      	ldr	r2, [r3, #4]
 800244e:	23c0      	movs	r3, #192	; 0xc0
 8002450:	029b      	lsls	r3, r3, #10
 8002452:	401a      	ands	r2, r3
 8002454:	23c0      	movs	r3, #192	; 0xc0
 8002456:	029b      	lsls	r3, r3, #10
 8002458:	429a      	cmp	r2, r3
 800245a:	d10c      	bne.n	8002476 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
 800245c:	4b40      	ldr	r3, [pc, #256]	; (8002560 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	4a44      	ldr	r2, [pc, #272]	; (8002574 <HAL_RCCEx_PeriphCLKConfig+0x2b0>)
 8002462:	4013      	ands	r3, r2
 8002464:	0019      	movs	r1, r3
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	685a      	ldr	r2, [r3, #4]
 800246a:	23c0      	movs	r3, #192	; 0xc0
 800246c:	039b      	lsls	r3, r3, #14
 800246e:	401a      	ands	r2, r3
 8002470:	4b3b      	ldr	r3, [pc, #236]	; (8002560 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8002472:	430a      	orrs	r2, r1
 8002474:	601a      	str	r2, [r3, #0]
 8002476:	4b3a      	ldr	r3, [pc, #232]	; (8002560 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8002478:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	685a      	ldr	r2, [r3, #4]
 800247e:	23c0      	movs	r3, #192	; 0xc0
 8002480:	029b      	lsls	r3, r3, #10
 8002482:	401a      	ands	r2, r3
 8002484:	4b36      	ldr	r3, [pc, #216]	; (8002560 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8002486:	430a      	orrs	r2, r1
 8002488:	651a      	str	r2, [r3, #80]	; 0x50

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800248a:	2317      	movs	r3, #23
 800248c:	18fb      	adds	r3, r7, r3
 800248e:	781b      	ldrb	r3, [r3, #0]
 8002490:	2b01      	cmp	r3, #1
 8002492:	d105      	bne.n	80024a0 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002494:	4b32      	ldr	r3, [pc, #200]	; (8002560 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8002496:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002498:	4b31      	ldr	r3, [pc, #196]	; (8002560 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 800249a:	4937      	ldr	r1, [pc, #220]	; (8002578 <HAL_RCCEx_PeriphCLKConfig+0x2b4>)
 800249c:	400a      	ands	r2, r1
 800249e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	2201      	movs	r2, #1
 80024a6:	4013      	ands	r3, r2
 80024a8:	d009      	beq.n	80024be <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80024aa:	4b2d      	ldr	r3, [pc, #180]	; (8002560 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 80024ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024ae:	2203      	movs	r2, #3
 80024b0:	4393      	bics	r3, r2
 80024b2:	0019      	movs	r1, r3
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	68da      	ldr	r2, [r3, #12]
 80024b8:	4b29      	ldr	r3, [pc, #164]	; (8002560 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 80024ba:	430a      	orrs	r2, r1
 80024bc:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	2202      	movs	r2, #2
 80024c4:	4013      	ands	r3, r2
 80024c6:	d009      	beq.n	80024dc <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80024c8:	4b25      	ldr	r3, [pc, #148]	; (8002560 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 80024ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024cc:	220c      	movs	r2, #12
 80024ce:	4393      	bics	r3, r2
 80024d0:	0019      	movs	r1, r3
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	691a      	ldr	r2, [r3, #16]
 80024d6:	4b22      	ldr	r3, [pc, #136]	; (8002560 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 80024d8:	430a      	orrs	r2, r1
 80024da:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	2204      	movs	r2, #4
 80024e2:	4013      	ands	r3, r2
 80024e4:	d009      	beq.n	80024fa <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80024e6:	4b1e      	ldr	r3, [pc, #120]	; (8002560 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 80024e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024ea:	4a24      	ldr	r2, [pc, #144]	; (800257c <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 80024ec:	4013      	ands	r3, r2
 80024ee:	0019      	movs	r1, r3
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	695a      	ldr	r2, [r3, #20]
 80024f4:	4b1a      	ldr	r3, [pc, #104]	; (8002560 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 80024f6:	430a      	orrs	r2, r1
 80024f8:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	2208      	movs	r2, #8
 8002500:	4013      	ands	r3, r2
 8002502:	d009      	beq.n	8002518 <HAL_RCCEx_PeriphCLKConfig+0x254>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002504:	4b16      	ldr	r3, [pc, #88]	; (8002560 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8002506:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002508:	4a1d      	ldr	r2, [pc, #116]	; (8002580 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800250a:	4013      	ands	r3, r2
 800250c:	0019      	movs	r1, r3
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	699a      	ldr	r2, [r3, #24]
 8002512:	4b13      	ldr	r3, [pc, #76]	; (8002560 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8002514:	430a      	orrs	r2, r1
 8002516:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	2240      	movs	r2, #64	; 0x40
 800251e:	4013      	ands	r3, r2
 8002520:	d009      	beq.n	8002536 <HAL_RCCEx_PeriphCLKConfig+0x272>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002522:	4b0f      	ldr	r3, [pc, #60]	; (8002560 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8002524:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002526:	4a17      	ldr	r2, [pc, #92]	; (8002584 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8002528:	4013      	ands	r3, r2
 800252a:	0019      	movs	r1, r3
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	6a1a      	ldr	r2, [r3, #32]
 8002530:	4b0b      	ldr	r3, [pc, #44]	; (8002560 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8002532:	430a      	orrs	r2, r1
 8002534:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	2280      	movs	r2, #128	; 0x80
 800253c:	4013      	ands	r3, r2
 800253e:	d009      	beq.n	8002554 <HAL_RCCEx_PeriphCLKConfig+0x290>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8002540:	4b07      	ldr	r3, [pc, #28]	; (8002560 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8002542:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002544:	4a10      	ldr	r2, [pc, #64]	; (8002588 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002546:	4013      	ands	r3, r2
 8002548:	0019      	movs	r1, r3
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	69da      	ldr	r2, [r3, #28]
 800254e:	4b04      	ldr	r3, [pc, #16]	; (8002560 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8002550:	430a      	orrs	r2, r1
 8002552:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8002554:	2300      	movs	r3, #0
}
 8002556:	0018      	movs	r0, r3
 8002558:	46bd      	mov	sp, r7
 800255a:	b006      	add	sp, #24
 800255c:	bd80      	pop	{r7, pc}
 800255e:	46c0      	nop			; (mov r8, r8)
 8002560:	40021000 	.word	0x40021000
 8002564:	40007000 	.word	0x40007000
 8002568:	fffcffff 	.word	0xfffcffff
 800256c:	fff7ffff 	.word	0xfff7ffff
 8002570:	00001388 	.word	0x00001388
 8002574:	ffcfffff 	.word	0xffcfffff
 8002578:	efffffff 	.word	0xefffffff
 800257c:	fffff3ff 	.word	0xfffff3ff
 8002580:	ffffcfff 	.word	0xffffcfff
 8002584:	fbffffff 	.word	0xfbffffff
 8002588:	fff3ffff 	.word	0xfff3ffff

0800258c <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800258c:	b580      	push	{r7, lr}
 800258e:	b082      	sub	sp, #8
 8002590:	af00      	add	r7, sp, #0
 8002592:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if (hrtc == NULL)
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	2b00      	cmp	r3, #0
 8002598:	d101      	bne.n	800259e <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 800259a:	2301      	movs	r3, #1
 800259c:	e08e      	b.n	80026bc <HAL_RTC_Init+0x130>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	2221      	movs	r2, #33	; 0x21
 80025a2:	5c9b      	ldrb	r3, [r3, r2]
 80025a4:	b2db      	uxtb	r3, r3
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d107      	bne.n	80025ba <HAL_RTC_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	2220      	movs	r2, #32
 80025ae:	2100      	movs	r1, #0
 80025b0:	5499      	strb	r1, [r3, r2]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	0018      	movs	r0, r3
 80025b6:	f7fe fa63 	bl	8000a80 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	2221      	movs	r2, #33	; 0x21
 80025be:	2102      	movs	r1, #2
 80025c0:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	22ca      	movs	r2, #202	; 0xca
 80025c8:	625a      	str	r2, [r3, #36]	; 0x24
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	2253      	movs	r2, #83	; 0x53
 80025d0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	0018      	movs	r0, r3
 80025d6:	f000 faba 	bl	8002b4e <RTC_EnterInitMode>
 80025da:	1e03      	subs	r3, r0, #0
 80025dc:	d009      	beq.n	80025f2 <HAL_RTC_Init+0x66>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	22ff      	movs	r2, #255	; 0xff
 80025e4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	2221      	movs	r2, #33	; 0x21
 80025ea:	2104      	movs	r1, #4
 80025ec:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 80025ee:	2301      	movs	r3, #1
 80025f0:	e064      	b.n	80026bc <HAL_RTC_Init+0x130>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	689a      	ldr	r2, [r3, #8]
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	4931      	ldr	r1, [pc, #196]	; (80026c4 <HAL_RTC_Init+0x138>)
 80025fe:	400a      	ands	r2, r1
 8002600:	609a      	str	r2, [r3, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	6899      	ldr	r1, [r3, #8]
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	685a      	ldr	r2, [r3, #4]
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	691b      	ldr	r3, [r3, #16]
 8002610:	431a      	orrs	r2, r3
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	699b      	ldr	r3, [r3, #24]
 8002616:	431a      	orrs	r2, r3
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	430a      	orrs	r2, r1
 800261e:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	687a      	ldr	r2, [r7, #4]
 8002626:	68d2      	ldr	r2, [r2, #12]
 8002628:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	6919      	ldr	r1, [r3, #16]
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	689b      	ldr	r3, [r3, #8]
 8002634:	041a      	lsls	r2, r3, #16
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	430a      	orrs	r2, r1
 800263c:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	68da      	ldr	r2, [r3, #12]
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	2180      	movs	r1, #128	; 0x80
 800264a:	438a      	bics	r2, r1
 800264c:	60da      	str	r2, [r3, #12]

    hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	2103      	movs	r1, #3
 800265a:	438a      	bics	r2, r1
 800265c:	64da      	str	r2, [r3, #76]	; 0x4c
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	69da      	ldr	r2, [r3, #28]
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	695b      	ldr	r3, [r3, #20]
 800266c:	431a      	orrs	r2, r3
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	430a      	orrs	r2, r1
 8002674:	64da      	str	r2, [r3, #76]	; 0x4c

    /* If CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	689b      	ldr	r3, [r3, #8]
 800267c:	2220      	movs	r2, #32
 800267e:	4013      	ands	r3, r2
 8002680:	d113      	bne.n	80026aa <HAL_RTC_Init+0x11e>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	0018      	movs	r0, r3
 8002686:	f000 fa3b 	bl	8002b00 <HAL_RTC_WaitForSynchro>
 800268a:	1e03      	subs	r3, r0, #0
 800268c:	d00d      	beq.n	80026aa <HAL_RTC_Init+0x11e>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	22ff      	movs	r2, #255	; 0xff
 8002694:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	2221      	movs	r2, #33	; 0x21
 800269a:	2104      	movs	r1, #4
 800269c:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	2220      	movs	r2, #32
 80026a2:	2100      	movs	r1, #0
 80026a4:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 80026a6:	2301      	movs	r3, #1
 80026a8:	e008      	b.n	80026bc <HAL_RTC_Init+0x130>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	22ff      	movs	r2, #255	; 0xff
 80026b0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	2221      	movs	r2, #33	; 0x21
 80026b6:	2101      	movs	r1, #1
 80026b8:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80026ba:	2300      	movs	r3, #0
  }
}
 80026bc:	0018      	movs	r0, r3
 80026be:	46bd      	mov	sp, r7
 80026c0:	b002      	add	sp, #8
 80026c2:	bd80      	pop	{r7, pc}
 80026c4:	ff8fffbf 	.word	0xff8fffbf

080026c8 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80026c8:	b590      	push	{r4, r7, lr}
 80026ca:	b087      	sub	sp, #28
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	60f8      	str	r0, [r7, #12]
 80026d0:	60b9      	str	r1, [r7, #8]
 80026d2:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	2220      	movs	r2, #32
 80026d8:	5c9b      	ldrb	r3, [r3, r2]
 80026da:	2b01      	cmp	r3, #1
 80026dc:	d101      	bne.n	80026e2 <HAL_RTC_SetTime+0x1a>
 80026de:	2302      	movs	r3, #2
 80026e0:	e0ad      	b.n	800283e <HAL_RTC_SetTime+0x176>
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	2220      	movs	r2, #32
 80026e6:	2101      	movs	r1, #1
 80026e8:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	2221      	movs	r2, #33	; 0x21
 80026ee:	2102      	movs	r1, #2
 80026f0:	5499      	strb	r1, [r3, r2]

  if (Format == RTC_FORMAT_BIN)
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d125      	bne.n	8002744 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	689b      	ldr	r3, [r3, #8]
 80026fe:	2240      	movs	r2, #64	; 0x40
 8002700:	4013      	ands	r3, r2
 8002702:	d102      	bne.n	800270a <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8002704:	68bb      	ldr	r3, [r7, #8]
 8002706:	2200      	movs	r2, #0
 8002708:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 800270a:	68bb      	ldr	r3, [r7, #8]
 800270c:	781b      	ldrb	r3, [r3, #0]
 800270e:	0018      	movs	r0, r3
 8002710:	f000 fa47 	bl	8002ba2 <RTC_ByteToBcd2>
 8002714:	0003      	movs	r3, r0
 8002716:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8002718:	68bb      	ldr	r3, [r7, #8]
 800271a:	785b      	ldrb	r3, [r3, #1]
 800271c:	0018      	movs	r0, r3
 800271e:	f000 fa40 	bl	8002ba2 <RTC_ByteToBcd2>
 8002722:	0003      	movs	r3, r0
 8002724:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8002726:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8002728:	68bb      	ldr	r3, [r7, #8]
 800272a:	789b      	ldrb	r3, [r3, #2]
 800272c:	0018      	movs	r0, r3
 800272e:	f000 fa38 	bl	8002ba2 <RTC_ByteToBcd2>
 8002732:	0003      	movs	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8002734:	0022      	movs	r2, r4
 8002736:	431a      	orrs	r2, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 8002738:	68bb      	ldr	r3, [r7, #8]
 800273a:	78db      	ldrb	r3, [r3, #3]
 800273c:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 800273e:	4313      	orrs	r3, r2
 8002740:	617b      	str	r3, [r7, #20]
 8002742:	e017      	b.n	8002774 <HAL_RTC_SetTime+0xac>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	689b      	ldr	r3, [r3, #8]
 800274a:	2240      	movs	r2, #64	; 0x40
 800274c:	4013      	ands	r3, r2
 800274e:	d102      	bne.n	8002756 <HAL_RTC_SetTime+0x8e>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8002750:	68bb      	ldr	r3, [r7, #8]
 8002752:	2200      	movs	r2, #0
 8002754:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8002756:	68bb      	ldr	r3, [r7, #8]
 8002758:	781b      	ldrb	r3, [r3, #0]
 800275a:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 800275c:	68bb      	ldr	r3, [r7, #8]
 800275e:	785b      	ldrb	r3, [r3, #1]
 8002760:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8002762:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 8002764:	68ba      	ldr	r2, [r7, #8]
 8002766:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8002768:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 800276a:	68bb      	ldr	r3, [r7, #8]
 800276c:	78db      	ldrb	r3, [r3, #3]
 800276e:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8002770:	4313      	orrs	r3, r2
 8002772:	617b      	str	r3, [r7, #20]
  }
  UNUSED(tmpreg);
  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	22ca      	movs	r2, #202	; 0xca
 800277a:	625a      	str	r2, [r3, #36]	; 0x24
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	2253      	movs	r2, #83	; 0x53
 8002782:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	0018      	movs	r0, r3
 8002788:	f000 f9e1 	bl	8002b4e <RTC_EnterInitMode>
 800278c:	1e03      	subs	r3, r0, #0
 800278e:	d00d      	beq.n	80027ac <HAL_RTC_SetTime+0xe4>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	22ff      	movs	r2, #255	; 0xff
 8002796:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	2221      	movs	r2, #33	; 0x21
 800279c:	2104      	movs	r1, #4
 800279e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	2220      	movs	r2, #32
 80027a4:	2100      	movs	r1, #0
 80027a6:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 80027a8:	2301      	movs	r3, #1
 80027aa:	e048      	b.n	800283e <HAL_RTC_SetTime+0x176>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	697a      	ldr	r2, [r7, #20]
 80027b2:	4925      	ldr	r1, [pc, #148]	; (8002848 <HAL_RTC_SetTime+0x180>)
 80027b4:	400a      	ands	r2, r1
 80027b6:	601a      	str	r2, [r3, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	689a      	ldr	r2, [r3, #8]
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	4922      	ldr	r1, [pc, #136]	; (800284c <HAL_RTC_SetTime+0x184>)
 80027c4:	400a      	ands	r2, r1
 80027c6:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	6899      	ldr	r1, [r3, #8]
 80027ce:	68bb      	ldr	r3, [r7, #8]
 80027d0:	68da      	ldr	r2, [r3, #12]
 80027d2:	68bb      	ldr	r3, [r7, #8]
 80027d4:	691b      	ldr	r3, [r3, #16]
 80027d6:	431a      	orrs	r2, r3
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	430a      	orrs	r2, r1
 80027de:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	68da      	ldr	r2, [r3, #12]
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	2180      	movs	r1, #128	; 0x80
 80027ec:	438a      	bics	r2, r1
 80027ee:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	689b      	ldr	r3, [r3, #8]
 80027f6:	2220      	movs	r2, #32
 80027f8:	4013      	ands	r3, r2
 80027fa:	d113      	bne.n	8002824 <HAL_RTC_SetTime+0x15c>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	0018      	movs	r0, r3
 8002800:	f000 f97e 	bl	8002b00 <HAL_RTC_WaitForSynchro>
 8002804:	1e03      	subs	r3, r0, #0
 8002806:	d00d      	beq.n	8002824 <HAL_RTC_SetTime+0x15c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	22ff      	movs	r2, #255	; 0xff
 800280e:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	2221      	movs	r2, #33	; 0x21
 8002814:	2104      	movs	r1, #4
 8002816:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	2220      	movs	r2, #32
 800281c:	2100      	movs	r1, #0
 800281e:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8002820:	2301      	movs	r3, #1
 8002822:	e00c      	b.n	800283e <HAL_RTC_SetTime+0x176>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	22ff      	movs	r2, #255	; 0xff
 800282a:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY;
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	2221      	movs	r2, #33	; 0x21
 8002830:	2101      	movs	r1, #1
 8002832:	5499      	strb	r1, [r3, r2]

    __HAL_UNLOCK(hrtc);
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	2220      	movs	r2, #32
 8002838:	2100      	movs	r1, #0
 800283a:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800283c:	2300      	movs	r3, #0
  }
}
 800283e:	0018      	movs	r0, r3
 8002840:	46bd      	mov	sp, r7
 8002842:	b007      	add	sp, #28
 8002844:	bd90      	pop	{r4, r7, pc}
 8002846:	46c0      	nop			; (mov r8, r8)
 8002848:	007f7f7f 	.word	0x007f7f7f
 800284c:	fffbffff 	.word	0xfffbffff

08002850 <HAL_RTC_GetTime>:
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read
  *        to ensure consistency between the time and date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8002850:	b580      	push	{r7, lr}
 8002852:	b086      	sub	sp, #24
 8002854:	af00      	add	r7, sp, #0
 8002856:	60f8      	str	r0, [r7, #12]
 8002858:	60b9      	str	r1, [r7, #8]
 800285a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002862:	68bb      	ldr	r3, [r7, #8]
 8002864:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	691b      	ldr	r3, [r3, #16]
 800286c:	045b      	lsls	r3, r3, #17
 800286e:	0c5a      	lsrs	r2, r3, #17
 8002870:	68bb      	ldr	r3, [r7, #8]
 8002872:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	4a22      	ldr	r2, [pc, #136]	; (8002904 <HAL_RTC_GetTime+0xb4>)
 800287c:	4013      	ands	r3, r2
 800287e:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 8002880:	697b      	ldr	r3, [r7, #20]
 8002882:	0c1b      	lsrs	r3, r3, #16
 8002884:	b2db      	uxtb	r3, r3
 8002886:	223f      	movs	r2, #63	; 0x3f
 8002888:	4013      	ands	r3, r2
 800288a:	b2da      	uxtb	r2, r3
 800288c:	68bb      	ldr	r3, [r7, #8]
 800288e:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> 8U);
 8002890:	697b      	ldr	r3, [r7, #20]
 8002892:	0a1b      	lsrs	r3, r3, #8
 8002894:	b2db      	uxtb	r3, r3
 8002896:	227f      	movs	r2, #127	; 0x7f
 8002898:	4013      	ands	r3, r2
 800289a:	b2da      	uxtb	r2, r3
 800289c:	68bb      	ldr	r3, [r7, #8]
 800289e:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 80028a0:	697b      	ldr	r3, [r7, #20]
 80028a2:	b2db      	uxtb	r3, r3
 80028a4:	227f      	movs	r2, #127	; 0x7f
 80028a6:	4013      	ands	r3, r2
 80028a8:	b2da      	uxtb	r2, r3
 80028aa:	68bb      	ldr	r3, [r7, #8]
 80028ac:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 80028ae:	697b      	ldr	r3, [r7, #20]
 80028b0:	0c1b      	lsrs	r3, r3, #16
 80028b2:	b2db      	uxtb	r3, r3
 80028b4:	2240      	movs	r2, #64	; 0x40
 80028b6:	4013      	ands	r3, r2
 80028b8:	b2da      	uxtb	r2, r3
 80028ba:	68bb      	ldr	r3, [r7, #8]
 80028bc:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d11a      	bne.n	80028fa <HAL_RTC_GetTime+0xaa>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 80028c4:	68bb      	ldr	r3, [r7, #8]
 80028c6:	781b      	ldrb	r3, [r3, #0]
 80028c8:	0018      	movs	r0, r3
 80028ca:	f000 f992 	bl	8002bf2 <RTC_Bcd2ToByte>
 80028ce:	0003      	movs	r3, r0
 80028d0:	001a      	movs	r2, r3
 80028d2:	68bb      	ldr	r3, [r7, #8]
 80028d4:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 80028d6:	68bb      	ldr	r3, [r7, #8]
 80028d8:	785b      	ldrb	r3, [r3, #1]
 80028da:	0018      	movs	r0, r3
 80028dc:	f000 f989 	bl	8002bf2 <RTC_Bcd2ToByte>
 80028e0:	0003      	movs	r3, r0
 80028e2:	001a      	movs	r2, r3
 80028e4:	68bb      	ldr	r3, [r7, #8]
 80028e6:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 80028e8:	68bb      	ldr	r3, [r7, #8]
 80028ea:	789b      	ldrb	r3, [r3, #2]
 80028ec:	0018      	movs	r0, r3
 80028ee:	f000 f980 	bl	8002bf2 <RTC_Bcd2ToByte>
 80028f2:	0003      	movs	r3, r0
 80028f4:	001a      	movs	r2, r3
 80028f6:	68bb      	ldr	r3, [r7, #8]
 80028f8:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 80028fa:	2300      	movs	r3, #0
}
 80028fc:	0018      	movs	r0, r3
 80028fe:	46bd      	mov	sp, r7
 8002900:	b006      	add	sp, #24
 8002902:	bd80      	pop	{r7, pc}
 8002904:	007f7f7f 	.word	0x007f7f7f

08002908 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8002908:	b590      	push	{r4, r7, lr}
 800290a:	b087      	sub	sp, #28
 800290c:	af00      	add	r7, sp, #0
 800290e:	60f8      	str	r0, [r7, #12]
 8002910:	60b9      	str	r1, [r7, #8]
 8002912:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	2220      	movs	r2, #32
 8002918:	5c9b      	ldrb	r3, [r3, r2]
 800291a:	2b01      	cmp	r3, #1
 800291c:	d101      	bne.n	8002922 <HAL_RTC_SetDate+0x1a>
 800291e:	2302      	movs	r3, #2
 8002920:	e099      	b.n	8002a56 <HAL_RTC_SetDate+0x14e>
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	2220      	movs	r2, #32
 8002926:	2101      	movs	r1, #1
 8002928:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	2221      	movs	r2, #33	; 0x21
 800292e:	2102      	movs	r1, #2
 8002930:	5499      	strb	r1, [r3, r2]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	2b00      	cmp	r3, #0
 8002936:	d10e      	bne.n	8002956 <HAL_RTC_SetDate+0x4e>
 8002938:	68bb      	ldr	r3, [r7, #8]
 800293a:	785b      	ldrb	r3, [r3, #1]
 800293c:	001a      	movs	r2, r3
 800293e:	2310      	movs	r3, #16
 8002940:	4013      	ands	r3, r2
 8002942:	d008      	beq.n	8002956 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8002944:	68bb      	ldr	r3, [r7, #8]
 8002946:	785b      	ldrb	r3, [r3, #1]
 8002948:	2210      	movs	r2, #16
 800294a:	4393      	bics	r3, r2
 800294c:	b2db      	uxtb	r3, r3
 800294e:	330a      	adds	r3, #10
 8002950:	b2da      	uxtb	r2, r3
 8002952:	68bb      	ldr	r3, [r7, #8]
 8002954:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	2b00      	cmp	r3, #0
 800295a:	d11c      	bne.n	8002996 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800295c:	68bb      	ldr	r3, [r7, #8]
 800295e:	78db      	ldrb	r3, [r3, #3]
 8002960:	0018      	movs	r0, r3
 8002962:	f000 f91e 	bl	8002ba2 <RTC_ByteToBcd2>
 8002966:	0003      	movs	r3, r0
 8002968:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 800296a:	68bb      	ldr	r3, [r7, #8]
 800296c:	785b      	ldrb	r3, [r3, #1]
 800296e:	0018      	movs	r0, r3
 8002970:	f000 f917 	bl	8002ba2 <RTC_ByteToBcd2>
 8002974:	0003      	movs	r3, r0
 8002976:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8002978:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 800297a:	68bb      	ldr	r3, [r7, #8]
 800297c:	789b      	ldrb	r3, [r3, #2]
 800297e:	0018      	movs	r0, r3
 8002980:	f000 f90f 	bl	8002ba2 <RTC_ByteToBcd2>
 8002984:	0003      	movs	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8002986:	0022      	movs	r2, r4
 8002988:	431a      	orrs	r2, r3
                  ((uint32_t)sDate->WeekDay << 13U));
 800298a:	68bb      	ldr	r3, [r7, #8]
 800298c:	781b      	ldrb	r3, [r3, #0]
 800298e:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8002990:	4313      	orrs	r3, r2
 8002992:	617b      	str	r3, [r7, #20]
 8002994:	e00e      	b.n	80029b4 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8002996:	68bb      	ldr	r3, [r7, #8]
 8002998:	78db      	ldrb	r3, [r3, #3]
 800299a:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 800299c:	68bb      	ldr	r3, [r7, #8]
 800299e:	785b      	ldrb	r3, [r3, #1]
 80029a0:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 80029a2:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 80029a4:	68ba      	ldr	r2, [r7, #8]
 80029a6:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 80029a8:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 80029aa:	68bb      	ldr	r3, [r7, #8]
 80029ac:	781b      	ldrb	r3, [r3, #0]
 80029ae:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 80029b0:	4313      	orrs	r3, r2
 80029b2:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	22ca      	movs	r2, #202	; 0xca
 80029ba:	625a      	str	r2, [r3, #36]	; 0x24
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	2253      	movs	r2, #83	; 0x53
 80029c2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	0018      	movs	r0, r3
 80029c8:	f000 f8c1 	bl	8002b4e <RTC_EnterInitMode>
 80029cc:	1e03      	subs	r3, r0, #0
 80029ce:	d00d      	beq.n	80029ec <HAL_RTC_SetDate+0xe4>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	22ff      	movs	r2, #255	; 0xff
 80029d6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	2221      	movs	r2, #33	; 0x21
 80029dc:	2104      	movs	r1, #4
 80029de:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	2220      	movs	r2, #32
 80029e4:	2100      	movs	r1, #0
 80029e6:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 80029e8:	2301      	movs	r3, #1
 80029ea:	e034      	b.n	8002a56 <HAL_RTC_SetDate+0x14e>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	697a      	ldr	r2, [r7, #20]
 80029f2:	491b      	ldr	r1, [pc, #108]	; (8002a60 <HAL_RTC_SetDate+0x158>)
 80029f4:	400a      	ands	r2, r1
 80029f6:	605a      	str	r2, [r3, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	68da      	ldr	r2, [r3, #12]
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	2180      	movs	r1, #128	; 0x80
 8002a04:	438a      	bics	r2, r1
 8002a06:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	689b      	ldr	r3, [r3, #8]
 8002a0e:	2220      	movs	r2, #32
 8002a10:	4013      	ands	r3, r2
 8002a12:	d113      	bne.n	8002a3c <HAL_RTC_SetDate+0x134>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	0018      	movs	r0, r3
 8002a18:	f000 f872 	bl	8002b00 <HAL_RTC_WaitForSynchro>
 8002a1c:	1e03      	subs	r3, r0, #0
 8002a1e:	d00d      	beq.n	8002a3c <HAL_RTC_SetDate+0x134>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	22ff      	movs	r2, #255	; 0xff
 8002a26:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	2221      	movs	r2, #33	; 0x21
 8002a2c:	2104      	movs	r1, #4
 8002a2e:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	2220      	movs	r2, #32
 8002a34:	2100      	movs	r1, #0
 8002a36:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8002a38:	2301      	movs	r3, #1
 8002a3a:	e00c      	b.n	8002a56 <HAL_RTC_SetDate+0x14e>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	22ff      	movs	r2, #255	; 0xff
 8002a42:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	2221      	movs	r2, #33	; 0x21
 8002a48:	2101      	movs	r1, #1
 8002a4a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	2220      	movs	r2, #32
 8002a50:	2100      	movs	r1, #0
 8002a52:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8002a54:	2300      	movs	r3, #0
  }
}
 8002a56:	0018      	movs	r0, r3
 8002a58:	46bd      	mov	sp, r7
 8002a5a:	b007      	add	sp, #28
 8002a5c:	bd90      	pop	{r4, r7, pc}
 8002a5e:	46c0      	nop			; (mov r8, r8)
 8002a60:	00ffff3f 	.word	0x00ffff3f

08002a64 <HAL_RTC_GetDate>:
  *        in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8002a64:	b580      	push	{r7, lr}
 8002a66:	b086      	sub	sp, #24
 8002a68:	af00      	add	r7, sp, #0
 8002a6a:	60f8      	str	r0, [r7, #12]
 8002a6c:	60b9      	str	r1, [r7, #8]
 8002a6e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	685b      	ldr	r3, [r3, #4]
 8002a76:	4a21      	ldr	r2, [pc, #132]	; (8002afc <HAL_RTC_GetDate+0x98>)
 8002a78:	4013      	ands	r3, r2
 8002a7a:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 8002a7c:	697b      	ldr	r3, [r7, #20]
 8002a7e:	0c1b      	lsrs	r3, r3, #16
 8002a80:	b2da      	uxtb	r2, r3
 8002a82:	68bb      	ldr	r3, [r7, #8]
 8002a84:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 8002a86:	697b      	ldr	r3, [r7, #20]
 8002a88:	0a1b      	lsrs	r3, r3, #8
 8002a8a:	b2db      	uxtb	r3, r3
 8002a8c:	221f      	movs	r2, #31
 8002a8e:	4013      	ands	r3, r2
 8002a90:	b2da      	uxtb	r2, r3
 8002a92:	68bb      	ldr	r3, [r7, #8]
 8002a94:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8002a96:	697b      	ldr	r3, [r7, #20]
 8002a98:	b2db      	uxtb	r3, r3
 8002a9a:	223f      	movs	r2, #63	; 0x3f
 8002a9c:	4013      	ands	r3, r2
 8002a9e:	b2da      	uxtb	r2, r3
 8002aa0:	68bb      	ldr	r3, [r7, #8]
 8002aa2:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U);
 8002aa4:	697b      	ldr	r3, [r7, #20]
 8002aa6:	0b5b      	lsrs	r3, r3, #13
 8002aa8:	b2db      	uxtb	r3, r3
 8002aaa:	2207      	movs	r2, #7
 8002aac:	4013      	ands	r3, r2
 8002aae:	b2da      	uxtb	r2, r3
 8002ab0:	68bb      	ldr	r3, [r7, #8]
 8002ab2:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d11a      	bne.n	8002af0 <HAL_RTC_GetDate+0x8c>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8002aba:	68bb      	ldr	r3, [r7, #8]
 8002abc:	78db      	ldrb	r3, [r3, #3]
 8002abe:	0018      	movs	r0, r3
 8002ac0:	f000 f897 	bl	8002bf2 <RTC_Bcd2ToByte>
 8002ac4:	0003      	movs	r3, r0
 8002ac6:	001a      	movs	r2, r3
 8002ac8:	68bb      	ldr	r3, [r7, #8]
 8002aca:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8002acc:	68bb      	ldr	r3, [r7, #8]
 8002ace:	785b      	ldrb	r3, [r3, #1]
 8002ad0:	0018      	movs	r0, r3
 8002ad2:	f000 f88e 	bl	8002bf2 <RTC_Bcd2ToByte>
 8002ad6:	0003      	movs	r3, r0
 8002ad8:	001a      	movs	r2, r3
 8002ada:	68bb      	ldr	r3, [r7, #8]
 8002adc:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8002ade:	68bb      	ldr	r3, [r7, #8]
 8002ae0:	789b      	ldrb	r3, [r3, #2]
 8002ae2:	0018      	movs	r0, r3
 8002ae4:	f000 f885 	bl	8002bf2 <RTC_Bcd2ToByte>
 8002ae8:	0003      	movs	r3, r0
 8002aea:	001a      	movs	r2, r3
 8002aec:	68bb      	ldr	r3, [r7, #8]
 8002aee:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8002af0:	2300      	movs	r3, #0
}
 8002af2:	0018      	movs	r0, r3
 8002af4:	46bd      	mov	sp, r7
 8002af6:	b006      	add	sp, #24
 8002af8:	bd80      	pop	{r7, pc}
 8002afa:	46c0      	nop			; (mov r8, r8)
 8002afc:	00ffff3f 	.word	0x00ffff3f

08002b00 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8002b00:	b580      	push	{r7, lr}
 8002b02:	b084      	sub	sp, #16
 8002b04:	af00      	add	r7, sp, #0
 8002b06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	68da      	ldr	r2, [r3, #12]
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	21a0      	movs	r1, #160	; 0xa0
 8002b14:	438a      	bics	r2, r1
 8002b16:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8002b18:	f7fe f93e 	bl	8000d98 <HAL_GetTick>
 8002b1c:	0003      	movs	r3, r0
 8002b1e:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8002b20:	e00a      	b.n	8002b38 <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8002b22:	f7fe f939 	bl	8000d98 <HAL_GetTick>
 8002b26:	0002      	movs	r2, r0
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	1ad2      	subs	r2, r2, r3
 8002b2c:	23fa      	movs	r3, #250	; 0xfa
 8002b2e:	009b      	lsls	r3, r3, #2
 8002b30:	429a      	cmp	r2, r3
 8002b32:	d901      	bls.n	8002b38 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8002b34:	2303      	movs	r3, #3
 8002b36:	e006      	b.n	8002b46 <HAL_RTC_WaitForSynchro+0x46>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	68db      	ldr	r3, [r3, #12]
 8002b3e:	2220      	movs	r2, #32
 8002b40:	4013      	ands	r3, r2
 8002b42:	d0ee      	beq.n	8002b22 <HAL_RTC_WaitForSynchro+0x22>
    }
  }

  return HAL_OK;
 8002b44:	2300      	movs	r3, #0
}
 8002b46:	0018      	movs	r0, r3
 8002b48:	46bd      	mov	sp, r7
 8002b4a:	b004      	add	sp, #16
 8002b4c:	bd80      	pop	{r7, pc}

08002b4e <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8002b4e:	b580      	push	{r7, lr}
 8002b50:	b084      	sub	sp, #16
 8002b52:	af00      	add	r7, sp, #0
 8002b54:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	68db      	ldr	r3, [r3, #12]
 8002b5c:	2240      	movs	r2, #64	; 0x40
 8002b5e:	4013      	ands	r3, r2
 8002b60:	d11a      	bne.n	8002b98 <RTC_EnterInitMode+0x4a>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	2201      	movs	r2, #1
 8002b68:	4252      	negs	r2, r2
 8002b6a:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8002b6c:	f7fe f914 	bl	8000d98 <HAL_GetTick>
 8002b70:	0003      	movs	r3, r0
 8002b72:	60fb      	str	r3, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8002b74:	e00a      	b.n	8002b8c <RTC_EnterInitMode+0x3e>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8002b76:	f7fe f90f 	bl	8000d98 <HAL_GetTick>
 8002b7a:	0002      	movs	r2, r0
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	1ad2      	subs	r2, r2, r3
 8002b80:	23fa      	movs	r3, #250	; 0xfa
 8002b82:	009b      	lsls	r3, r3, #2
 8002b84:	429a      	cmp	r2, r3
 8002b86:	d901      	bls.n	8002b8c <RTC_EnterInitMode+0x3e>
      {
        return HAL_TIMEOUT;
 8002b88:	2303      	movs	r3, #3
 8002b8a:	e006      	b.n	8002b9a <RTC_EnterInitMode+0x4c>
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	68db      	ldr	r3, [r3, #12]
 8002b92:	2240      	movs	r2, #64	; 0x40
 8002b94:	4013      	ands	r3, r2
 8002b96:	d0ee      	beq.n	8002b76 <RTC_EnterInitMode+0x28>
      }
    }
  }

  return HAL_OK;
 8002b98:	2300      	movs	r3, #0
}
 8002b9a:	0018      	movs	r0, r3
 8002b9c:	46bd      	mov	sp, r7
 8002b9e:	b004      	add	sp, #16
 8002ba0:	bd80      	pop	{r7, pc}

08002ba2 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8002ba2:	b580      	push	{r7, lr}
 8002ba4:	b084      	sub	sp, #16
 8002ba6:	af00      	add	r7, sp, #0
 8002ba8:	0002      	movs	r2, r0
 8002baa:	1dfb      	adds	r3, r7, #7
 8002bac:	701a      	strb	r2, [r3, #0]
  uint32_t bcdhigh = 0U;
 8002bae:	2300      	movs	r3, #0
 8002bb0:	60fb      	str	r3, [r7, #12]
  uint8_t Param = Value;
 8002bb2:	230b      	movs	r3, #11
 8002bb4:	18fb      	adds	r3, r7, r3
 8002bb6:	1dfa      	adds	r2, r7, #7
 8002bb8:	7812      	ldrb	r2, [r2, #0]
 8002bba:	701a      	strb	r2, [r3, #0]

  while (Param >= 10U)
 8002bbc:	e008      	b.n	8002bd0 <RTC_ByteToBcd2+0x2e>
  {
    bcdhigh++;
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	3301      	adds	r3, #1
 8002bc2:	60fb      	str	r3, [r7, #12]
    Param -= 10U;
 8002bc4:	220b      	movs	r2, #11
 8002bc6:	18bb      	adds	r3, r7, r2
 8002bc8:	18ba      	adds	r2, r7, r2
 8002bca:	7812      	ldrb	r2, [r2, #0]
 8002bcc:	3a0a      	subs	r2, #10
 8002bce:	701a      	strb	r2, [r3, #0]
  while (Param >= 10U)
 8002bd0:	210b      	movs	r1, #11
 8002bd2:	187b      	adds	r3, r7, r1
 8002bd4:	781b      	ldrb	r3, [r3, #0]
 8002bd6:	2b09      	cmp	r3, #9
 8002bd8:	d8f1      	bhi.n	8002bbe <RTC_ByteToBcd2+0x1c>
  }

  return ((uint8_t)(bcdhigh << 4U) | Param);
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	b2db      	uxtb	r3, r3
 8002bde:	011b      	lsls	r3, r3, #4
 8002be0:	b2da      	uxtb	r2, r3
 8002be2:	187b      	adds	r3, r7, r1
 8002be4:	781b      	ldrb	r3, [r3, #0]
 8002be6:	4313      	orrs	r3, r2
 8002be8:	b2db      	uxtb	r3, r3
}
 8002bea:	0018      	movs	r0, r3
 8002bec:	46bd      	mov	sp, r7
 8002bee:	b004      	add	sp, #16
 8002bf0:	bd80      	pop	{r7, pc}

08002bf2 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8002bf2:	b580      	push	{r7, lr}
 8002bf4:	b084      	sub	sp, #16
 8002bf6:	af00      	add	r7, sp, #0
 8002bf8:	0002      	movs	r2, r0
 8002bfa:	1dfb      	adds	r3, r7, #7
 8002bfc:	701a      	strb	r2, [r3, #0]
  uint32_t tmp;
  tmp = (((uint32_t)Value & 0xF0U) >> 4U) * 10U;
 8002bfe:	1dfb      	adds	r3, r7, #7
 8002c00:	781b      	ldrb	r3, [r3, #0]
 8002c02:	091b      	lsrs	r3, r3, #4
 8002c04:	b2db      	uxtb	r3, r3
 8002c06:	001a      	movs	r2, r3
 8002c08:	0013      	movs	r3, r2
 8002c0a:	009b      	lsls	r3, r3, #2
 8002c0c:	189b      	adds	r3, r3, r2
 8002c0e:	005b      	lsls	r3, r3, #1
 8002c10:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tmp + ((uint32_t)Value & 0x0FU));
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	b2da      	uxtb	r2, r3
 8002c16:	1dfb      	adds	r3, r7, #7
 8002c18:	781b      	ldrb	r3, [r3, #0]
 8002c1a:	210f      	movs	r1, #15
 8002c1c:	400b      	ands	r3, r1
 8002c1e:	b2db      	uxtb	r3, r3
 8002c20:	18d3      	adds	r3, r2, r3
 8002c22:	b2db      	uxtb	r3, r3
}
 8002c24:	0018      	movs	r0, r3
 8002c26:	46bd      	mov	sp, r7
 8002c28:	b004      	add	sp, #16
 8002c2a:	bd80      	pop	{r7, pc}

08002c2c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002c2c:	b580      	push	{r7, lr}
 8002c2e:	b082      	sub	sp, #8
 8002c30:	af00      	add	r7, sp, #0
 8002c32:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d101      	bne.n	8002c3e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002c3a:	2301      	movs	r3, #1
 8002c3c:	e044      	b.n	8002cc8 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d107      	bne.n	8002c56 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	2274      	movs	r2, #116	; 0x74
 8002c4a:	2100      	movs	r1, #0
 8002c4c:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	0018      	movs	r0, r3
 8002c52:	f7fd ff2d 	bl	8000ab0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	2224      	movs	r2, #36	; 0x24
 8002c5a:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	681a      	ldr	r2, [r3, #0]
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	2101      	movs	r1, #1
 8002c68:	438a      	bics	r2, r1
 8002c6a:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	0018      	movs	r0, r3
 8002c70:	f000 fbd2 	bl	8003418 <UART_SetConfig>
 8002c74:	0003      	movs	r3, r0
 8002c76:	2b01      	cmp	r3, #1
 8002c78:	d101      	bne.n	8002c7e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8002c7a:	2301      	movs	r3, #1
 8002c7c:	e024      	b.n	8002cc8 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d003      	beq.n	8002c8e <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	0018      	movs	r0, r3
 8002c8a:	f000 fe49 	bl	8003920 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	685a      	ldr	r2, [r3, #4]
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	490d      	ldr	r1, [pc, #52]	; (8002cd0 <HAL_UART_Init+0xa4>)
 8002c9a:	400a      	ands	r2, r1
 8002c9c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	689a      	ldr	r2, [r3, #8]
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	212a      	movs	r1, #42	; 0x2a
 8002caa:	438a      	bics	r2, r1
 8002cac:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	681a      	ldr	r2, [r3, #0]
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	2101      	movs	r1, #1
 8002cba:	430a      	orrs	r2, r1
 8002cbc:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	0018      	movs	r0, r3
 8002cc2:	f000 fee1 	bl	8003a88 <UART_CheckIdleState>
 8002cc6:	0003      	movs	r3, r0
}
 8002cc8:	0018      	movs	r0, r3
 8002cca:	46bd      	mov	sp, r7
 8002ccc:	b002      	add	sp, #8
 8002cce:	bd80      	pop	{r7, pc}
 8002cd0:	ffffb7ff 	.word	0xffffb7ff

08002cd4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002cd4:	b580      	push	{r7, lr}
 8002cd6:	b08a      	sub	sp, #40	; 0x28
 8002cd8:	af02      	add	r7, sp, #8
 8002cda:	60f8      	str	r0, [r7, #12]
 8002cdc:	60b9      	str	r1, [r7, #8]
 8002cde:	603b      	str	r3, [r7, #0]
 8002ce0:	1dbb      	adds	r3, r7, #6
 8002ce2:	801a      	strh	r2, [r3, #0]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002ce8:	2b20      	cmp	r3, #32
 8002cea:	d000      	beq.n	8002cee <HAL_UART_Transmit+0x1a>
 8002cec:	e095      	b.n	8002e1a <HAL_UART_Transmit+0x146>
  {
    if ((pData == NULL) || (Size == 0U))
 8002cee:	68bb      	ldr	r3, [r7, #8]
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d003      	beq.n	8002cfc <HAL_UART_Transmit+0x28>
 8002cf4:	1dbb      	adds	r3, r7, #6
 8002cf6:	881b      	ldrh	r3, [r3, #0]
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d101      	bne.n	8002d00 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8002cfc:	2301      	movs	r3, #1
 8002cfe:	e08d      	b.n	8002e1c <HAL_UART_Transmit+0x148>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	689a      	ldr	r2, [r3, #8]
 8002d04:	2380      	movs	r3, #128	; 0x80
 8002d06:	015b      	lsls	r3, r3, #5
 8002d08:	429a      	cmp	r2, r3
 8002d0a:	d109      	bne.n	8002d20 <HAL_UART_Transmit+0x4c>
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	691b      	ldr	r3, [r3, #16]
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d105      	bne.n	8002d20 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8002d14:	68bb      	ldr	r3, [r7, #8]
 8002d16:	2201      	movs	r2, #1
 8002d18:	4013      	ands	r3, r2
 8002d1a:	d001      	beq.n	8002d20 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8002d1c:	2301      	movs	r3, #1
 8002d1e:	e07d      	b.n	8002e1c <HAL_UART_Transmit+0x148>
      }
    }

    __HAL_LOCK(huart);
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	2274      	movs	r2, #116	; 0x74
 8002d24:	5c9b      	ldrb	r3, [r3, r2]
 8002d26:	2b01      	cmp	r3, #1
 8002d28:	d101      	bne.n	8002d2e <HAL_UART_Transmit+0x5a>
 8002d2a:	2302      	movs	r3, #2
 8002d2c:	e076      	b.n	8002e1c <HAL_UART_Transmit+0x148>
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	2274      	movs	r2, #116	; 0x74
 8002d32:	2101      	movs	r1, #1
 8002d34:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	2280      	movs	r2, #128	; 0x80
 8002d3a:	2100      	movs	r1, #0
 8002d3c:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	2221      	movs	r2, #33	; 0x21
 8002d42:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002d44:	f7fe f828 	bl	8000d98 <HAL_GetTick>
 8002d48:	0003      	movs	r3, r0
 8002d4a:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	1dba      	adds	r2, r7, #6
 8002d50:	2150      	movs	r1, #80	; 0x50
 8002d52:	8812      	ldrh	r2, [r2, #0]
 8002d54:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	1dba      	adds	r2, r7, #6
 8002d5a:	2152      	movs	r1, #82	; 0x52
 8002d5c:	8812      	ldrh	r2, [r2, #0]
 8002d5e:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	689a      	ldr	r2, [r3, #8]
 8002d64:	2380      	movs	r3, #128	; 0x80
 8002d66:	015b      	lsls	r3, r3, #5
 8002d68:	429a      	cmp	r2, r3
 8002d6a:	d108      	bne.n	8002d7e <HAL_UART_Transmit+0xaa>
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	691b      	ldr	r3, [r3, #16]
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d104      	bne.n	8002d7e <HAL_UART_Transmit+0xaa>
    {
      pdata8bits  = NULL;
 8002d74:	2300      	movs	r3, #0
 8002d76:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002d78:	68bb      	ldr	r3, [r7, #8]
 8002d7a:	61bb      	str	r3, [r7, #24]
 8002d7c:	e003      	b.n	8002d86 <HAL_UART_Transmit+0xb2>
    }
    else
    {
      pdata8bits  = pData;
 8002d7e:	68bb      	ldr	r3, [r7, #8]
 8002d80:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002d82:	2300      	movs	r3, #0
 8002d84:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	2274      	movs	r2, #116	; 0x74
 8002d8a:	2100      	movs	r1, #0
 8002d8c:	5499      	strb	r1, [r3, r2]

    while (huart->TxXferCount > 0U)
 8002d8e:	e02c      	b.n	8002dea <HAL_UART_Transmit+0x116>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002d90:	697a      	ldr	r2, [r7, #20]
 8002d92:	68f8      	ldr	r0, [r7, #12]
 8002d94:	683b      	ldr	r3, [r7, #0]
 8002d96:	9300      	str	r3, [sp, #0]
 8002d98:	0013      	movs	r3, r2
 8002d9a:	2200      	movs	r2, #0
 8002d9c:	2180      	movs	r1, #128	; 0x80
 8002d9e:	f000 febb 	bl	8003b18 <UART_WaitOnFlagUntilTimeout>
 8002da2:	1e03      	subs	r3, r0, #0
 8002da4:	d001      	beq.n	8002daa <HAL_UART_Transmit+0xd6>
      {
        return HAL_TIMEOUT;
 8002da6:	2303      	movs	r3, #3
 8002da8:	e038      	b.n	8002e1c <HAL_UART_Transmit+0x148>
      }
      if (pdata8bits == NULL)
 8002daa:	69fb      	ldr	r3, [r7, #28]
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d10b      	bne.n	8002dc8 <HAL_UART_Transmit+0xf4>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002db0:	69bb      	ldr	r3, [r7, #24]
 8002db2:	881b      	ldrh	r3, [r3, #0]
 8002db4:	001a      	movs	r2, r3
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	05d2      	lsls	r2, r2, #23
 8002dbc:	0dd2      	lsrs	r2, r2, #23
 8002dbe:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002dc0:	69bb      	ldr	r3, [r7, #24]
 8002dc2:	3302      	adds	r3, #2
 8002dc4:	61bb      	str	r3, [r7, #24]
 8002dc6:	e007      	b.n	8002dd8 <HAL_UART_Transmit+0x104>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002dc8:	69fb      	ldr	r3, [r7, #28]
 8002dca:	781a      	ldrb	r2, [r3, #0]
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002dd2:	69fb      	ldr	r3, [r7, #28]
 8002dd4:	3301      	adds	r3, #1
 8002dd6:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	2252      	movs	r2, #82	; 0x52
 8002ddc:	5a9b      	ldrh	r3, [r3, r2]
 8002dde:	b29b      	uxth	r3, r3
 8002de0:	3b01      	subs	r3, #1
 8002de2:	b299      	uxth	r1, r3
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	2252      	movs	r2, #82	; 0x52
 8002de8:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	2252      	movs	r2, #82	; 0x52
 8002dee:	5a9b      	ldrh	r3, [r3, r2]
 8002df0:	b29b      	uxth	r3, r3
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d1cc      	bne.n	8002d90 <HAL_UART_Transmit+0xbc>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002df6:	697a      	ldr	r2, [r7, #20]
 8002df8:	68f8      	ldr	r0, [r7, #12]
 8002dfa:	683b      	ldr	r3, [r7, #0]
 8002dfc:	9300      	str	r3, [sp, #0]
 8002dfe:	0013      	movs	r3, r2
 8002e00:	2200      	movs	r2, #0
 8002e02:	2140      	movs	r1, #64	; 0x40
 8002e04:	f000 fe88 	bl	8003b18 <UART_WaitOnFlagUntilTimeout>
 8002e08:	1e03      	subs	r3, r0, #0
 8002e0a:	d001      	beq.n	8002e10 <HAL_UART_Transmit+0x13c>
    {
      return HAL_TIMEOUT;
 8002e0c:	2303      	movs	r3, #3
 8002e0e:	e005      	b.n	8002e1c <HAL_UART_Transmit+0x148>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	2220      	movs	r2, #32
 8002e14:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8002e16:	2300      	movs	r3, #0
 8002e18:	e000      	b.n	8002e1c <HAL_UART_Transmit+0x148>
  }
  else
  {
    return HAL_BUSY;
 8002e1a:	2302      	movs	r3, #2
  }
}
 8002e1c:	0018      	movs	r0, r3
 8002e1e:	46bd      	mov	sp, r7
 8002e20:	b008      	add	sp, #32
 8002e22:	bd80      	pop	{r7, pc}

08002e24 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002e24:	b590      	push	{r4, r7, lr}
 8002e26:	b0ab      	sub	sp, #172	; 0xac
 8002e28:	af00      	add	r7, sp, #0
 8002e2a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	69db      	ldr	r3, [r3, #28]
 8002e32:	22a4      	movs	r2, #164	; 0xa4
 8002e34:	18b9      	adds	r1, r7, r2
 8002e36:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	20a0      	movs	r0, #160	; 0xa0
 8002e40:	1839      	adds	r1, r7, r0
 8002e42:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	689b      	ldr	r3, [r3, #8]
 8002e4a:	219c      	movs	r1, #156	; 0x9c
 8002e4c:	1879      	adds	r1, r7, r1
 8002e4e:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8002e50:	0011      	movs	r1, r2
 8002e52:	18bb      	adds	r3, r7, r2
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	4a99      	ldr	r2, [pc, #612]	; (80030bc <HAL_UART_IRQHandler+0x298>)
 8002e58:	4013      	ands	r3, r2
 8002e5a:	2298      	movs	r2, #152	; 0x98
 8002e5c:	18bc      	adds	r4, r7, r2
 8002e5e:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 8002e60:	18bb      	adds	r3, r7, r2
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d114      	bne.n	8002e92 <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8002e68:	187b      	adds	r3, r7, r1
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	2220      	movs	r2, #32
 8002e6e:	4013      	ands	r3, r2
 8002e70:	d00f      	beq.n	8002e92 <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002e72:	183b      	adds	r3, r7, r0
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	2220      	movs	r2, #32
 8002e78:	4013      	ands	r3, r2
 8002e7a:	d00a      	beq.n	8002e92 <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d100      	bne.n	8002e86 <HAL_UART_IRQHandler+0x62>
 8002e84:	e298      	b.n	80033b8 <HAL_UART_IRQHandler+0x594>
      {
        huart->RxISR(huart);
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002e8a:	687a      	ldr	r2, [r7, #4]
 8002e8c:	0010      	movs	r0, r2
 8002e8e:	4798      	blx	r3
      }
      return;
 8002e90:	e292      	b.n	80033b8 <HAL_UART_IRQHandler+0x594>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8002e92:	2398      	movs	r3, #152	; 0x98
 8002e94:	18fb      	adds	r3, r7, r3
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d100      	bne.n	8002e9e <HAL_UART_IRQHandler+0x7a>
 8002e9c:	e114      	b.n	80030c8 <HAL_UART_IRQHandler+0x2a4>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8002e9e:	239c      	movs	r3, #156	; 0x9c
 8002ea0:	18fb      	adds	r3, r7, r3
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	2201      	movs	r2, #1
 8002ea6:	4013      	ands	r3, r2
 8002ea8:	d106      	bne.n	8002eb8 <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8002eaa:	23a0      	movs	r3, #160	; 0xa0
 8002eac:	18fb      	adds	r3, r7, r3
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	4a83      	ldr	r2, [pc, #524]	; (80030c0 <HAL_UART_IRQHandler+0x29c>)
 8002eb2:	4013      	ands	r3, r2
 8002eb4:	d100      	bne.n	8002eb8 <HAL_UART_IRQHandler+0x94>
 8002eb6:	e107      	b.n	80030c8 <HAL_UART_IRQHandler+0x2a4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8002eb8:	23a4      	movs	r3, #164	; 0xa4
 8002eba:	18fb      	adds	r3, r7, r3
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	2201      	movs	r2, #1
 8002ec0:	4013      	ands	r3, r2
 8002ec2:	d012      	beq.n	8002eea <HAL_UART_IRQHandler+0xc6>
 8002ec4:	23a0      	movs	r3, #160	; 0xa0
 8002ec6:	18fb      	adds	r3, r7, r3
 8002ec8:	681a      	ldr	r2, [r3, #0]
 8002eca:	2380      	movs	r3, #128	; 0x80
 8002ecc:	005b      	lsls	r3, r3, #1
 8002ece:	4013      	ands	r3, r2
 8002ed0:	d00b      	beq.n	8002eea <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	2201      	movs	r2, #1
 8002ed8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	2280      	movs	r2, #128	; 0x80
 8002ede:	589b      	ldr	r3, [r3, r2]
 8002ee0:	2201      	movs	r2, #1
 8002ee2:	431a      	orrs	r2, r3
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	2180      	movs	r1, #128	; 0x80
 8002ee8:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002eea:	23a4      	movs	r3, #164	; 0xa4
 8002eec:	18fb      	adds	r3, r7, r3
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	2202      	movs	r2, #2
 8002ef2:	4013      	ands	r3, r2
 8002ef4:	d011      	beq.n	8002f1a <HAL_UART_IRQHandler+0xf6>
 8002ef6:	239c      	movs	r3, #156	; 0x9c
 8002ef8:	18fb      	adds	r3, r7, r3
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	2201      	movs	r2, #1
 8002efe:	4013      	ands	r3, r2
 8002f00:	d00b      	beq.n	8002f1a <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	2202      	movs	r2, #2
 8002f08:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	2280      	movs	r2, #128	; 0x80
 8002f0e:	589b      	ldr	r3, [r3, r2]
 8002f10:	2204      	movs	r2, #4
 8002f12:	431a      	orrs	r2, r3
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	2180      	movs	r1, #128	; 0x80
 8002f18:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002f1a:	23a4      	movs	r3, #164	; 0xa4
 8002f1c:	18fb      	adds	r3, r7, r3
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	2204      	movs	r2, #4
 8002f22:	4013      	ands	r3, r2
 8002f24:	d011      	beq.n	8002f4a <HAL_UART_IRQHandler+0x126>
 8002f26:	239c      	movs	r3, #156	; 0x9c
 8002f28:	18fb      	adds	r3, r7, r3
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	2201      	movs	r2, #1
 8002f2e:	4013      	ands	r3, r2
 8002f30:	d00b      	beq.n	8002f4a <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	2204      	movs	r2, #4
 8002f38:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	2280      	movs	r2, #128	; 0x80
 8002f3e:	589b      	ldr	r3, [r3, r2]
 8002f40:	2202      	movs	r2, #2
 8002f42:	431a      	orrs	r2, r3
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	2180      	movs	r1, #128	; 0x80
 8002f48:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8002f4a:	23a4      	movs	r3, #164	; 0xa4
 8002f4c:	18fb      	adds	r3, r7, r3
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	2208      	movs	r2, #8
 8002f52:	4013      	ands	r3, r2
 8002f54:	d017      	beq.n	8002f86 <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002f56:	23a0      	movs	r3, #160	; 0xa0
 8002f58:	18fb      	adds	r3, r7, r3
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	2220      	movs	r2, #32
 8002f5e:	4013      	ands	r3, r2
 8002f60:	d105      	bne.n	8002f6e <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8002f62:	239c      	movs	r3, #156	; 0x9c
 8002f64:	18fb      	adds	r3, r7, r3
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	2201      	movs	r2, #1
 8002f6a:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002f6c:	d00b      	beq.n	8002f86 <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	2208      	movs	r2, #8
 8002f74:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	2280      	movs	r2, #128	; 0x80
 8002f7a:	589b      	ldr	r3, [r3, r2]
 8002f7c:	2208      	movs	r2, #8
 8002f7e:	431a      	orrs	r2, r3
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	2180      	movs	r1, #128	; 0x80
 8002f84:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8002f86:	23a4      	movs	r3, #164	; 0xa4
 8002f88:	18fb      	adds	r3, r7, r3
 8002f8a:	681a      	ldr	r2, [r3, #0]
 8002f8c:	2380      	movs	r3, #128	; 0x80
 8002f8e:	011b      	lsls	r3, r3, #4
 8002f90:	4013      	ands	r3, r2
 8002f92:	d013      	beq.n	8002fbc <HAL_UART_IRQHandler+0x198>
 8002f94:	23a0      	movs	r3, #160	; 0xa0
 8002f96:	18fb      	adds	r3, r7, r3
 8002f98:	681a      	ldr	r2, [r3, #0]
 8002f9a:	2380      	movs	r3, #128	; 0x80
 8002f9c:	04db      	lsls	r3, r3, #19
 8002f9e:	4013      	ands	r3, r2
 8002fa0:	d00c      	beq.n	8002fbc <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	2280      	movs	r2, #128	; 0x80
 8002fa8:	0112      	lsls	r2, r2, #4
 8002faa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	2280      	movs	r2, #128	; 0x80
 8002fb0:	589b      	ldr	r3, [r3, r2]
 8002fb2:	2220      	movs	r2, #32
 8002fb4:	431a      	orrs	r2, r3
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	2180      	movs	r1, #128	; 0x80
 8002fba:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	2280      	movs	r2, #128	; 0x80
 8002fc0:	589b      	ldr	r3, [r3, r2]
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d100      	bne.n	8002fc8 <HAL_UART_IRQHandler+0x1a4>
 8002fc6:	e1f9      	b.n	80033bc <HAL_UART_IRQHandler+0x598>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8002fc8:	23a4      	movs	r3, #164	; 0xa4
 8002fca:	18fb      	adds	r3, r7, r3
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	2220      	movs	r2, #32
 8002fd0:	4013      	ands	r3, r2
 8002fd2:	d00e      	beq.n	8002ff2 <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002fd4:	23a0      	movs	r3, #160	; 0xa0
 8002fd6:	18fb      	adds	r3, r7, r3
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	2220      	movs	r2, #32
 8002fdc:	4013      	ands	r3, r2
 8002fde:	d008      	beq.n	8002ff2 <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d004      	beq.n	8002ff2 <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002fec:	687a      	ldr	r2, [r7, #4]
 8002fee:	0010      	movs	r0, r2
 8002ff0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	2280      	movs	r2, #128	; 0x80
 8002ff6:	589b      	ldr	r3, [r3, r2]
 8002ff8:	2194      	movs	r1, #148	; 0x94
 8002ffa:	187a      	adds	r2, r7, r1
 8002ffc:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	689b      	ldr	r3, [r3, #8]
 8003004:	2240      	movs	r2, #64	; 0x40
 8003006:	4013      	ands	r3, r2
 8003008:	2b40      	cmp	r3, #64	; 0x40
 800300a:	d004      	beq.n	8003016 <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800300c:	187b      	adds	r3, r7, r1
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	2228      	movs	r2, #40	; 0x28
 8003012:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003014:	d047      	beq.n	80030a6 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	0018      	movs	r0, r3
 800301a:	f000 ff07 	bl	8003e2c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	689b      	ldr	r3, [r3, #8]
 8003024:	2240      	movs	r2, #64	; 0x40
 8003026:	4013      	ands	r3, r2
 8003028:	2b40      	cmp	r3, #64	; 0x40
 800302a:	d137      	bne.n	800309c <HAL_UART_IRQHandler+0x278>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800302c:	f3ef 8310 	mrs	r3, PRIMASK
 8003030:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 8003032:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003034:	2090      	movs	r0, #144	; 0x90
 8003036:	183a      	adds	r2, r7, r0
 8003038:	6013      	str	r3, [r2, #0]
 800303a:	2301      	movs	r3, #1
 800303c:	667b      	str	r3, [r7, #100]	; 0x64
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800303e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003040:	f383 8810 	msr	PRIMASK, r3
}
 8003044:	46c0      	nop			; (mov r8, r8)
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	689a      	ldr	r2, [r3, #8]
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	2140      	movs	r1, #64	; 0x40
 8003052:	438a      	bics	r2, r1
 8003054:	609a      	str	r2, [r3, #8]
 8003056:	183b      	adds	r3, r7, r0
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800305c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800305e:	f383 8810 	msr	PRIMASK, r3
}
 8003062:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003068:	2b00      	cmp	r3, #0
 800306a:	d012      	beq.n	8003092 <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003070:	4a14      	ldr	r2, [pc, #80]	; (80030c4 <HAL_UART_IRQHandler+0x2a0>)
 8003072:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003078:	0018      	movs	r0, r3
 800307a:	f7fe f893 	bl	80011a4 <HAL_DMA_Abort_IT>
 800307e:	1e03      	subs	r3, r0, #0
 8003080:	d01a      	beq.n	80030b8 <HAL_UART_IRQHandler+0x294>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003086:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800308c:	0018      	movs	r0, r3
 800308e:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003090:	e012      	b.n	80030b8 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	0018      	movs	r0, r3
 8003096:	f000 f9b7 	bl	8003408 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800309a:	e00d      	b.n	80030b8 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	0018      	movs	r0, r3
 80030a0:	f000 f9b2 	bl	8003408 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80030a4:	e008      	b.n	80030b8 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	0018      	movs	r0, r3
 80030aa:	f000 f9ad 	bl	8003408 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	2280      	movs	r2, #128	; 0x80
 80030b2:	2100      	movs	r1, #0
 80030b4:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 80030b6:	e181      	b.n	80033bc <HAL_UART_IRQHandler+0x598>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80030b8:	46c0      	nop			; (mov r8, r8)
    return;
 80030ba:	e17f      	b.n	80033bc <HAL_UART_IRQHandler+0x598>
 80030bc:	0000080f 	.word	0x0000080f
 80030c0:	04000120 	.word	0x04000120
 80030c4:	080040d7 	.word	0x080040d7

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80030cc:	2b01      	cmp	r3, #1
 80030ce:	d000      	beq.n	80030d2 <HAL_UART_IRQHandler+0x2ae>
 80030d0:	e133      	b.n	800333a <HAL_UART_IRQHandler+0x516>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80030d2:	23a4      	movs	r3, #164	; 0xa4
 80030d4:	18fb      	adds	r3, r7, r3
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	2210      	movs	r2, #16
 80030da:	4013      	ands	r3, r2
 80030dc:	d100      	bne.n	80030e0 <HAL_UART_IRQHandler+0x2bc>
 80030de:	e12c      	b.n	800333a <HAL_UART_IRQHandler+0x516>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80030e0:	23a0      	movs	r3, #160	; 0xa0
 80030e2:	18fb      	adds	r3, r7, r3
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	2210      	movs	r2, #16
 80030e8:	4013      	ands	r3, r2
 80030ea:	d100      	bne.n	80030ee <HAL_UART_IRQHandler+0x2ca>
 80030ec:	e125      	b.n	800333a <HAL_UART_IRQHandler+0x516>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	2210      	movs	r2, #16
 80030f4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	689b      	ldr	r3, [r3, #8]
 80030fc:	2240      	movs	r2, #64	; 0x40
 80030fe:	4013      	ands	r3, r2
 8003100:	2b40      	cmp	r3, #64	; 0x40
 8003102:	d000      	beq.n	8003106 <HAL_UART_IRQHandler+0x2e2>
 8003104:	e09d      	b.n	8003242 <HAL_UART_IRQHandler+0x41e>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	685a      	ldr	r2, [r3, #4]
 800310e:	217e      	movs	r1, #126	; 0x7e
 8003110:	187b      	adds	r3, r7, r1
 8003112:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8003114:	187b      	adds	r3, r7, r1
 8003116:	881b      	ldrh	r3, [r3, #0]
 8003118:	2b00      	cmp	r3, #0
 800311a:	d100      	bne.n	800311e <HAL_UART_IRQHandler+0x2fa>
 800311c:	e150      	b.n	80033c0 <HAL_UART_IRQHandler+0x59c>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	2258      	movs	r2, #88	; 0x58
 8003122:	5a9b      	ldrh	r3, [r3, r2]
 8003124:	187a      	adds	r2, r7, r1
 8003126:	8812      	ldrh	r2, [r2, #0]
 8003128:	429a      	cmp	r2, r3
 800312a:	d300      	bcc.n	800312e <HAL_UART_IRQHandler+0x30a>
 800312c:	e148      	b.n	80033c0 <HAL_UART_IRQHandler+0x59c>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	187a      	adds	r2, r7, r1
 8003132:	215a      	movs	r1, #90	; 0x5a
 8003134:	8812      	ldrh	r2, [r2, #0]
 8003136:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	2220      	movs	r2, #32
 8003142:	4013      	ands	r3, r2
 8003144:	d16e      	bne.n	8003224 <HAL_UART_IRQHandler+0x400>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003146:	f3ef 8310 	mrs	r3, PRIMASK
 800314a:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 800314c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800314e:	67bb      	str	r3, [r7, #120]	; 0x78
 8003150:	2301      	movs	r3, #1
 8003152:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003154:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003156:	f383 8810 	msr	PRIMASK, r3
}
 800315a:	46c0      	nop			; (mov r8, r8)
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	681a      	ldr	r2, [r3, #0]
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	499a      	ldr	r1, [pc, #616]	; (80033d0 <HAL_UART_IRQHandler+0x5ac>)
 8003168:	400a      	ands	r2, r1
 800316a:	601a      	str	r2, [r3, #0]
 800316c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800316e:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003170:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003172:	f383 8810 	msr	PRIMASK, r3
}
 8003176:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003178:	f3ef 8310 	mrs	r3, PRIMASK
 800317c:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 800317e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003180:	677b      	str	r3, [r7, #116]	; 0x74
 8003182:	2301      	movs	r3, #1
 8003184:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003186:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003188:	f383 8810 	msr	PRIMASK, r3
}
 800318c:	46c0      	nop			; (mov r8, r8)
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	689a      	ldr	r2, [r3, #8]
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	2101      	movs	r1, #1
 800319a:	438a      	bics	r2, r1
 800319c:	609a      	str	r2, [r3, #8]
 800319e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80031a0:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80031a2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80031a4:	f383 8810 	msr	PRIMASK, r3
}
 80031a8:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80031aa:	f3ef 8310 	mrs	r3, PRIMASK
 80031ae:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 80031b0:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80031b2:	673b      	str	r3, [r7, #112]	; 0x70
 80031b4:	2301      	movs	r3, #1
 80031b6:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80031b8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80031ba:	f383 8810 	msr	PRIMASK, r3
}
 80031be:	46c0      	nop			; (mov r8, r8)
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	689a      	ldr	r2, [r3, #8]
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	2140      	movs	r1, #64	; 0x40
 80031cc:	438a      	bics	r2, r1
 80031ce:	609a      	str	r2, [r3, #8]
 80031d0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80031d2:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80031d4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80031d6:	f383 8810 	msr	PRIMASK, r3
}
 80031da:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	2220      	movs	r2, #32
 80031e0:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	2200      	movs	r2, #0
 80031e6:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80031e8:	f3ef 8310 	mrs	r3, PRIMASK
 80031ec:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 80031ee:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80031f0:	66fb      	str	r3, [r7, #108]	; 0x6c
 80031f2:	2301      	movs	r3, #1
 80031f4:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80031f6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80031f8:	f383 8810 	msr	PRIMASK, r3
}
 80031fc:	46c0      	nop			; (mov r8, r8)
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	681a      	ldr	r2, [r3, #0]
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	2110      	movs	r1, #16
 800320a:	438a      	bics	r2, r1
 800320c:	601a      	str	r2, [r3, #0]
 800320e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003210:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003212:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003214:	f383 8810 	msr	PRIMASK, r3
}
 8003218:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800321e:	0018      	movs	r0, r3
 8003220:	f7fd ff80 	bl	8001124 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	2258      	movs	r2, #88	; 0x58
 8003228:	5a9a      	ldrh	r2, [r3, r2]
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	215a      	movs	r1, #90	; 0x5a
 800322e:	5a5b      	ldrh	r3, [r3, r1]
 8003230:	b29b      	uxth	r3, r3
 8003232:	1ad3      	subs	r3, r2, r3
 8003234:	b29a      	uxth	r2, r3
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	0011      	movs	r1, r2
 800323a:	0018      	movs	r0, r3
 800323c:	f7fd fb6e 	bl	800091c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003240:	e0be      	b.n	80033c0 <HAL_UART_IRQHandler+0x59c>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	2258      	movs	r2, #88	; 0x58
 8003246:	5a99      	ldrh	r1, [r3, r2]
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	225a      	movs	r2, #90	; 0x5a
 800324c:	5a9b      	ldrh	r3, [r3, r2]
 800324e:	b29a      	uxth	r2, r3
 8003250:	208e      	movs	r0, #142	; 0x8e
 8003252:	183b      	adds	r3, r7, r0
 8003254:	1a8a      	subs	r2, r1, r2
 8003256:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	225a      	movs	r2, #90	; 0x5a
 800325c:	5a9b      	ldrh	r3, [r3, r2]
 800325e:	b29b      	uxth	r3, r3
 8003260:	2b00      	cmp	r3, #0
 8003262:	d100      	bne.n	8003266 <HAL_UART_IRQHandler+0x442>
 8003264:	e0ae      	b.n	80033c4 <HAL_UART_IRQHandler+0x5a0>
          && (nb_rx_data > 0U))
 8003266:	183b      	adds	r3, r7, r0
 8003268:	881b      	ldrh	r3, [r3, #0]
 800326a:	2b00      	cmp	r3, #0
 800326c:	d100      	bne.n	8003270 <HAL_UART_IRQHandler+0x44c>
 800326e:	e0a9      	b.n	80033c4 <HAL_UART_IRQHandler+0x5a0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003270:	f3ef 8310 	mrs	r3, PRIMASK
 8003274:	60fb      	str	r3, [r7, #12]
  return(result);
 8003276:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003278:	2488      	movs	r4, #136	; 0x88
 800327a:	193a      	adds	r2, r7, r4
 800327c:	6013      	str	r3, [r2, #0]
 800327e:	2301      	movs	r3, #1
 8003280:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003282:	693b      	ldr	r3, [r7, #16]
 8003284:	f383 8810 	msr	PRIMASK, r3
}
 8003288:	46c0      	nop			; (mov r8, r8)
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	681a      	ldr	r2, [r3, #0]
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	494f      	ldr	r1, [pc, #316]	; (80033d4 <HAL_UART_IRQHandler+0x5b0>)
 8003296:	400a      	ands	r2, r1
 8003298:	601a      	str	r2, [r3, #0]
 800329a:	193b      	adds	r3, r7, r4
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80032a0:	697b      	ldr	r3, [r7, #20]
 80032a2:	f383 8810 	msr	PRIMASK, r3
}
 80032a6:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80032a8:	f3ef 8310 	mrs	r3, PRIMASK
 80032ac:	61bb      	str	r3, [r7, #24]
  return(result);
 80032ae:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80032b0:	2484      	movs	r4, #132	; 0x84
 80032b2:	193a      	adds	r2, r7, r4
 80032b4:	6013      	str	r3, [r2, #0]
 80032b6:	2301      	movs	r3, #1
 80032b8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80032ba:	69fb      	ldr	r3, [r7, #28]
 80032bc:	f383 8810 	msr	PRIMASK, r3
}
 80032c0:	46c0      	nop			; (mov r8, r8)
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	689a      	ldr	r2, [r3, #8]
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	2101      	movs	r1, #1
 80032ce:	438a      	bics	r2, r1
 80032d0:	609a      	str	r2, [r3, #8]
 80032d2:	193b      	adds	r3, r7, r4
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80032d8:	6a3b      	ldr	r3, [r7, #32]
 80032da:	f383 8810 	msr	PRIMASK, r3
}
 80032de:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	2220      	movs	r2, #32
 80032e4:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	2200      	movs	r2, #0
 80032ea:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	2200      	movs	r2, #0
 80032f0:	665a      	str	r2, [r3, #100]	; 0x64
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80032f2:	f3ef 8310 	mrs	r3, PRIMASK
 80032f6:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80032f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80032fa:	2480      	movs	r4, #128	; 0x80
 80032fc:	193a      	adds	r2, r7, r4
 80032fe:	6013      	str	r3, [r2, #0]
 8003300:	2301      	movs	r3, #1
 8003302:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003304:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003306:	f383 8810 	msr	PRIMASK, r3
}
 800330a:	46c0      	nop			; (mov r8, r8)
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	681a      	ldr	r2, [r3, #0]
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	2110      	movs	r1, #16
 8003318:	438a      	bics	r2, r1
 800331a:	601a      	str	r2, [r3, #0]
 800331c:	193b      	adds	r3, r7, r4
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003322:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003324:	f383 8810 	msr	PRIMASK, r3
}
 8003328:	46c0      	nop			; (mov r8, r8)
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800332a:	183b      	adds	r3, r7, r0
 800332c:	881a      	ldrh	r2, [r3, #0]
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	0011      	movs	r1, r2
 8003332:	0018      	movs	r0, r3
 8003334:	f7fd faf2 	bl	800091c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003338:	e044      	b.n	80033c4 <HAL_UART_IRQHandler+0x5a0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800333a:	23a4      	movs	r3, #164	; 0xa4
 800333c:	18fb      	adds	r3, r7, r3
 800333e:	681a      	ldr	r2, [r3, #0]
 8003340:	2380      	movs	r3, #128	; 0x80
 8003342:	035b      	lsls	r3, r3, #13
 8003344:	4013      	ands	r3, r2
 8003346:	d010      	beq.n	800336a <HAL_UART_IRQHandler+0x546>
 8003348:	239c      	movs	r3, #156	; 0x9c
 800334a:	18fb      	adds	r3, r7, r3
 800334c:	681a      	ldr	r2, [r3, #0]
 800334e:	2380      	movs	r3, #128	; 0x80
 8003350:	03db      	lsls	r3, r3, #15
 8003352:	4013      	ands	r3, r2
 8003354:	d009      	beq.n	800336a <HAL_UART_IRQHandler+0x546>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	2280      	movs	r2, #128	; 0x80
 800335c:	0352      	lsls	r2, r2, #13
 800335e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	0018      	movs	r0, r3
 8003364:	f000 fef9 	bl	800415a <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003368:	e02f      	b.n	80033ca <HAL_UART_IRQHandler+0x5a6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800336a:	23a4      	movs	r3, #164	; 0xa4
 800336c:	18fb      	adds	r3, r7, r3
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	2280      	movs	r2, #128	; 0x80
 8003372:	4013      	ands	r3, r2
 8003374:	d00f      	beq.n	8003396 <HAL_UART_IRQHandler+0x572>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8003376:	23a0      	movs	r3, #160	; 0xa0
 8003378:	18fb      	adds	r3, r7, r3
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	2280      	movs	r2, #128	; 0x80
 800337e:	4013      	ands	r3, r2
 8003380:	d009      	beq.n	8003396 <HAL_UART_IRQHandler+0x572>
  {
    if (huart->TxISR != NULL)
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003386:	2b00      	cmp	r3, #0
 8003388:	d01e      	beq.n	80033c8 <HAL_UART_IRQHandler+0x5a4>
    {
      huart->TxISR(huart);
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800338e:	687a      	ldr	r2, [r7, #4]
 8003390:	0010      	movs	r0, r2
 8003392:	4798      	blx	r3
    }
    return;
 8003394:	e018      	b.n	80033c8 <HAL_UART_IRQHandler+0x5a4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003396:	23a4      	movs	r3, #164	; 0xa4
 8003398:	18fb      	adds	r3, r7, r3
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	2240      	movs	r2, #64	; 0x40
 800339e:	4013      	ands	r3, r2
 80033a0:	d013      	beq.n	80033ca <HAL_UART_IRQHandler+0x5a6>
 80033a2:	23a0      	movs	r3, #160	; 0xa0
 80033a4:	18fb      	adds	r3, r7, r3
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	2240      	movs	r2, #64	; 0x40
 80033aa:	4013      	ands	r3, r2
 80033ac:	d00d      	beq.n	80033ca <HAL_UART_IRQHandler+0x5a6>
  {
    UART_EndTransmit_IT(huart);
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	0018      	movs	r0, r3
 80033b2:	f000 fea7 	bl	8004104 <UART_EndTransmit_IT>
    return;
 80033b6:	e008      	b.n	80033ca <HAL_UART_IRQHandler+0x5a6>
      return;
 80033b8:	46c0      	nop			; (mov r8, r8)
 80033ba:	e006      	b.n	80033ca <HAL_UART_IRQHandler+0x5a6>
    return;
 80033bc:	46c0      	nop			; (mov r8, r8)
 80033be:	e004      	b.n	80033ca <HAL_UART_IRQHandler+0x5a6>
      return;
 80033c0:	46c0      	nop			; (mov r8, r8)
 80033c2:	e002      	b.n	80033ca <HAL_UART_IRQHandler+0x5a6>
      return;
 80033c4:	46c0      	nop			; (mov r8, r8)
 80033c6:	e000      	b.n	80033ca <HAL_UART_IRQHandler+0x5a6>
    return;
 80033c8:	46c0      	nop			; (mov r8, r8)
  }

}
 80033ca:	46bd      	mov	sp, r7
 80033cc:	b02b      	add	sp, #172	; 0xac
 80033ce:	bd90      	pop	{r4, r7, pc}
 80033d0:	fffffeff 	.word	0xfffffeff
 80033d4:	fffffedf 	.word	0xfffffedf

080033d8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80033d8:	b580      	push	{r7, lr}
 80033da:	b082      	sub	sp, #8
 80033dc:	af00      	add	r7, sp, #0
 80033de:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80033e0:	46c0      	nop			; (mov r8, r8)
 80033e2:	46bd      	mov	sp, r7
 80033e4:	b002      	add	sp, #8
 80033e6:	bd80      	pop	{r7, pc}

080033e8 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80033e8:	b580      	push	{r7, lr}
 80033ea:	b082      	sub	sp, #8
 80033ec:	af00      	add	r7, sp, #0
 80033ee:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 80033f0:	46c0      	nop			; (mov r8, r8)
 80033f2:	46bd      	mov	sp, r7
 80033f4:	b002      	add	sp, #8
 80033f6:	bd80      	pop	{r7, pc}

080033f8 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80033f8:	b580      	push	{r7, lr}
 80033fa:	b082      	sub	sp, #8
 80033fc:	af00      	add	r7, sp, #0
 80033fe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8003400:	46c0      	nop			; (mov r8, r8)
 8003402:	46bd      	mov	sp, r7
 8003404:	b002      	add	sp, #8
 8003406:	bd80      	pop	{r7, pc}

08003408 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003408:	b580      	push	{r7, lr}
 800340a:	b082      	sub	sp, #8
 800340c:	af00      	add	r7, sp, #0
 800340e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003410:	46c0      	nop			; (mov r8, r8)
 8003412:	46bd      	mov	sp, r7
 8003414:	b002      	add	sp, #8
 8003416:	bd80      	pop	{r7, pc}

08003418 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003418:	b5b0      	push	{r4, r5, r7, lr}
 800341a:	b08e      	sub	sp, #56	; 0x38
 800341c:	af00      	add	r7, sp, #0
 800341e:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003420:	231a      	movs	r3, #26
 8003422:	2218      	movs	r2, #24
 8003424:	189b      	adds	r3, r3, r2
 8003426:	19db      	adds	r3, r3, r7
 8003428:	2200      	movs	r2, #0
 800342a:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800342c:	69fb      	ldr	r3, [r7, #28]
 800342e:	689a      	ldr	r2, [r3, #8]
 8003430:	69fb      	ldr	r3, [r7, #28]
 8003432:	691b      	ldr	r3, [r3, #16]
 8003434:	431a      	orrs	r2, r3
 8003436:	69fb      	ldr	r3, [r7, #28]
 8003438:	695b      	ldr	r3, [r3, #20]
 800343a:	431a      	orrs	r2, r3
 800343c:	69fb      	ldr	r3, [r7, #28]
 800343e:	69db      	ldr	r3, [r3, #28]
 8003440:	4313      	orrs	r3, r2
 8003442:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003444:	69fb      	ldr	r3, [r7, #28]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	4ac6      	ldr	r2, [pc, #792]	; (8003764 <UART_SetConfig+0x34c>)
 800344c:	4013      	ands	r3, r2
 800344e:	0019      	movs	r1, r3
 8003450:	69fb      	ldr	r3, [r7, #28]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003456:	430a      	orrs	r2, r1
 8003458:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800345a:	69fb      	ldr	r3, [r7, #28]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	685b      	ldr	r3, [r3, #4]
 8003460:	4ac1      	ldr	r2, [pc, #772]	; (8003768 <UART_SetConfig+0x350>)
 8003462:	4013      	ands	r3, r2
 8003464:	0019      	movs	r1, r3
 8003466:	69fb      	ldr	r3, [r7, #28]
 8003468:	68da      	ldr	r2, [r3, #12]
 800346a:	69fb      	ldr	r3, [r7, #28]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	430a      	orrs	r2, r1
 8003470:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003472:	69fb      	ldr	r3, [r7, #28]
 8003474:	699b      	ldr	r3, [r3, #24]
 8003476:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003478:	69fb      	ldr	r3, [r7, #28]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	4abb      	ldr	r2, [pc, #748]	; (800376c <UART_SetConfig+0x354>)
 800347e:	4293      	cmp	r3, r2
 8003480:	d004      	beq.n	800348c <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003482:	69fb      	ldr	r3, [r7, #28]
 8003484:	6a1b      	ldr	r3, [r3, #32]
 8003486:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003488:	4313      	orrs	r3, r2
 800348a:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800348c:	69fb      	ldr	r3, [r7, #28]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	689b      	ldr	r3, [r3, #8]
 8003492:	4ab7      	ldr	r2, [pc, #732]	; (8003770 <UART_SetConfig+0x358>)
 8003494:	4013      	ands	r3, r2
 8003496:	0019      	movs	r1, r3
 8003498:	69fb      	ldr	r3, [r7, #28]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800349e:	430a      	orrs	r2, r1
 80034a0:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80034a2:	69fb      	ldr	r3, [r7, #28]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	4ab3      	ldr	r2, [pc, #716]	; (8003774 <UART_SetConfig+0x35c>)
 80034a8:	4293      	cmp	r3, r2
 80034aa:	d131      	bne.n	8003510 <UART_SetConfig+0xf8>
 80034ac:	4bb2      	ldr	r3, [pc, #712]	; (8003778 <UART_SetConfig+0x360>)
 80034ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80034b0:	2203      	movs	r2, #3
 80034b2:	4013      	ands	r3, r2
 80034b4:	2b03      	cmp	r3, #3
 80034b6:	d01d      	beq.n	80034f4 <UART_SetConfig+0xdc>
 80034b8:	d823      	bhi.n	8003502 <UART_SetConfig+0xea>
 80034ba:	2b02      	cmp	r3, #2
 80034bc:	d00c      	beq.n	80034d8 <UART_SetConfig+0xc0>
 80034be:	d820      	bhi.n	8003502 <UART_SetConfig+0xea>
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d002      	beq.n	80034ca <UART_SetConfig+0xb2>
 80034c4:	2b01      	cmp	r3, #1
 80034c6:	d00e      	beq.n	80034e6 <UART_SetConfig+0xce>
 80034c8:	e01b      	b.n	8003502 <UART_SetConfig+0xea>
 80034ca:	231b      	movs	r3, #27
 80034cc:	2218      	movs	r2, #24
 80034ce:	189b      	adds	r3, r3, r2
 80034d0:	19db      	adds	r3, r3, r7
 80034d2:	2201      	movs	r2, #1
 80034d4:	701a      	strb	r2, [r3, #0]
 80034d6:	e09c      	b.n	8003612 <UART_SetConfig+0x1fa>
 80034d8:	231b      	movs	r3, #27
 80034da:	2218      	movs	r2, #24
 80034dc:	189b      	adds	r3, r3, r2
 80034de:	19db      	adds	r3, r3, r7
 80034e0:	2202      	movs	r2, #2
 80034e2:	701a      	strb	r2, [r3, #0]
 80034e4:	e095      	b.n	8003612 <UART_SetConfig+0x1fa>
 80034e6:	231b      	movs	r3, #27
 80034e8:	2218      	movs	r2, #24
 80034ea:	189b      	adds	r3, r3, r2
 80034ec:	19db      	adds	r3, r3, r7
 80034ee:	2204      	movs	r2, #4
 80034f0:	701a      	strb	r2, [r3, #0]
 80034f2:	e08e      	b.n	8003612 <UART_SetConfig+0x1fa>
 80034f4:	231b      	movs	r3, #27
 80034f6:	2218      	movs	r2, #24
 80034f8:	189b      	adds	r3, r3, r2
 80034fa:	19db      	adds	r3, r3, r7
 80034fc:	2208      	movs	r2, #8
 80034fe:	701a      	strb	r2, [r3, #0]
 8003500:	e087      	b.n	8003612 <UART_SetConfig+0x1fa>
 8003502:	231b      	movs	r3, #27
 8003504:	2218      	movs	r2, #24
 8003506:	189b      	adds	r3, r3, r2
 8003508:	19db      	adds	r3, r3, r7
 800350a:	2210      	movs	r2, #16
 800350c:	701a      	strb	r2, [r3, #0]
 800350e:	e080      	b.n	8003612 <UART_SetConfig+0x1fa>
 8003510:	69fb      	ldr	r3, [r7, #28]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	4a99      	ldr	r2, [pc, #612]	; (800377c <UART_SetConfig+0x364>)
 8003516:	4293      	cmp	r3, r2
 8003518:	d131      	bne.n	800357e <UART_SetConfig+0x166>
 800351a:	4b97      	ldr	r3, [pc, #604]	; (8003778 <UART_SetConfig+0x360>)
 800351c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800351e:	220c      	movs	r2, #12
 8003520:	4013      	ands	r3, r2
 8003522:	2b0c      	cmp	r3, #12
 8003524:	d01d      	beq.n	8003562 <UART_SetConfig+0x14a>
 8003526:	d823      	bhi.n	8003570 <UART_SetConfig+0x158>
 8003528:	2b08      	cmp	r3, #8
 800352a:	d00c      	beq.n	8003546 <UART_SetConfig+0x12e>
 800352c:	d820      	bhi.n	8003570 <UART_SetConfig+0x158>
 800352e:	2b00      	cmp	r3, #0
 8003530:	d002      	beq.n	8003538 <UART_SetConfig+0x120>
 8003532:	2b04      	cmp	r3, #4
 8003534:	d00e      	beq.n	8003554 <UART_SetConfig+0x13c>
 8003536:	e01b      	b.n	8003570 <UART_SetConfig+0x158>
 8003538:	231b      	movs	r3, #27
 800353a:	2218      	movs	r2, #24
 800353c:	189b      	adds	r3, r3, r2
 800353e:	19db      	adds	r3, r3, r7
 8003540:	2200      	movs	r2, #0
 8003542:	701a      	strb	r2, [r3, #0]
 8003544:	e065      	b.n	8003612 <UART_SetConfig+0x1fa>
 8003546:	231b      	movs	r3, #27
 8003548:	2218      	movs	r2, #24
 800354a:	189b      	adds	r3, r3, r2
 800354c:	19db      	adds	r3, r3, r7
 800354e:	2202      	movs	r2, #2
 8003550:	701a      	strb	r2, [r3, #0]
 8003552:	e05e      	b.n	8003612 <UART_SetConfig+0x1fa>
 8003554:	231b      	movs	r3, #27
 8003556:	2218      	movs	r2, #24
 8003558:	189b      	adds	r3, r3, r2
 800355a:	19db      	adds	r3, r3, r7
 800355c:	2204      	movs	r2, #4
 800355e:	701a      	strb	r2, [r3, #0]
 8003560:	e057      	b.n	8003612 <UART_SetConfig+0x1fa>
 8003562:	231b      	movs	r3, #27
 8003564:	2218      	movs	r2, #24
 8003566:	189b      	adds	r3, r3, r2
 8003568:	19db      	adds	r3, r3, r7
 800356a:	2208      	movs	r2, #8
 800356c:	701a      	strb	r2, [r3, #0]
 800356e:	e050      	b.n	8003612 <UART_SetConfig+0x1fa>
 8003570:	231b      	movs	r3, #27
 8003572:	2218      	movs	r2, #24
 8003574:	189b      	adds	r3, r3, r2
 8003576:	19db      	adds	r3, r3, r7
 8003578:	2210      	movs	r2, #16
 800357a:	701a      	strb	r2, [r3, #0]
 800357c:	e049      	b.n	8003612 <UART_SetConfig+0x1fa>
 800357e:	69fb      	ldr	r3, [r7, #28]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	4a7a      	ldr	r2, [pc, #488]	; (800376c <UART_SetConfig+0x354>)
 8003584:	4293      	cmp	r3, r2
 8003586:	d13e      	bne.n	8003606 <UART_SetConfig+0x1ee>
 8003588:	4b7b      	ldr	r3, [pc, #492]	; (8003778 <UART_SetConfig+0x360>)
 800358a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800358c:	23c0      	movs	r3, #192	; 0xc0
 800358e:	011b      	lsls	r3, r3, #4
 8003590:	4013      	ands	r3, r2
 8003592:	22c0      	movs	r2, #192	; 0xc0
 8003594:	0112      	lsls	r2, r2, #4
 8003596:	4293      	cmp	r3, r2
 8003598:	d027      	beq.n	80035ea <UART_SetConfig+0x1d2>
 800359a:	22c0      	movs	r2, #192	; 0xc0
 800359c:	0112      	lsls	r2, r2, #4
 800359e:	4293      	cmp	r3, r2
 80035a0:	d82a      	bhi.n	80035f8 <UART_SetConfig+0x1e0>
 80035a2:	2280      	movs	r2, #128	; 0x80
 80035a4:	0112      	lsls	r2, r2, #4
 80035a6:	4293      	cmp	r3, r2
 80035a8:	d011      	beq.n	80035ce <UART_SetConfig+0x1b6>
 80035aa:	2280      	movs	r2, #128	; 0x80
 80035ac:	0112      	lsls	r2, r2, #4
 80035ae:	4293      	cmp	r3, r2
 80035b0:	d822      	bhi.n	80035f8 <UART_SetConfig+0x1e0>
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d004      	beq.n	80035c0 <UART_SetConfig+0x1a8>
 80035b6:	2280      	movs	r2, #128	; 0x80
 80035b8:	00d2      	lsls	r2, r2, #3
 80035ba:	4293      	cmp	r3, r2
 80035bc:	d00e      	beq.n	80035dc <UART_SetConfig+0x1c4>
 80035be:	e01b      	b.n	80035f8 <UART_SetConfig+0x1e0>
 80035c0:	231b      	movs	r3, #27
 80035c2:	2218      	movs	r2, #24
 80035c4:	189b      	adds	r3, r3, r2
 80035c6:	19db      	adds	r3, r3, r7
 80035c8:	2200      	movs	r2, #0
 80035ca:	701a      	strb	r2, [r3, #0]
 80035cc:	e021      	b.n	8003612 <UART_SetConfig+0x1fa>
 80035ce:	231b      	movs	r3, #27
 80035d0:	2218      	movs	r2, #24
 80035d2:	189b      	adds	r3, r3, r2
 80035d4:	19db      	adds	r3, r3, r7
 80035d6:	2202      	movs	r2, #2
 80035d8:	701a      	strb	r2, [r3, #0]
 80035da:	e01a      	b.n	8003612 <UART_SetConfig+0x1fa>
 80035dc:	231b      	movs	r3, #27
 80035de:	2218      	movs	r2, #24
 80035e0:	189b      	adds	r3, r3, r2
 80035e2:	19db      	adds	r3, r3, r7
 80035e4:	2204      	movs	r2, #4
 80035e6:	701a      	strb	r2, [r3, #0]
 80035e8:	e013      	b.n	8003612 <UART_SetConfig+0x1fa>
 80035ea:	231b      	movs	r3, #27
 80035ec:	2218      	movs	r2, #24
 80035ee:	189b      	adds	r3, r3, r2
 80035f0:	19db      	adds	r3, r3, r7
 80035f2:	2208      	movs	r2, #8
 80035f4:	701a      	strb	r2, [r3, #0]
 80035f6:	e00c      	b.n	8003612 <UART_SetConfig+0x1fa>
 80035f8:	231b      	movs	r3, #27
 80035fa:	2218      	movs	r2, #24
 80035fc:	189b      	adds	r3, r3, r2
 80035fe:	19db      	adds	r3, r3, r7
 8003600:	2210      	movs	r2, #16
 8003602:	701a      	strb	r2, [r3, #0]
 8003604:	e005      	b.n	8003612 <UART_SetConfig+0x1fa>
 8003606:	231b      	movs	r3, #27
 8003608:	2218      	movs	r2, #24
 800360a:	189b      	adds	r3, r3, r2
 800360c:	19db      	adds	r3, r3, r7
 800360e:	2210      	movs	r2, #16
 8003610:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003612:	69fb      	ldr	r3, [r7, #28]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	4a55      	ldr	r2, [pc, #340]	; (800376c <UART_SetConfig+0x354>)
 8003618:	4293      	cmp	r3, r2
 800361a:	d000      	beq.n	800361e <UART_SetConfig+0x206>
 800361c:	e084      	b.n	8003728 <UART_SetConfig+0x310>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800361e:	231b      	movs	r3, #27
 8003620:	2218      	movs	r2, #24
 8003622:	189b      	adds	r3, r3, r2
 8003624:	19db      	adds	r3, r3, r7
 8003626:	781b      	ldrb	r3, [r3, #0]
 8003628:	2b08      	cmp	r3, #8
 800362a:	d01d      	beq.n	8003668 <UART_SetConfig+0x250>
 800362c:	dc20      	bgt.n	8003670 <UART_SetConfig+0x258>
 800362e:	2b04      	cmp	r3, #4
 8003630:	d015      	beq.n	800365e <UART_SetConfig+0x246>
 8003632:	dc1d      	bgt.n	8003670 <UART_SetConfig+0x258>
 8003634:	2b00      	cmp	r3, #0
 8003636:	d002      	beq.n	800363e <UART_SetConfig+0x226>
 8003638:	2b02      	cmp	r3, #2
 800363a:	d005      	beq.n	8003648 <UART_SetConfig+0x230>
 800363c:	e018      	b.n	8003670 <UART_SetConfig+0x258>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800363e:	f7fe fe15 	bl	800226c <HAL_RCC_GetPCLK1Freq>
 8003642:	0003      	movs	r3, r0
 8003644:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003646:	e01c      	b.n	8003682 <UART_SetConfig+0x26a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003648:	4b4b      	ldr	r3, [pc, #300]	; (8003778 <UART_SetConfig+0x360>)
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	2210      	movs	r2, #16
 800364e:	4013      	ands	r3, r2
 8003650:	d002      	beq.n	8003658 <UART_SetConfig+0x240>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8003652:	4b4b      	ldr	r3, [pc, #300]	; (8003780 <UART_SetConfig+0x368>)
 8003654:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8003656:	e014      	b.n	8003682 <UART_SetConfig+0x26a>
          pclk = (uint32_t) HSI_VALUE;
 8003658:	4b4a      	ldr	r3, [pc, #296]	; (8003784 <UART_SetConfig+0x36c>)
 800365a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800365c:	e011      	b.n	8003682 <UART_SetConfig+0x26a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800365e:	f7fe fd55 	bl	800210c <HAL_RCC_GetSysClockFreq>
 8003662:	0003      	movs	r3, r0
 8003664:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003666:	e00c      	b.n	8003682 <UART_SetConfig+0x26a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003668:	2380      	movs	r3, #128	; 0x80
 800366a:	021b      	lsls	r3, r3, #8
 800366c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800366e:	e008      	b.n	8003682 <UART_SetConfig+0x26a>
      default:
        pclk = 0U;
 8003670:	2300      	movs	r3, #0
 8003672:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8003674:	231a      	movs	r3, #26
 8003676:	2218      	movs	r2, #24
 8003678:	189b      	adds	r3, r3, r2
 800367a:	19db      	adds	r3, r3, r7
 800367c:	2201      	movs	r2, #1
 800367e:	701a      	strb	r2, [r3, #0]
        break;
 8003680:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003682:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003684:	2b00      	cmp	r3, #0
 8003686:	d100      	bne.n	800368a <UART_SetConfig+0x272>
 8003688:	e133      	b.n	80038f2 <UART_SetConfig+0x4da>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800368a:	69fb      	ldr	r3, [r7, #28]
 800368c:	685a      	ldr	r2, [r3, #4]
 800368e:	0013      	movs	r3, r2
 8003690:	005b      	lsls	r3, r3, #1
 8003692:	189b      	adds	r3, r3, r2
 8003694:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003696:	429a      	cmp	r2, r3
 8003698:	d305      	bcc.n	80036a6 <UART_SetConfig+0x28e>
          (pclk > (4096U * huart->Init.BaudRate)))
 800369a:	69fb      	ldr	r3, [r7, #28]
 800369c:	685b      	ldr	r3, [r3, #4]
 800369e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80036a0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80036a2:	429a      	cmp	r2, r3
 80036a4:	d906      	bls.n	80036b4 <UART_SetConfig+0x29c>
      {
        ret = HAL_ERROR;
 80036a6:	231a      	movs	r3, #26
 80036a8:	2218      	movs	r2, #24
 80036aa:	189b      	adds	r3, r3, r2
 80036ac:	19db      	adds	r3, r3, r7
 80036ae:	2201      	movs	r2, #1
 80036b0:	701a      	strb	r2, [r3, #0]
 80036b2:	e11e      	b.n	80038f2 <UART_SetConfig+0x4da>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80036b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036b6:	613b      	str	r3, [r7, #16]
 80036b8:	2300      	movs	r3, #0
 80036ba:	617b      	str	r3, [r7, #20]
 80036bc:	6939      	ldr	r1, [r7, #16]
 80036be:	697a      	ldr	r2, [r7, #20]
 80036c0:	000b      	movs	r3, r1
 80036c2:	0e1b      	lsrs	r3, r3, #24
 80036c4:	0010      	movs	r0, r2
 80036c6:	0205      	lsls	r5, r0, #8
 80036c8:	431d      	orrs	r5, r3
 80036ca:	000b      	movs	r3, r1
 80036cc:	021c      	lsls	r4, r3, #8
 80036ce:	69fb      	ldr	r3, [r7, #28]
 80036d0:	685b      	ldr	r3, [r3, #4]
 80036d2:	085b      	lsrs	r3, r3, #1
 80036d4:	60bb      	str	r3, [r7, #8]
 80036d6:	2300      	movs	r3, #0
 80036d8:	60fb      	str	r3, [r7, #12]
 80036da:	68b8      	ldr	r0, [r7, #8]
 80036dc:	68f9      	ldr	r1, [r7, #12]
 80036de:	1900      	adds	r0, r0, r4
 80036e0:	4169      	adcs	r1, r5
 80036e2:	69fb      	ldr	r3, [r7, #28]
 80036e4:	685b      	ldr	r3, [r3, #4]
 80036e6:	603b      	str	r3, [r7, #0]
 80036e8:	2300      	movs	r3, #0
 80036ea:	607b      	str	r3, [r7, #4]
 80036ec:	683a      	ldr	r2, [r7, #0]
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	f7fc fda8 	bl	8000244 <__aeabi_uldivmod>
 80036f4:	0002      	movs	r2, r0
 80036f6:	000b      	movs	r3, r1
 80036f8:	0013      	movs	r3, r2
 80036fa:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80036fc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80036fe:	23c0      	movs	r3, #192	; 0xc0
 8003700:	009b      	lsls	r3, r3, #2
 8003702:	429a      	cmp	r2, r3
 8003704:	d309      	bcc.n	800371a <UART_SetConfig+0x302>
 8003706:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003708:	2380      	movs	r3, #128	; 0x80
 800370a:	035b      	lsls	r3, r3, #13
 800370c:	429a      	cmp	r2, r3
 800370e:	d204      	bcs.n	800371a <UART_SetConfig+0x302>
        {
          huart->Instance->BRR = usartdiv;
 8003710:	69fb      	ldr	r3, [r7, #28]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003716:	60da      	str	r2, [r3, #12]
 8003718:	e0eb      	b.n	80038f2 <UART_SetConfig+0x4da>
        }
        else
        {
          ret = HAL_ERROR;
 800371a:	231a      	movs	r3, #26
 800371c:	2218      	movs	r2, #24
 800371e:	189b      	adds	r3, r3, r2
 8003720:	19db      	adds	r3, r3, r7
 8003722:	2201      	movs	r2, #1
 8003724:	701a      	strb	r2, [r3, #0]
 8003726:	e0e4      	b.n	80038f2 <UART_SetConfig+0x4da>
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003728:	69fb      	ldr	r3, [r7, #28]
 800372a:	69da      	ldr	r2, [r3, #28]
 800372c:	2380      	movs	r3, #128	; 0x80
 800372e:	021b      	lsls	r3, r3, #8
 8003730:	429a      	cmp	r2, r3
 8003732:	d000      	beq.n	8003736 <UART_SetConfig+0x31e>
 8003734:	e086      	b.n	8003844 <UART_SetConfig+0x42c>
  {
    switch (clocksource)
 8003736:	231b      	movs	r3, #27
 8003738:	2218      	movs	r2, #24
 800373a:	189b      	adds	r3, r3, r2
 800373c:	19db      	adds	r3, r3, r7
 800373e:	781b      	ldrb	r3, [r3, #0]
 8003740:	2b08      	cmp	r3, #8
 8003742:	d837      	bhi.n	80037b4 <UART_SetConfig+0x39c>
 8003744:	009a      	lsls	r2, r3, #2
 8003746:	4b10      	ldr	r3, [pc, #64]	; (8003788 <UART_SetConfig+0x370>)
 8003748:	18d3      	adds	r3, r2, r3
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800374e:	f7fe fd8d 	bl	800226c <HAL_RCC_GetPCLK1Freq>
 8003752:	0003      	movs	r3, r0
 8003754:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003756:	e036      	b.n	80037c6 <UART_SetConfig+0x3ae>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003758:	f7fe fd9e 	bl	8002298 <HAL_RCC_GetPCLK2Freq>
 800375c:	0003      	movs	r3, r0
 800375e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003760:	e031      	b.n	80037c6 <UART_SetConfig+0x3ae>
 8003762:	46c0      	nop			; (mov r8, r8)
 8003764:	efff69f3 	.word	0xefff69f3
 8003768:	ffffcfff 	.word	0xffffcfff
 800376c:	40004800 	.word	0x40004800
 8003770:	fffff4ff 	.word	0xfffff4ff
 8003774:	40013800 	.word	0x40013800
 8003778:	40021000 	.word	0x40021000
 800377c:	40004400 	.word	0x40004400
 8003780:	003d0900 	.word	0x003d0900
 8003784:	00f42400 	.word	0x00f42400
 8003788:	08005668 	.word	0x08005668
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800378c:	4b60      	ldr	r3, [pc, #384]	; (8003910 <UART_SetConfig+0x4f8>)
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	2210      	movs	r2, #16
 8003792:	4013      	ands	r3, r2
 8003794:	d002      	beq.n	800379c <UART_SetConfig+0x384>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8003796:	4b5f      	ldr	r3, [pc, #380]	; (8003914 <UART_SetConfig+0x4fc>)
 8003798:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800379a:	e014      	b.n	80037c6 <UART_SetConfig+0x3ae>
          pclk = (uint32_t) HSI_VALUE;
 800379c:	4b5e      	ldr	r3, [pc, #376]	; (8003918 <UART_SetConfig+0x500>)
 800379e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80037a0:	e011      	b.n	80037c6 <UART_SetConfig+0x3ae>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80037a2:	f7fe fcb3 	bl	800210c <HAL_RCC_GetSysClockFreq>
 80037a6:	0003      	movs	r3, r0
 80037a8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80037aa:	e00c      	b.n	80037c6 <UART_SetConfig+0x3ae>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80037ac:	2380      	movs	r3, #128	; 0x80
 80037ae:	021b      	lsls	r3, r3, #8
 80037b0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80037b2:	e008      	b.n	80037c6 <UART_SetConfig+0x3ae>
      default:
        pclk = 0U;
 80037b4:	2300      	movs	r3, #0
 80037b6:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 80037b8:	231a      	movs	r3, #26
 80037ba:	2218      	movs	r2, #24
 80037bc:	189b      	adds	r3, r3, r2
 80037be:	19db      	adds	r3, r3, r7
 80037c0:	2201      	movs	r2, #1
 80037c2:	701a      	strb	r2, [r3, #0]
        break;
 80037c4:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80037c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d100      	bne.n	80037ce <UART_SetConfig+0x3b6>
 80037cc:	e091      	b.n	80038f2 <UART_SetConfig+0x4da>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80037ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037d0:	005a      	lsls	r2, r3, #1
 80037d2:	69fb      	ldr	r3, [r7, #28]
 80037d4:	685b      	ldr	r3, [r3, #4]
 80037d6:	085b      	lsrs	r3, r3, #1
 80037d8:	18d2      	adds	r2, r2, r3
 80037da:	69fb      	ldr	r3, [r7, #28]
 80037dc:	685b      	ldr	r3, [r3, #4]
 80037de:	0019      	movs	r1, r3
 80037e0:	0010      	movs	r0, r2
 80037e2:	f7fc fca3 	bl	800012c <__udivsi3>
 80037e6:	0003      	movs	r3, r0
 80037e8:	b29b      	uxth	r3, r3
 80037ea:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80037ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037ee:	2b0f      	cmp	r3, #15
 80037f0:	d921      	bls.n	8003836 <UART_SetConfig+0x41e>
 80037f2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80037f4:	2380      	movs	r3, #128	; 0x80
 80037f6:	025b      	lsls	r3, r3, #9
 80037f8:	429a      	cmp	r2, r3
 80037fa:	d21c      	bcs.n	8003836 <UART_SetConfig+0x41e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80037fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037fe:	b29a      	uxth	r2, r3
 8003800:	200e      	movs	r0, #14
 8003802:	2418      	movs	r4, #24
 8003804:	1903      	adds	r3, r0, r4
 8003806:	19db      	adds	r3, r3, r7
 8003808:	210f      	movs	r1, #15
 800380a:	438a      	bics	r2, r1
 800380c:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800380e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003810:	085b      	lsrs	r3, r3, #1
 8003812:	b29b      	uxth	r3, r3
 8003814:	2207      	movs	r2, #7
 8003816:	4013      	ands	r3, r2
 8003818:	b299      	uxth	r1, r3
 800381a:	1903      	adds	r3, r0, r4
 800381c:	19db      	adds	r3, r3, r7
 800381e:	1902      	adds	r2, r0, r4
 8003820:	19d2      	adds	r2, r2, r7
 8003822:	8812      	ldrh	r2, [r2, #0]
 8003824:	430a      	orrs	r2, r1
 8003826:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8003828:	69fb      	ldr	r3, [r7, #28]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	1902      	adds	r2, r0, r4
 800382e:	19d2      	adds	r2, r2, r7
 8003830:	8812      	ldrh	r2, [r2, #0]
 8003832:	60da      	str	r2, [r3, #12]
 8003834:	e05d      	b.n	80038f2 <UART_SetConfig+0x4da>
      }
      else
      {
        ret = HAL_ERROR;
 8003836:	231a      	movs	r3, #26
 8003838:	2218      	movs	r2, #24
 800383a:	189b      	adds	r3, r3, r2
 800383c:	19db      	adds	r3, r3, r7
 800383e:	2201      	movs	r2, #1
 8003840:	701a      	strb	r2, [r3, #0]
 8003842:	e056      	b.n	80038f2 <UART_SetConfig+0x4da>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003844:	231b      	movs	r3, #27
 8003846:	2218      	movs	r2, #24
 8003848:	189b      	adds	r3, r3, r2
 800384a:	19db      	adds	r3, r3, r7
 800384c:	781b      	ldrb	r3, [r3, #0]
 800384e:	2b08      	cmp	r3, #8
 8003850:	d822      	bhi.n	8003898 <UART_SetConfig+0x480>
 8003852:	009a      	lsls	r2, r3, #2
 8003854:	4b31      	ldr	r3, [pc, #196]	; (800391c <UART_SetConfig+0x504>)
 8003856:	18d3      	adds	r3, r2, r3
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800385c:	f7fe fd06 	bl	800226c <HAL_RCC_GetPCLK1Freq>
 8003860:	0003      	movs	r3, r0
 8003862:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003864:	e021      	b.n	80038aa <UART_SetConfig+0x492>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003866:	f7fe fd17 	bl	8002298 <HAL_RCC_GetPCLK2Freq>
 800386a:	0003      	movs	r3, r0
 800386c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800386e:	e01c      	b.n	80038aa <UART_SetConfig+0x492>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003870:	4b27      	ldr	r3, [pc, #156]	; (8003910 <UART_SetConfig+0x4f8>)
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	2210      	movs	r2, #16
 8003876:	4013      	ands	r3, r2
 8003878:	d002      	beq.n	8003880 <UART_SetConfig+0x468>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 800387a:	4b26      	ldr	r3, [pc, #152]	; (8003914 <UART_SetConfig+0x4fc>)
 800387c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800387e:	e014      	b.n	80038aa <UART_SetConfig+0x492>
          pclk = (uint32_t) HSI_VALUE;
 8003880:	4b25      	ldr	r3, [pc, #148]	; (8003918 <UART_SetConfig+0x500>)
 8003882:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003884:	e011      	b.n	80038aa <UART_SetConfig+0x492>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003886:	f7fe fc41 	bl	800210c <HAL_RCC_GetSysClockFreq>
 800388a:	0003      	movs	r3, r0
 800388c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800388e:	e00c      	b.n	80038aa <UART_SetConfig+0x492>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003890:	2380      	movs	r3, #128	; 0x80
 8003892:	021b      	lsls	r3, r3, #8
 8003894:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003896:	e008      	b.n	80038aa <UART_SetConfig+0x492>
      default:
        pclk = 0U;
 8003898:	2300      	movs	r3, #0
 800389a:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800389c:	231a      	movs	r3, #26
 800389e:	2218      	movs	r2, #24
 80038a0:	189b      	adds	r3, r3, r2
 80038a2:	19db      	adds	r3, r3, r7
 80038a4:	2201      	movs	r2, #1
 80038a6:	701a      	strb	r2, [r3, #0]
        break;
 80038a8:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 80038aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d020      	beq.n	80038f2 <UART_SetConfig+0x4da>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80038b0:	69fb      	ldr	r3, [r7, #28]
 80038b2:	685b      	ldr	r3, [r3, #4]
 80038b4:	085a      	lsrs	r2, r3, #1
 80038b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038b8:	18d2      	adds	r2, r2, r3
 80038ba:	69fb      	ldr	r3, [r7, #28]
 80038bc:	685b      	ldr	r3, [r3, #4]
 80038be:	0019      	movs	r1, r3
 80038c0:	0010      	movs	r0, r2
 80038c2:	f7fc fc33 	bl	800012c <__udivsi3>
 80038c6:	0003      	movs	r3, r0
 80038c8:	b29b      	uxth	r3, r3
 80038ca:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80038cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038ce:	2b0f      	cmp	r3, #15
 80038d0:	d909      	bls.n	80038e6 <UART_SetConfig+0x4ce>
 80038d2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80038d4:	2380      	movs	r3, #128	; 0x80
 80038d6:	025b      	lsls	r3, r3, #9
 80038d8:	429a      	cmp	r2, r3
 80038da:	d204      	bcs.n	80038e6 <UART_SetConfig+0x4ce>
      {
        huart->Instance->BRR = usartdiv;
 80038dc:	69fb      	ldr	r3, [r7, #28]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80038e2:	60da      	str	r2, [r3, #12]
 80038e4:	e005      	b.n	80038f2 <UART_SetConfig+0x4da>
      }
      else
      {
        ret = HAL_ERROR;
 80038e6:	231a      	movs	r3, #26
 80038e8:	2218      	movs	r2, #24
 80038ea:	189b      	adds	r3, r3, r2
 80038ec:	19db      	adds	r3, r3, r7
 80038ee:	2201      	movs	r2, #1
 80038f0:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80038f2:	69fb      	ldr	r3, [r7, #28]
 80038f4:	2200      	movs	r2, #0
 80038f6:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80038f8:	69fb      	ldr	r3, [r7, #28]
 80038fa:	2200      	movs	r2, #0
 80038fc:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80038fe:	231a      	movs	r3, #26
 8003900:	2218      	movs	r2, #24
 8003902:	189b      	adds	r3, r3, r2
 8003904:	19db      	adds	r3, r3, r7
 8003906:	781b      	ldrb	r3, [r3, #0]
}
 8003908:	0018      	movs	r0, r3
 800390a:	46bd      	mov	sp, r7
 800390c:	b00e      	add	sp, #56	; 0x38
 800390e:	bdb0      	pop	{r4, r5, r7, pc}
 8003910:	40021000 	.word	0x40021000
 8003914:	003d0900 	.word	0x003d0900
 8003918:	00f42400 	.word	0x00f42400
 800391c:	0800568c 	.word	0x0800568c

08003920 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003920:	b580      	push	{r7, lr}
 8003922:	b082      	sub	sp, #8
 8003924:	af00      	add	r7, sp, #0
 8003926:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800392c:	2201      	movs	r2, #1
 800392e:	4013      	ands	r3, r2
 8003930:	d00b      	beq.n	800394a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	685b      	ldr	r3, [r3, #4]
 8003938:	4a4a      	ldr	r2, [pc, #296]	; (8003a64 <UART_AdvFeatureConfig+0x144>)
 800393a:	4013      	ands	r3, r2
 800393c:	0019      	movs	r1, r3
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	430a      	orrs	r2, r1
 8003948:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800394e:	2202      	movs	r2, #2
 8003950:	4013      	ands	r3, r2
 8003952:	d00b      	beq.n	800396c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	685b      	ldr	r3, [r3, #4]
 800395a:	4a43      	ldr	r2, [pc, #268]	; (8003a68 <UART_AdvFeatureConfig+0x148>)
 800395c:	4013      	ands	r3, r2
 800395e:	0019      	movs	r1, r3
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	430a      	orrs	r2, r1
 800396a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003970:	2204      	movs	r2, #4
 8003972:	4013      	ands	r3, r2
 8003974:	d00b      	beq.n	800398e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	685b      	ldr	r3, [r3, #4]
 800397c:	4a3b      	ldr	r2, [pc, #236]	; (8003a6c <UART_AdvFeatureConfig+0x14c>)
 800397e:	4013      	ands	r3, r2
 8003980:	0019      	movs	r1, r3
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	430a      	orrs	r2, r1
 800398c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003992:	2208      	movs	r2, #8
 8003994:	4013      	ands	r3, r2
 8003996:	d00b      	beq.n	80039b0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	685b      	ldr	r3, [r3, #4]
 800399e:	4a34      	ldr	r2, [pc, #208]	; (8003a70 <UART_AdvFeatureConfig+0x150>)
 80039a0:	4013      	ands	r3, r2
 80039a2:	0019      	movs	r1, r3
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	430a      	orrs	r2, r1
 80039ae:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039b4:	2210      	movs	r2, #16
 80039b6:	4013      	ands	r3, r2
 80039b8:	d00b      	beq.n	80039d2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	689b      	ldr	r3, [r3, #8]
 80039c0:	4a2c      	ldr	r2, [pc, #176]	; (8003a74 <UART_AdvFeatureConfig+0x154>)
 80039c2:	4013      	ands	r3, r2
 80039c4:	0019      	movs	r1, r3
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	430a      	orrs	r2, r1
 80039d0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039d6:	2220      	movs	r2, #32
 80039d8:	4013      	ands	r3, r2
 80039da:	d00b      	beq.n	80039f4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	689b      	ldr	r3, [r3, #8]
 80039e2:	4a25      	ldr	r2, [pc, #148]	; (8003a78 <UART_AdvFeatureConfig+0x158>)
 80039e4:	4013      	ands	r3, r2
 80039e6:	0019      	movs	r1, r3
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	430a      	orrs	r2, r1
 80039f2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039f8:	2240      	movs	r2, #64	; 0x40
 80039fa:	4013      	ands	r3, r2
 80039fc:	d01d      	beq.n	8003a3a <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	685b      	ldr	r3, [r3, #4]
 8003a04:	4a1d      	ldr	r2, [pc, #116]	; (8003a7c <UART_AdvFeatureConfig+0x15c>)
 8003a06:	4013      	ands	r3, r2
 8003a08:	0019      	movs	r1, r3
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	430a      	orrs	r2, r1
 8003a14:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003a1a:	2380      	movs	r3, #128	; 0x80
 8003a1c:	035b      	lsls	r3, r3, #13
 8003a1e:	429a      	cmp	r2, r3
 8003a20:	d10b      	bne.n	8003a3a <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	685b      	ldr	r3, [r3, #4]
 8003a28:	4a15      	ldr	r2, [pc, #84]	; (8003a80 <UART_AdvFeatureConfig+0x160>)
 8003a2a:	4013      	ands	r3, r2
 8003a2c:	0019      	movs	r1, r3
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	430a      	orrs	r2, r1
 8003a38:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a3e:	2280      	movs	r2, #128	; 0x80
 8003a40:	4013      	ands	r3, r2
 8003a42:	d00b      	beq.n	8003a5c <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	685b      	ldr	r3, [r3, #4]
 8003a4a:	4a0e      	ldr	r2, [pc, #56]	; (8003a84 <UART_AdvFeatureConfig+0x164>)
 8003a4c:	4013      	ands	r3, r2
 8003a4e:	0019      	movs	r1, r3
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	430a      	orrs	r2, r1
 8003a5a:	605a      	str	r2, [r3, #4]
  }
}
 8003a5c:	46c0      	nop			; (mov r8, r8)
 8003a5e:	46bd      	mov	sp, r7
 8003a60:	b002      	add	sp, #8
 8003a62:	bd80      	pop	{r7, pc}
 8003a64:	fffdffff 	.word	0xfffdffff
 8003a68:	fffeffff 	.word	0xfffeffff
 8003a6c:	fffbffff 	.word	0xfffbffff
 8003a70:	ffff7fff 	.word	0xffff7fff
 8003a74:	ffffefff 	.word	0xffffefff
 8003a78:	ffffdfff 	.word	0xffffdfff
 8003a7c:	ffefffff 	.word	0xffefffff
 8003a80:	ff9fffff 	.word	0xff9fffff
 8003a84:	fff7ffff 	.word	0xfff7ffff

08003a88 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003a88:	b580      	push	{r7, lr}
 8003a8a:	b086      	sub	sp, #24
 8003a8c:	af02      	add	r7, sp, #8
 8003a8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	2280      	movs	r2, #128	; 0x80
 8003a94:	2100      	movs	r1, #0
 8003a96:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003a98:	f7fd f97e 	bl	8000d98 <HAL_GetTick>
 8003a9c:	0003      	movs	r3, r0
 8003a9e:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	2208      	movs	r2, #8
 8003aa8:	4013      	ands	r3, r2
 8003aaa:	2b08      	cmp	r3, #8
 8003aac:	d10c      	bne.n	8003ac8 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	2280      	movs	r2, #128	; 0x80
 8003ab2:	0391      	lsls	r1, r2, #14
 8003ab4:	6878      	ldr	r0, [r7, #4]
 8003ab6:	4a17      	ldr	r2, [pc, #92]	; (8003b14 <UART_CheckIdleState+0x8c>)
 8003ab8:	9200      	str	r2, [sp, #0]
 8003aba:	2200      	movs	r2, #0
 8003abc:	f000 f82c 	bl	8003b18 <UART_WaitOnFlagUntilTimeout>
 8003ac0:	1e03      	subs	r3, r0, #0
 8003ac2:	d001      	beq.n	8003ac8 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003ac4:	2303      	movs	r3, #3
 8003ac6:	e021      	b.n	8003b0c <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	2204      	movs	r2, #4
 8003ad0:	4013      	ands	r3, r2
 8003ad2:	2b04      	cmp	r3, #4
 8003ad4:	d10c      	bne.n	8003af0 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	2280      	movs	r2, #128	; 0x80
 8003ada:	03d1      	lsls	r1, r2, #15
 8003adc:	6878      	ldr	r0, [r7, #4]
 8003ade:	4a0d      	ldr	r2, [pc, #52]	; (8003b14 <UART_CheckIdleState+0x8c>)
 8003ae0:	9200      	str	r2, [sp, #0]
 8003ae2:	2200      	movs	r2, #0
 8003ae4:	f000 f818 	bl	8003b18 <UART_WaitOnFlagUntilTimeout>
 8003ae8:	1e03      	subs	r3, r0, #0
 8003aea:	d001      	beq.n	8003af0 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003aec:	2303      	movs	r3, #3
 8003aee:	e00d      	b.n	8003b0c <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	2220      	movs	r2, #32
 8003af4:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	2220      	movs	r2, #32
 8003afa:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	2200      	movs	r2, #0
 8003b00:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	2274      	movs	r2, #116	; 0x74
 8003b06:	2100      	movs	r1, #0
 8003b08:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003b0a:	2300      	movs	r3, #0
}
 8003b0c:	0018      	movs	r0, r3
 8003b0e:	46bd      	mov	sp, r7
 8003b10:	b004      	add	sp, #16
 8003b12:	bd80      	pop	{r7, pc}
 8003b14:	01ffffff 	.word	0x01ffffff

08003b18 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003b18:	b580      	push	{r7, lr}
 8003b1a:	b094      	sub	sp, #80	; 0x50
 8003b1c:	af00      	add	r7, sp, #0
 8003b1e:	60f8      	str	r0, [r7, #12]
 8003b20:	60b9      	str	r1, [r7, #8]
 8003b22:	603b      	str	r3, [r7, #0]
 8003b24:	1dfb      	adds	r3, r7, #7
 8003b26:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003b28:	e0a3      	b.n	8003c72 <UART_WaitOnFlagUntilTimeout+0x15a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003b2a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003b2c:	3301      	adds	r3, #1
 8003b2e:	d100      	bne.n	8003b32 <UART_WaitOnFlagUntilTimeout+0x1a>
 8003b30:	e09f      	b.n	8003c72 <UART_WaitOnFlagUntilTimeout+0x15a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b32:	f7fd f931 	bl	8000d98 <HAL_GetTick>
 8003b36:	0002      	movs	r2, r0
 8003b38:	683b      	ldr	r3, [r7, #0]
 8003b3a:	1ad3      	subs	r3, r2, r3
 8003b3c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003b3e:	429a      	cmp	r2, r3
 8003b40:	d302      	bcc.n	8003b48 <UART_WaitOnFlagUntilTimeout+0x30>
 8003b42:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d13d      	bne.n	8003bc4 <UART_WaitOnFlagUntilTimeout+0xac>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003b48:	f3ef 8310 	mrs	r3, PRIMASK
 8003b4c:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8003b4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003b50:	647b      	str	r3, [r7, #68]	; 0x44
 8003b52:	2301      	movs	r3, #1
 8003b54:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b58:	f383 8810 	msr	PRIMASK, r3
}
 8003b5c:	46c0      	nop			; (mov r8, r8)
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	681a      	ldr	r2, [r3, #0]
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	494c      	ldr	r1, [pc, #304]	; (8003c9c <UART_WaitOnFlagUntilTimeout+0x184>)
 8003b6a:	400a      	ands	r2, r1
 8003b6c:	601a      	str	r2, [r3, #0]
 8003b6e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003b70:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b74:	f383 8810 	msr	PRIMASK, r3
}
 8003b78:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003b7a:	f3ef 8310 	mrs	r3, PRIMASK
 8003b7e:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8003b80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b82:	643b      	str	r3, [r7, #64]	; 0x40
 8003b84:	2301      	movs	r3, #1
 8003b86:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b8a:	f383 8810 	msr	PRIMASK, r3
}
 8003b8e:	46c0      	nop			; (mov r8, r8)
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	689a      	ldr	r2, [r3, #8]
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	2101      	movs	r1, #1
 8003b9c:	438a      	bics	r2, r1
 8003b9e:	609a      	str	r2, [r3, #8]
 8003ba0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003ba2:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003ba4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003ba6:	f383 8810 	msr	PRIMASK, r3
}
 8003baa:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	2220      	movs	r2, #32
 8003bb0:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	2220      	movs	r2, #32
 8003bb6:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	2274      	movs	r2, #116	; 0x74
 8003bbc:	2100      	movs	r1, #0
 8003bbe:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8003bc0:	2303      	movs	r3, #3
 8003bc2:	e067      	b.n	8003c94 <UART_WaitOnFlagUntilTimeout+0x17c>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	2204      	movs	r2, #4
 8003bcc:	4013      	ands	r3, r2
 8003bce:	d050      	beq.n	8003c72 <UART_WaitOnFlagUntilTimeout+0x15a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	69da      	ldr	r2, [r3, #28]
 8003bd6:	2380      	movs	r3, #128	; 0x80
 8003bd8:	011b      	lsls	r3, r3, #4
 8003bda:	401a      	ands	r2, r3
 8003bdc:	2380      	movs	r3, #128	; 0x80
 8003bde:	011b      	lsls	r3, r3, #4
 8003be0:	429a      	cmp	r2, r3
 8003be2:	d146      	bne.n	8003c72 <UART_WaitOnFlagUntilTimeout+0x15a>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	2280      	movs	r2, #128	; 0x80
 8003bea:	0112      	lsls	r2, r2, #4
 8003bec:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003bee:	f3ef 8310 	mrs	r3, PRIMASK
 8003bf2:	613b      	str	r3, [r7, #16]
  return(result);
 8003bf4:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003bf6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003bf8:	2301      	movs	r3, #1
 8003bfa:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003bfc:	697b      	ldr	r3, [r7, #20]
 8003bfe:	f383 8810 	msr	PRIMASK, r3
}
 8003c02:	46c0      	nop			; (mov r8, r8)
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	681a      	ldr	r2, [r3, #0]
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	4923      	ldr	r1, [pc, #140]	; (8003c9c <UART_WaitOnFlagUntilTimeout+0x184>)
 8003c10:	400a      	ands	r2, r1
 8003c12:	601a      	str	r2, [r3, #0]
 8003c14:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003c16:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c18:	69bb      	ldr	r3, [r7, #24]
 8003c1a:	f383 8810 	msr	PRIMASK, r3
}
 8003c1e:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003c20:	f3ef 8310 	mrs	r3, PRIMASK
 8003c24:	61fb      	str	r3, [r7, #28]
  return(result);
 8003c26:	69fb      	ldr	r3, [r7, #28]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c28:	64bb      	str	r3, [r7, #72]	; 0x48
 8003c2a:	2301      	movs	r3, #1
 8003c2c:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c2e:	6a3b      	ldr	r3, [r7, #32]
 8003c30:	f383 8810 	msr	PRIMASK, r3
}
 8003c34:	46c0      	nop			; (mov r8, r8)
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	689a      	ldr	r2, [r3, #8]
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	2101      	movs	r1, #1
 8003c42:	438a      	bics	r2, r1
 8003c44:	609a      	str	r2, [r3, #8]
 8003c46:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003c48:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c4c:	f383 8810 	msr	PRIMASK, r3
}
 8003c50:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	2220      	movs	r2, #32
 8003c56:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	2220      	movs	r2, #32
 8003c5c:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	2280      	movs	r2, #128	; 0x80
 8003c62:	2120      	movs	r1, #32
 8003c64:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	2274      	movs	r2, #116	; 0x74
 8003c6a:	2100      	movs	r1, #0
 8003c6c:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8003c6e:	2303      	movs	r3, #3
 8003c70:	e010      	b.n	8003c94 <UART_WaitOnFlagUntilTimeout+0x17c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	69db      	ldr	r3, [r3, #28]
 8003c78:	68ba      	ldr	r2, [r7, #8]
 8003c7a:	4013      	ands	r3, r2
 8003c7c:	68ba      	ldr	r2, [r7, #8]
 8003c7e:	1ad3      	subs	r3, r2, r3
 8003c80:	425a      	negs	r2, r3
 8003c82:	4153      	adcs	r3, r2
 8003c84:	b2db      	uxtb	r3, r3
 8003c86:	001a      	movs	r2, r3
 8003c88:	1dfb      	adds	r3, r7, #7
 8003c8a:	781b      	ldrb	r3, [r3, #0]
 8003c8c:	429a      	cmp	r2, r3
 8003c8e:	d100      	bne.n	8003c92 <UART_WaitOnFlagUntilTimeout+0x17a>
 8003c90:	e74b      	b.n	8003b2a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003c92:	2300      	movs	r3, #0
}
 8003c94:	0018      	movs	r0, r3
 8003c96:	46bd      	mov	sp, r7
 8003c98:	b014      	add	sp, #80	; 0x50
 8003c9a:	bd80      	pop	{r7, pc}
 8003c9c:	fffffe5f 	.word	0xfffffe5f

08003ca0 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003ca0:	b580      	push	{r7, lr}
 8003ca2:	b090      	sub	sp, #64	; 0x40
 8003ca4:	af00      	add	r7, sp, #0
 8003ca6:	60f8      	str	r0, [r7, #12]
 8003ca8:	60b9      	str	r1, [r7, #8]
 8003caa:	1dbb      	adds	r3, r7, #6
 8003cac:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr = pData;
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	68ba      	ldr	r2, [r7, #8]
 8003cb2:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize = Size;
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	1dba      	adds	r2, r7, #6
 8003cb8:	2158      	movs	r1, #88	; 0x58
 8003cba:	8812      	ldrh	r2, [r2, #0]
 8003cbc:	525a      	strh	r2, [r3, r1]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	2280      	movs	r2, #128	; 0x80
 8003cc2:	2100      	movs	r1, #0
 8003cc4:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	2222      	movs	r2, #34	; 0x22
 8003cca:	67da      	str	r2, [r3, #124]	; 0x7c

  if (huart->hdmarx != NULL)
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d02b      	beq.n	8003d2c <UART_Start_Receive_DMA+0x8c>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cd8:	4a3f      	ldr	r2, [pc, #252]	; (8003dd8 <UART_Start_Receive_DMA+0x138>)
 8003cda:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ce0:	4a3e      	ldr	r2, [pc, #248]	; (8003ddc <UART_Start_Receive_DMA+0x13c>)
 8003ce2:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ce8:	4a3d      	ldr	r2, [pc, #244]	; (8003de0 <UART_Start_Receive_DMA+0x140>)
 8003cea:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cf0:	2200      	movs	r2, #0
 8003cf2:	639a      	str	r2, [r3, #56]	; 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	6f18      	ldr	r0, [r3, #112]	; 0x70
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	3324      	adds	r3, #36	; 0x24
 8003cfe:	0019      	movs	r1, r3
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d04:	001a      	movs	r2, r3
 8003d06:	1dbb      	adds	r3, r7, #6
 8003d08:	881b      	ldrh	r3, [r3, #0]
 8003d0a:	f7fd f9a5 	bl	8001058 <HAL_DMA_Start_IT>
 8003d0e:	1e03      	subs	r3, r0, #0
 8003d10:	d00c      	beq.n	8003d2c <UART_Start_Receive_DMA+0x8c>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	2280      	movs	r2, #128	; 0x80
 8003d16:	2110      	movs	r1, #16
 8003d18:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	2274      	movs	r2, #116	; 0x74
 8003d1e:	2100      	movs	r1, #0
 8003d20:	5499      	strb	r1, [r3, r2]

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	2220      	movs	r2, #32
 8003d26:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_ERROR;
 8003d28:	2301      	movs	r3, #1
 8003d2a:	e050      	b.n	8003dce <UART_Start_Receive_DMA+0x12e>
    }
  }
  __HAL_UNLOCK(huart);
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	2274      	movs	r2, #116	; 0x74
 8003d30:	2100      	movs	r1, #0
 8003d32:	5499      	strb	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003d34:	f3ef 8310 	mrs	r3, PRIMASK
 8003d38:	613b      	str	r3, [r7, #16]
  return(result);
 8003d3a:	693b      	ldr	r3, [r7, #16]

  /* Enable the UART Parity Error Interrupt */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003d3c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003d3e:	2301      	movs	r3, #1
 8003d40:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d42:	697b      	ldr	r3, [r7, #20]
 8003d44:	f383 8810 	msr	PRIMASK, r3
}
 8003d48:	46c0      	nop			; (mov r8, r8)
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	681a      	ldr	r2, [r3, #0]
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	2180      	movs	r1, #128	; 0x80
 8003d56:	0049      	lsls	r1, r1, #1
 8003d58:	430a      	orrs	r2, r1
 8003d5a:	601a      	str	r2, [r3, #0]
 8003d5c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003d5e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d60:	69bb      	ldr	r3, [r7, #24]
 8003d62:	f383 8810 	msr	PRIMASK, r3
}
 8003d66:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003d68:	f3ef 8310 	mrs	r3, PRIMASK
 8003d6c:	61fb      	str	r3, [r7, #28]
  return(result);
 8003d6e:	69fb      	ldr	r3, [r7, #28]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d70:	63bb      	str	r3, [r7, #56]	; 0x38
 8003d72:	2301      	movs	r3, #1
 8003d74:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d76:	6a3b      	ldr	r3, [r7, #32]
 8003d78:	f383 8810 	msr	PRIMASK, r3
}
 8003d7c:	46c0      	nop			; (mov r8, r8)
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	689a      	ldr	r2, [r3, #8]
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	2101      	movs	r1, #1
 8003d8a:	430a      	orrs	r2, r1
 8003d8c:	609a      	str	r2, [r3, #8]
 8003d8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d90:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d94:	f383 8810 	msr	PRIMASK, r3
}
 8003d98:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003d9a:	f3ef 8310 	mrs	r3, PRIMASK
 8003d9e:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8003da0:	6abb      	ldr	r3, [r7, #40]	; 0x28

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003da2:	637b      	str	r3, [r7, #52]	; 0x34
 8003da4:	2301      	movs	r3, #1
 8003da6:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003da8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003daa:	f383 8810 	msr	PRIMASK, r3
}
 8003dae:	46c0      	nop			; (mov r8, r8)
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	689a      	ldr	r2, [r3, #8]
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	2140      	movs	r1, #64	; 0x40
 8003dbc:	430a      	orrs	r2, r1
 8003dbe:	609a      	str	r2, [r3, #8]
 8003dc0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003dc2:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003dc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003dc6:	f383 8810 	msr	PRIMASK, r3
}
 8003dca:	46c0      	nop			; (mov r8, r8)

  return HAL_OK;
 8003dcc:	2300      	movs	r3, #0
}
 8003dce:	0018      	movs	r0, r3
 8003dd0:	46bd      	mov	sp, r7
 8003dd2:	b010      	add	sp, #64	; 0x40
 8003dd4:	bd80      	pop	{r7, pc}
 8003dd6:	46c0      	nop			; (mov r8, r8)
 8003dd8:	08003ef1 	.word	0x08003ef1
 8003ddc:	08004019 	.word	0x08004019
 8003de0:	08004055 	.word	0x08004055

08003de4 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8003de4:	b580      	push	{r7, lr}
 8003de6:	b086      	sub	sp, #24
 8003de8:	af00      	add	r7, sp, #0
 8003dea:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003dec:	f3ef 8310 	mrs	r3, PRIMASK
 8003df0:	60bb      	str	r3, [r7, #8]
  return(result);
 8003df2:	68bb      	ldr	r3, [r7, #8]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8003df4:	617b      	str	r3, [r7, #20]
 8003df6:	2301      	movs	r3, #1
 8003df8:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	f383 8810 	msr	PRIMASK, r3
}
 8003e00:	46c0      	nop			; (mov r8, r8)
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	681a      	ldr	r2, [r3, #0]
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	21c0      	movs	r1, #192	; 0xc0
 8003e0e:	438a      	bics	r2, r1
 8003e10:	601a      	str	r2, [r3, #0]
 8003e12:	697b      	ldr	r3, [r7, #20]
 8003e14:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e16:	693b      	ldr	r3, [r7, #16]
 8003e18:	f383 8810 	msr	PRIMASK, r3
}
 8003e1c:	46c0      	nop			; (mov r8, r8)

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	2220      	movs	r2, #32
 8003e22:	679a      	str	r2, [r3, #120]	; 0x78
}
 8003e24:	46c0      	nop			; (mov r8, r8)
 8003e26:	46bd      	mov	sp, r7
 8003e28:	b006      	add	sp, #24
 8003e2a:	bd80      	pop	{r7, pc}

08003e2c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003e2c:	b580      	push	{r7, lr}
 8003e2e:	b08e      	sub	sp, #56	; 0x38
 8003e30:	af00      	add	r7, sp, #0
 8003e32:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003e34:	f3ef 8310 	mrs	r3, PRIMASK
 8003e38:	617b      	str	r3, [r7, #20]
  return(result);
 8003e3a:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003e3c:	637b      	str	r3, [r7, #52]	; 0x34
 8003e3e:	2301      	movs	r3, #1
 8003e40:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e42:	69bb      	ldr	r3, [r7, #24]
 8003e44:	f383 8810 	msr	PRIMASK, r3
}
 8003e48:	46c0      	nop			; (mov r8, r8)
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	681a      	ldr	r2, [r3, #0]
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	4925      	ldr	r1, [pc, #148]	; (8003eec <UART_EndRxTransfer+0xc0>)
 8003e56:	400a      	ands	r2, r1
 8003e58:	601a      	str	r2, [r3, #0]
 8003e5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e5c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e5e:	69fb      	ldr	r3, [r7, #28]
 8003e60:	f383 8810 	msr	PRIMASK, r3
}
 8003e64:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003e66:	f3ef 8310 	mrs	r3, PRIMASK
 8003e6a:	623b      	str	r3, [r7, #32]
  return(result);
 8003e6c:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e6e:	633b      	str	r3, [r7, #48]	; 0x30
 8003e70:	2301      	movs	r3, #1
 8003e72:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e76:	f383 8810 	msr	PRIMASK, r3
}
 8003e7a:	46c0      	nop			; (mov r8, r8)
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	689a      	ldr	r2, [r3, #8]
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	2101      	movs	r1, #1
 8003e88:	438a      	bics	r2, r1
 8003e8a:	609a      	str	r2, [r3, #8]
 8003e8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e8e:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e92:	f383 8810 	msr	PRIMASK, r3
}
 8003e96:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003e9c:	2b01      	cmp	r3, #1
 8003e9e:	d118      	bne.n	8003ed2 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003ea0:	f3ef 8310 	mrs	r3, PRIMASK
 8003ea4:	60bb      	str	r3, [r7, #8]
  return(result);
 8003ea6:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003ea8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003eaa:	2301      	movs	r3, #1
 8003eac:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	f383 8810 	msr	PRIMASK, r3
}
 8003eb4:	46c0      	nop			; (mov r8, r8)
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	681a      	ldr	r2, [r3, #0]
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	2110      	movs	r1, #16
 8003ec2:	438a      	bics	r2, r1
 8003ec4:	601a      	str	r2, [r3, #0]
 8003ec6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ec8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003eca:	693b      	ldr	r3, [r7, #16]
 8003ecc:	f383 8810 	msr	PRIMASK, r3
}
 8003ed0:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	2220      	movs	r2, #32
 8003ed6:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	2200      	movs	r2, #0
 8003edc:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	2200      	movs	r2, #0
 8003ee2:	665a      	str	r2, [r3, #100]	; 0x64
}
 8003ee4:	46c0      	nop			; (mov r8, r8)
 8003ee6:	46bd      	mov	sp, r7
 8003ee8:	b00e      	add	sp, #56	; 0x38
 8003eea:	bd80      	pop	{r7, pc}
 8003eec:	fffffedf 	.word	0xfffffedf

08003ef0 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8003ef0:	b580      	push	{r7, lr}
 8003ef2:	b094      	sub	sp, #80	; 0x50
 8003ef4:	af00      	add	r7, sp, #0
 8003ef6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003efc:	64fb      	str	r3, [r7, #76]	; 0x4c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	2220      	movs	r2, #32
 8003f06:	4013      	ands	r3, r2
 8003f08:	d16e      	bne.n	8003fe8 <UART_DMAReceiveCplt+0xf8>
  {
    huart->RxXferCount = 0U;
 8003f0a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003f0c:	225a      	movs	r2, #90	; 0x5a
 8003f0e:	2100      	movs	r1, #0
 8003f10:	5299      	strh	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003f12:	f3ef 8310 	mrs	r3, PRIMASK
 8003f16:	61bb      	str	r3, [r7, #24]
  return(result);
 8003f18:	69bb      	ldr	r3, [r7, #24]

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003f1a:	64bb      	str	r3, [r7, #72]	; 0x48
 8003f1c:	2301      	movs	r3, #1
 8003f1e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003f20:	69fb      	ldr	r3, [r7, #28]
 8003f22:	f383 8810 	msr	PRIMASK, r3
}
 8003f26:	46c0      	nop			; (mov r8, r8)
 8003f28:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	681a      	ldr	r2, [r3, #0]
 8003f2e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	4938      	ldr	r1, [pc, #224]	; (8004014 <UART_DMAReceiveCplt+0x124>)
 8003f34:	400a      	ands	r2, r1
 8003f36:	601a      	str	r2, [r3, #0]
 8003f38:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003f3a:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003f3c:	6a3b      	ldr	r3, [r7, #32]
 8003f3e:	f383 8810 	msr	PRIMASK, r3
}
 8003f42:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003f44:	f3ef 8310 	mrs	r3, PRIMASK
 8003f48:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8003f4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f4c:	647b      	str	r3, [r7, #68]	; 0x44
 8003f4e:	2301      	movs	r3, #1
 8003f50:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003f52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f54:	f383 8810 	msr	PRIMASK, r3
}
 8003f58:	46c0      	nop			; (mov r8, r8)
 8003f5a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	689a      	ldr	r2, [r3, #8]
 8003f60:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	2101      	movs	r1, #1
 8003f66:	438a      	bics	r2, r1
 8003f68:	609a      	str	r2, [r3, #8]
 8003f6a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003f6c:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003f6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f70:	f383 8810 	msr	PRIMASK, r3
}
 8003f74:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003f76:	f3ef 8310 	mrs	r3, PRIMASK
 8003f7a:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8003f7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003f7e:	643b      	str	r3, [r7, #64]	; 0x40
 8003f80:	2301      	movs	r3, #1
 8003f82:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003f84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f86:	f383 8810 	msr	PRIMASK, r3
}
 8003f8a:	46c0      	nop			; (mov r8, r8)
 8003f8c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	689a      	ldr	r2, [r3, #8]
 8003f92:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	2140      	movs	r1, #64	; 0x40
 8003f98:	438a      	bics	r2, r1
 8003f9a:	609a      	str	r2, [r3, #8]
 8003f9c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003f9e:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003fa0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003fa2:	f383 8810 	msr	PRIMASK, r3
}
 8003fa6:	46c0      	nop			; (mov r8, r8)

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003fa8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003faa:	2220      	movs	r2, #32
 8003fac:	67da      	str	r2, [r3, #124]	; 0x7c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003fae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003fb0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003fb2:	2b01      	cmp	r3, #1
 8003fb4:	d118      	bne.n	8003fe8 <UART_DMAReceiveCplt+0xf8>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003fb6:	f3ef 8310 	mrs	r3, PRIMASK
 8003fba:	60fb      	str	r3, [r7, #12]
  return(result);
 8003fbc:	68fb      	ldr	r3, [r7, #12]
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003fbe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003fc0:	2301      	movs	r3, #1
 8003fc2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003fc4:	693b      	ldr	r3, [r7, #16]
 8003fc6:	f383 8810 	msr	PRIMASK, r3
}
 8003fca:	46c0      	nop			; (mov r8, r8)
 8003fcc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	681a      	ldr	r2, [r3, #0]
 8003fd2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	2110      	movs	r1, #16
 8003fd8:	438a      	bics	r2, r1
 8003fda:	601a      	str	r2, [r3, #0]
 8003fdc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003fde:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003fe0:	697b      	ldr	r3, [r7, #20]
 8003fe2:	f383 8810 	msr	PRIMASK, r3
}
 8003fe6:	46c0      	nop			; (mov r8, r8)
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003fe8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003fea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003fec:	2b01      	cmp	r3, #1
 8003fee:	d108      	bne.n	8004002 <UART_DMAReceiveCplt+0x112>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003ff0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003ff2:	2258      	movs	r2, #88	; 0x58
 8003ff4:	5a9a      	ldrh	r2, [r3, r2]
 8003ff6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003ff8:	0011      	movs	r1, r2
 8003ffa:	0018      	movs	r0, r3
 8003ffc:	f7fc fc8e 	bl	800091c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004000:	e003      	b.n	800400a <UART_DMAReceiveCplt+0x11a>
    HAL_UART_RxCpltCallback(huart);
 8004002:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004004:	0018      	movs	r0, r3
 8004006:	f7ff f9ef 	bl	80033e8 <HAL_UART_RxCpltCallback>
}
 800400a:	46c0      	nop			; (mov r8, r8)
 800400c:	46bd      	mov	sp, r7
 800400e:	b014      	add	sp, #80	; 0x50
 8004010:	bd80      	pop	{r7, pc}
 8004012:	46c0      	nop			; (mov r8, r8)
 8004014:	fffffeff 	.word	0xfffffeff

08004018 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004018:	b580      	push	{r7, lr}
 800401a:	b084      	sub	sp, #16
 800401c:	af00      	add	r7, sp, #0
 800401e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004024:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800402a:	2b01      	cmp	r3, #1
 800402c:	d10a      	bne.n	8004044 <UART_DMARxHalfCplt+0x2c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	2258      	movs	r2, #88	; 0x58
 8004032:	5a9b      	ldrh	r3, [r3, r2]
 8004034:	085b      	lsrs	r3, r3, #1
 8004036:	b29a      	uxth	r2, r3
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	0011      	movs	r1, r2
 800403c:	0018      	movs	r0, r3
 800403e:	f7fc fc6d 	bl	800091c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004042:	e003      	b.n	800404c <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	0018      	movs	r0, r3
 8004048:	f7ff f9d6 	bl	80033f8 <HAL_UART_RxHalfCpltCallback>
}
 800404c:	46c0      	nop			; (mov r8, r8)
 800404e:	46bd      	mov	sp, r7
 8004050:	b004      	add	sp, #16
 8004052:	bd80      	pop	{r7, pc}

08004054 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8004054:	b580      	push	{r7, lr}
 8004056:	b086      	sub	sp, #24
 8004058:	af00      	add	r7, sp, #0
 800405a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004060:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8004062:	697b      	ldr	r3, [r7, #20]
 8004064:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004066:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8004068:	697b      	ldr	r3, [r7, #20]
 800406a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800406c:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800406e:	697b      	ldr	r3, [r7, #20]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	689b      	ldr	r3, [r3, #8]
 8004074:	2280      	movs	r2, #128	; 0x80
 8004076:	4013      	ands	r3, r2
 8004078:	2b80      	cmp	r3, #128	; 0x80
 800407a:	d10a      	bne.n	8004092 <UART_DMAError+0x3e>
 800407c:	693b      	ldr	r3, [r7, #16]
 800407e:	2b21      	cmp	r3, #33	; 0x21
 8004080:	d107      	bne.n	8004092 <UART_DMAError+0x3e>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8004082:	697b      	ldr	r3, [r7, #20]
 8004084:	2252      	movs	r2, #82	; 0x52
 8004086:	2100      	movs	r1, #0
 8004088:	5299      	strh	r1, [r3, r2]
    UART_EndTxTransfer(huart);
 800408a:	697b      	ldr	r3, [r7, #20]
 800408c:	0018      	movs	r0, r3
 800408e:	f7ff fea9 	bl	8003de4 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8004092:	697b      	ldr	r3, [r7, #20]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	689b      	ldr	r3, [r3, #8]
 8004098:	2240      	movs	r2, #64	; 0x40
 800409a:	4013      	ands	r3, r2
 800409c:	2b40      	cmp	r3, #64	; 0x40
 800409e:	d10a      	bne.n	80040b6 <UART_DMAError+0x62>
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	2b22      	cmp	r3, #34	; 0x22
 80040a4:	d107      	bne.n	80040b6 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 80040a6:	697b      	ldr	r3, [r7, #20]
 80040a8:	225a      	movs	r2, #90	; 0x5a
 80040aa:	2100      	movs	r1, #0
 80040ac:	5299      	strh	r1, [r3, r2]
    UART_EndRxTransfer(huart);
 80040ae:	697b      	ldr	r3, [r7, #20]
 80040b0:	0018      	movs	r0, r3
 80040b2:	f7ff febb 	bl	8003e2c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80040b6:	697b      	ldr	r3, [r7, #20]
 80040b8:	2280      	movs	r2, #128	; 0x80
 80040ba:	589b      	ldr	r3, [r3, r2]
 80040bc:	2210      	movs	r2, #16
 80040be:	431a      	orrs	r2, r3
 80040c0:	697b      	ldr	r3, [r7, #20]
 80040c2:	2180      	movs	r1, #128	; 0x80
 80040c4:	505a      	str	r2, [r3, r1]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80040c6:	697b      	ldr	r3, [r7, #20]
 80040c8:	0018      	movs	r0, r3
 80040ca:	f7ff f99d 	bl	8003408 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80040ce:	46c0      	nop			; (mov r8, r8)
 80040d0:	46bd      	mov	sp, r7
 80040d2:	b006      	add	sp, #24
 80040d4:	bd80      	pop	{r7, pc}

080040d6 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80040d6:	b580      	push	{r7, lr}
 80040d8:	b084      	sub	sp, #16
 80040da:	af00      	add	r7, sp, #0
 80040dc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040e2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	225a      	movs	r2, #90	; 0x5a
 80040e8:	2100      	movs	r1, #0
 80040ea:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	2252      	movs	r2, #82	; 0x52
 80040f0:	2100      	movs	r1, #0
 80040f2:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	0018      	movs	r0, r3
 80040f8:	f7ff f986 	bl	8003408 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80040fc:	46c0      	nop			; (mov r8, r8)
 80040fe:	46bd      	mov	sp, r7
 8004100:	b004      	add	sp, #16
 8004102:	bd80      	pop	{r7, pc}

08004104 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004104:	b580      	push	{r7, lr}
 8004106:	b086      	sub	sp, #24
 8004108:	af00      	add	r7, sp, #0
 800410a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800410c:	f3ef 8310 	mrs	r3, PRIMASK
 8004110:	60bb      	str	r3, [r7, #8]
  return(result);
 8004112:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004114:	617b      	str	r3, [r7, #20]
 8004116:	2301      	movs	r3, #1
 8004118:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	f383 8810 	msr	PRIMASK, r3
}
 8004120:	46c0      	nop			; (mov r8, r8)
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	681a      	ldr	r2, [r3, #0]
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	2140      	movs	r1, #64	; 0x40
 800412e:	438a      	bics	r2, r1
 8004130:	601a      	str	r2, [r3, #0]
 8004132:	697b      	ldr	r3, [r7, #20]
 8004134:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004136:	693b      	ldr	r3, [r7, #16]
 8004138:	f383 8810 	msr	PRIMASK, r3
}
 800413c:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	2220      	movs	r2, #32
 8004142:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	2200      	movs	r2, #0
 8004148:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	0018      	movs	r0, r3
 800414e:	f7ff f943 	bl	80033d8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004152:	46c0      	nop			; (mov r8, r8)
 8004154:	46bd      	mov	sp, r7
 8004156:	b006      	add	sp, #24
 8004158:	bd80      	pop	{r7, pc}

0800415a <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800415a:	b580      	push	{r7, lr}
 800415c:	b082      	sub	sp, #8
 800415e:	af00      	add	r7, sp, #0
 8004160:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8004162:	46c0      	nop			; (mov r8, r8)
 8004164:	46bd      	mov	sp, r7
 8004166:	b002      	add	sp, #8
 8004168:	bd80      	pop	{r7, pc}

0800416a <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800416a:	b5b0      	push	{r4, r5, r7, lr}
 800416c:	b08a      	sub	sp, #40	; 0x28
 800416e:	af00      	add	r7, sp, #0
 8004170:	60f8      	str	r0, [r7, #12]
 8004172:	60b9      	str	r1, [r7, #8]
 8004174:	1dbb      	adds	r3, r7, #6
 8004176:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800417c:	2b20      	cmp	r3, #32
 800417e:	d15e      	bne.n	800423e <HAL_UARTEx_ReceiveToIdle_DMA+0xd4>
  {
    if ((pData == NULL) || (Size == 0U))
 8004180:	68bb      	ldr	r3, [r7, #8]
 8004182:	2b00      	cmp	r3, #0
 8004184:	d003      	beq.n	800418e <HAL_UARTEx_ReceiveToIdle_DMA+0x24>
 8004186:	1dbb      	adds	r3, r7, #6
 8004188:	881b      	ldrh	r3, [r3, #0]
 800418a:	2b00      	cmp	r3, #0
 800418c:	d101      	bne.n	8004192 <HAL_UARTEx_ReceiveToIdle_DMA+0x28>
    {
      return HAL_ERROR;
 800418e:	2301      	movs	r3, #1
 8004190:	e056      	b.n	8004240 <HAL_UARTEx_ReceiveToIdle_DMA+0xd6>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a uint16_t frontier, as data copy from RDR will be
       handled by DMA from a uint16_t frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	689a      	ldr	r2, [r3, #8]
 8004196:	2380      	movs	r3, #128	; 0x80
 8004198:	015b      	lsls	r3, r3, #5
 800419a:	429a      	cmp	r2, r3
 800419c:	d109      	bne.n	80041b2 <HAL_UARTEx_ReceiveToIdle_DMA+0x48>
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	691b      	ldr	r3, [r3, #16]
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d105      	bne.n	80041b2 <HAL_UARTEx_ReceiveToIdle_DMA+0x48>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80041a6:	68bb      	ldr	r3, [r7, #8]
 80041a8:	2201      	movs	r2, #1
 80041aa:	4013      	ands	r3, r2
 80041ac:	d001      	beq.n	80041b2 <HAL_UARTEx_ReceiveToIdle_DMA+0x48>
      {
        return  HAL_ERROR;
 80041ae:	2301      	movs	r3, #1
 80041b0:	e046      	b.n	8004240 <HAL_UARTEx_ReceiveToIdle_DMA+0xd6>
      }
    }

    __HAL_LOCK(huart);
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	2274      	movs	r2, #116	; 0x74
 80041b6:	5c9b      	ldrb	r3, [r3, r2]
 80041b8:	2b01      	cmp	r3, #1
 80041ba:	d101      	bne.n	80041c0 <HAL_UARTEx_ReceiveToIdle_DMA+0x56>
 80041bc:	2302      	movs	r3, #2
 80041be:	e03f      	b.n	8004240 <HAL_UARTEx_ReceiveToIdle_DMA+0xd6>
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	2274      	movs	r2, #116	; 0x74
 80041c4:	2101      	movs	r1, #1
 80041c6:	5499      	strb	r1, [r3, r2]

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	2201      	movs	r2, #1
 80041cc:	661a      	str	r2, [r3, #96]	; 0x60

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 80041ce:	2527      	movs	r5, #39	; 0x27
 80041d0:	197c      	adds	r4, r7, r5
 80041d2:	1dbb      	adds	r3, r7, #6
 80041d4:	881a      	ldrh	r2, [r3, #0]
 80041d6:	68b9      	ldr	r1, [r7, #8]
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	0018      	movs	r0, r3
 80041dc:	f7ff fd60 	bl	8003ca0 <UART_Start_Receive_DMA>
 80041e0:	0003      	movs	r3, r0
 80041e2:	7023      	strb	r3, [r4, #0]

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 80041e4:	197b      	adds	r3, r7, r5
 80041e6:	781b      	ldrb	r3, [r3, #0]
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d124      	bne.n	8004236 <HAL_UARTEx_ReceiveToIdle_DMA+0xcc>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80041f0:	2b01      	cmp	r3, #1
 80041f2:	d11c      	bne.n	800422e <HAL_UARTEx_ReceiveToIdle_DMA+0xc4>
      {
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	2210      	movs	r2, #16
 80041fa:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80041fc:	f3ef 8310 	mrs	r3, PRIMASK
 8004200:	617b      	str	r3, [r7, #20]
  return(result);
 8004202:	697b      	ldr	r3, [r7, #20]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004204:	623b      	str	r3, [r7, #32]
 8004206:	2301      	movs	r3, #1
 8004208:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800420a:	69bb      	ldr	r3, [r7, #24]
 800420c:	f383 8810 	msr	PRIMASK, r3
}
 8004210:	46c0      	nop			; (mov r8, r8)
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	681a      	ldr	r2, [r3, #0]
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	2110      	movs	r1, #16
 800421e:	430a      	orrs	r2, r1
 8004220:	601a      	str	r2, [r3, #0]
 8004222:	6a3b      	ldr	r3, [r7, #32]
 8004224:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004226:	69fb      	ldr	r3, [r7, #28]
 8004228:	f383 8810 	msr	PRIMASK, r3
}
 800422c:	e003      	b.n	8004236 <HAL_UARTEx_ReceiveToIdle_DMA+0xcc>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 800422e:	2327      	movs	r3, #39	; 0x27
 8004230:	18fb      	adds	r3, r7, r3
 8004232:	2201      	movs	r2, #1
 8004234:	701a      	strb	r2, [r3, #0]
      }
    }

    return status;
 8004236:	2327      	movs	r3, #39	; 0x27
 8004238:	18fb      	adds	r3, r7, r3
 800423a:	781b      	ldrb	r3, [r3, #0]
 800423c:	e000      	b.n	8004240 <HAL_UARTEx_ReceiveToIdle_DMA+0xd6>
  }
  else
  {
    return HAL_BUSY;
 800423e:	2302      	movs	r3, #2
  }
}
 8004240:	0018      	movs	r0, r3
 8004242:	46bd      	mov	sp, r7
 8004244:	b00a      	add	sp, #40	; 0x28
 8004246:	bdb0      	pop	{r4, r5, r7, pc}

08004248 <__errno>:
 8004248:	4b01      	ldr	r3, [pc, #4]	; (8004250 <__errno+0x8>)
 800424a:	6818      	ldr	r0, [r3, #0]
 800424c:	4770      	bx	lr
 800424e:	46c0      	nop			; (mov r8, r8)
 8004250:	2000000c 	.word	0x2000000c

08004254 <__libc_init_array>:
 8004254:	b570      	push	{r4, r5, r6, lr}
 8004256:	2600      	movs	r6, #0
 8004258:	4d0c      	ldr	r5, [pc, #48]	; (800428c <__libc_init_array+0x38>)
 800425a:	4c0d      	ldr	r4, [pc, #52]	; (8004290 <__libc_init_array+0x3c>)
 800425c:	1b64      	subs	r4, r4, r5
 800425e:	10a4      	asrs	r4, r4, #2
 8004260:	42a6      	cmp	r6, r4
 8004262:	d109      	bne.n	8004278 <__libc_init_array+0x24>
 8004264:	2600      	movs	r6, #0
 8004266:	f001 f9a1 	bl	80055ac <_init>
 800426a:	4d0a      	ldr	r5, [pc, #40]	; (8004294 <__libc_init_array+0x40>)
 800426c:	4c0a      	ldr	r4, [pc, #40]	; (8004298 <__libc_init_array+0x44>)
 800426e:	1b64      	subs	r4, r4, r5
 8004270:	10a4      	asrs	r4, r4, #2
 8004272:	42a6      	cmp	r6, r4
 8004274:	d105      	bne.n	8004282 <__libc_init_array+0x2e>
 8004276:	bd70      	pop	{r4, r5, r6, pc}
 8004278:	00b3      	lsls	r3, r6, #2
 800427a:	58eb      	ldr	r3, [r5, r3]
 800427c:	4798      	blx	r3
 800427e:	3601      	adds	r6, #1
 8004280:	e7ee      	b.n	8004260 <__libc_init_array+0xc>
 8004282:	00b3      	lsls	r3, r6, #2
 8004284:	58eb      	ldr	r3, [r5, r3]
 8004286:	4798      	blx	r3
 8004288:	3601      	adds	r6, #1
 800428a:	e7f2      	b.n	8004272 <__libc_init_array+0x1e>
 800428c:	08005868 	.word	0x08005868
 8004290:	08005868 	.word	0x08005868
 8004294:	08005868 	.word	0x08005868
 8004298:	0800586c 	.word	0x0800586c

0800429c <memcpy>:
 800429c:	2300      	movs	r3, #0
 800429e:	b510      	push	{r4, lr}
 80042a0:	429a      	cmp	r2, r3
 80042a2:	d100      	bne.n	80042a6 <memcpy+0xa>
 80042a4:	bd10      	pop	{r4, pc}
 80042a6:	5ccc      	ldrb	r4, [r1, r3]
 80042a8:	54c4      	strb	r4, [r0, r3]
 80042aa:	3301      	adds	r3, #1
 80042ac:	e7f8      	b.n	80042a0 <memcpy+0x4>

080042ae <memset>:
 80042ae:	0003      	movs	r3, r0
 80042b0:	1882      	adds	r2, r0, r2
 80042b2:	4293      	cmp	r3, r2
 80042b4:	d100      	bne.n	80042b8 <memset+0xa>
 80042b6:	4770      	bx	lr
 80042b8:	7019      	strb	r1, [r3, #0]
 80042ba:	3301      	adds	r3, #1
 80042bc:	e7f9      	b.n	80042b2 <memset+0x4>
	...

080042c0 <siprintf>:
 80042c0:	b40e      	push	{r1, r2, r3}
 80042c2:	b500      	push	{lr}
 80042c4:	490b      	ldr	r1, [pc, #44]	; (80042f4 <siprintf+0x34>)
 80042c6:	b09c      	sub	sp, #112	; 0x70
 80042c8:	ab1d      	add	r3, sp, #116	; 0x74
 80042ca:	9002      	str	r0, [sp, #8]
 80042cc:	9006      	str	r0, [sp, #24]
 80042ce:	9107      	str	r1, [sp, #28]
 80042d0:	9104      	str	r1, [sp, #16]
 80042d2:	4809      	ldr	r0, [pc, #36]	; (80042f8 <siprintf+0x38>)
 80042d4:	4909      	ldr	r1, [pc, #36]	; (80042fc <siprintf+0x3c>)
 80042d6:	cb04      	ldmia	r3!, {r2}
 80042d8:	9105      	str	r1, [sp, #20]
 80042da:	6800      	ldr	r0, [r0, #0]
 80042dc:	a902      	add	r1, sp, #8
 80042de:	9301      	str	r3, [sp, #4]
 80042e0:	f000 f8b0 	bl	8004444 <_svfiprintf_r>
 80042e4:	2300      	movs	r3, #0
 80042e6:	9a02      	ldr	r2, [sp, #8]
 80042e8:	7013      	strb	r3, [r2, #0]
 80042ea:	b01c      	add	sp, #112	; 0x70
 80042ec:	bc08      	pop	{r3}
 80042ee:	b003      	add	sp, #12
 80042f0:	4718      	bx	r3
 80042f2:	46c0      	nop			; (mov r8, r8)
 80042f4:	7fffffff 	.word	0x7fffffff
 80042f8:	2000000c 	.word	0x2000000c
 80042fc:	ffff0208 	.word	0xffff0208

08004300 <siscanf>:
 8004300:	b40e      	push	{r1, r2, r3}
 8004302:	b530      	push	{r4, r5, lr}
 8004304:	2381      	movs	r3, #129	; 0x81
 8004306:	b09c      	sub	sp, #112	; 0x70
 8004308:	466a      	mov	r2, sp
 800430a:	ac1f      	add	r4, sp, #124	; 0x7c
 800430c:	009b      	lsls	r3, r3, #2
 800430e:	cc20      	ldmia	r4!, {r5}
 8004310:	8293      	strh	r3, [r2, #20]
 8004312:	9002      	str	r0, [sp, #8]
 8004314:	9006      	str	r0, [sp, #24]
 8004316:	f7fb fef7 	bl	8000108 <strlen>
 800431a:	4b0b      	ldr	r3, [pc, #44]	; (8004348 <siscanf+0x48>)
 800431c:	466a      	mov	r2, sp
 800431e:	930b      	str	r3, [sp, #44]	; 0x2c
 8004320:	2300      	movs	r3, #0
 8004322:	9003      	str	r0, [sp, #12]
 8004324:	9007      	str	r0, [sp, #28]
 8004326:	4809      	ldr	r0, [pc, #36]	; (800434c <siscanf+0x4c>)
 8004328:	930f      	str	r3, [sp, #60]	; 0x3c
 800432a:	9314      	str	r3, [sp, #80]	; 0x50
 800432c:	3b01      	subs	r3, #1
 800432e:	82d3      	strh	r3, [r2, #22]
 8004330:	a902      	add	r1, sp, #8
 8004332:	0023      	movs	r3, r4
 8004334:	002a      	movs	r2, r5
 8004336:	6800      	ldr	r0, [r0, #0]
 8004338:	9401      	str	r4, [sp, #4]
 800433a:	f000 f9df 	bl	80046fc <__ssvfiscanf_r>
 800433e:	b01c      	add	sp, #112	; 0x70
 8004340:	bc30      	pop	{r4, r5}
 8004342:	bc08      	pop	{r3}
 8004344:	b003      	add	sp, #12
 8004346:	4718      	bx	r3
 8004348:	08004351 	.word	0x08004351
 800434c:	2000000c 	.word	0x2000000c

08004350 <__seofread>:
 8004350:	2000      	movs	r0, #0
 8004352:	4770      	bx	lr

08004354 <strstr>:
 8004354:	780a      	ldrb	r2, [r1, #0]
 8004356:	b530      	push	{r4, r5, lr}
 8004358:	2a00      	cmp	r2, #0
 800435a:	d10c      	bne.n	8004376 <strstr+0x22>
 800435c:	bd30      	pop	{r4, r5, pc}
 800435e:	429a      	cmp	r2, r3
 8004360:	d108      	bne.n	8004374 <strstr+0x20>
 8004362:	2301      	movs	r3, #1
 8004364:	5ccc      	ldrb	r4, [r1, r3]
 8004366:	2c00      	cmp	r4, #0
 8004368:	d0f8      	beq.n	800435c <strstr+0x8>
 800436a:	5cc5      	ldrb	r5, [r0, r3]
 800436c:	42a5      	cmp	r5, r4
 800436e:	d101      	bne.n	8004374 <strstr+0x20>
 8004370:	3301      	adds	r3, #1
 8004372:	e7f7      	b.n	8004364 <strstr+0x10>
 8004374:	3001      	adds	r0, #1
 8004376:	7803      	ldrb	r3, [r0, #0]
 8004378:	2b00      	cmp	r3, #0
 800437a:	d1f0      	bne.n	800435e <strstr+0xa>
 800437c:	0018      	movs	r0, r3
 800437e:	e7ed      	b.n	800435c <strstr+0x8>

08004380 <__ssputs_r>:
 8004380:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004382:	688e      	ldr	r6, [r1, #8]
 8004384:	b085      	sub	sp, #20
 8004386:	0007      	movs	r7, r0
 8004388:	000c      	movs	r4, r1
 800438a:	9203      	str	r2, [sp, #12]
 800438c:	9301      	str	r3, [sp, #4]
 800438e:	429e      	cmp	r6, r3
 8004390:	d83c      	bhi.n	800440c <__ssputs_r+0x8c>
 8004392:	2390      	movs	r3, #144	; 0x90
 8004394:	898a      	ldrh	r2, [r1, #12]
 8004396:	00db      	lsls	r3, r3, #3
 8004398:	421a      	tst	r2, r3
 800439a:	d034      	beq.n	8004406 <__ssputs_r+0x86>
 800439c:	6909      	ldr	r1, [r1, #16]
 800439e:	6823      	ldr	r3, [r4, #0]
 80043a0:	6960      	ldr	r0, [r4, #20]
 80043a2:	1a5b      	subs	r3, r3, r1
 80043a4:	9302      	str	r3, [sp, #8]
 80043a6:	2303      	movs	r3, #3
 80043a8:	4343      	muls	r3, r0
 80043aa:	0fdd      	lsrs	r5, r3, #31
 80043ac:	18ed      	adds	r5, r5, r3
 80043ae:	9b01      	ldr	r3, [sp, #4]
 80043b0:	9802      	ldr	r0, [sp, #8]
 80043b2:	3301      	adds	r3, #1
 80043b4:	181b      	adds	r3, r3, r0
 80043b6:	106d      	asrs	r5, r5, #1
 80043b8:	42ab      	cmp	r3, r5
 80043ba:	d900      	bls.n	80043be <__ssputs_r+0x3e>
 80043bc:	001d      	movs	r5, r3
 80043be:	0553      	lsls	r3, r2, #21
 80043c0:	d532      	bpl.n	8004428 <__ssputs_r+0xa8>
 80043c2:	0029      	movs	r1, r5
 80043c4:	0038      	movs	r0, r7
 80043c6:	f001 f821 	bl	800540c <_malloc_r>
 80043ca:	1e06      	subs	r6, r0, #0
 80043cc:	d109      	bne.n	80043e2 <__ssputs_r+0x62>
 80043ce:	230c      	movs	r3, #12
 80043d0:	603b      	str	r3, [r7, #0]
 80043d2:	2340      	movs	r3, #64	; 0x40
 80043d4:	2001      	movs	r0, #1
 80043d6:	89a2      	ldrh	r2, [r4, #12]
 80043d8:	4240      	negs	r0, r0
 80043da:	4313      	orrs	r3, r2
 80043dc:	81a3      	strh	r3, [r4, #12]
 80043de:	b005      	add	sp, #20
 80043e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80043e2:	9a02      	ldr	r2, [sp, #8]
 80043e4:	6921      	ldr	r1, [r4, #16]
 80043e6:	f7ff ff59 	bl	800429c <memcpy>
 80043ea:	89a3      	ldrh	r3, [r4, #12]
 80043ec:	4a14      	ldr	r2, [pc, #80]	; (8004440 <__ssputs_r+0xc0>)
 80043ee:	401a      	ands	r2, r3
 80043f0:	2380      	movs	r3, #128	; 0x80
 80043f2:	4313      	orrs	r3, r2
 80043f4:	81a3      	strh	r3, [r4, #12]
 80043f6:	9b02      	ldr	r3, [sp, #8]
 80043f8:	6126      	str	r6, [r4, #16]
 80043fa:	18f6      	adds	r6, r6, r3
 80043fc:	6026      	str	r6, [r4, #0]
 80043fe:	6165      	str	r5, [r4, #20]
 8004400:	9e01      	ldr	r6, [sp, #4]
 8004402:	1aed      	subs	r5, r5, r3
 8004404:	60a5      	str	r5, [r4, #8]
 8004406:	9b01      	ldr	r3, [sp, #4]
 8004408:	429e      	cmp	r6, r3
 800440a:	d900      	bls.n	800440e <__ssputs_r+0x8e>
 800440c:	9e01      	ldr	r6, [sp, #4]
 800440e:	0032      	movs	r2, r6
 8004410:	9903      	ldr	r1, [sp, #12]
 8004412:	6820      	ldr	r0, [r4, #0]
 8004414:	f000 ff7b 	bl	800530e <memmove>
 8004418:	68a3      	ldr	r3, [r4, #8]
 800441a:	2000      	movs	r0, #0
 800441c:	1b9b      	subs	r3, r3, r6
 800441e:	60a3      	str	r3, [r4, #8]
 8004420:	6823      	ldr	r3, [r4, #0]
 8004422:	199e      	adds	r6, r3, r6
 8004424:	6026      	str	r6, [r4, #0]
 8004426:	e7da      	b.n	80043de <__ssputs_r+0x5e>
 8004428:	002a      	movs	r2, r5
 800442a:	0038      	movs	r0, r7
 800442c:	f001 f864 	bl	80054f8 <_realloc_r>
 8004430:	1e06      	subs	r6, r0, #0
 8004432:	d1e0      	bne.n	80043f6 <__ssputs_r+0x76>
 8004434:	0038      	movs	r0, r7
 8004436:	6921      	ldr	r1, [r4, #16]
 8004438:	f000 ff7c 	bl	8005334 <_free_r>
 800443c:	e7c7      	b.n	80043ce <__ssputs_r+0x4e>
 800443e:	46c0      	nop			; (mov r8, r8)
 8004440:	fffffb7f 	.word	0xfffffb7f

08004444 <_svfiprintf_r>:
 8004444:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004446:	b0a1      	sub	sp, #132	; 0x84
 8004448:	9003      	str	r0, [sp, #12]
 800444a:	001d      	movs	r5, r3
 800444c:	898b      	ldrh	r3, [r1, #12]
 800444e:	000f      	movs	r7, r1
 8004450:	0016      	movs	r6, r2
 8004452:	061b      	lsls	r3, r3, #24
 8004454:	d511      	bpl.n	800447a <_svfiprintf_r+0x36>
 8004456:	690b      	ldr	r3, [r1, #16]
 8004458:	2b00      	cmp	r3, #0
 800445a:	d10e      	bne.n	800447a <_svfiprintf_r+0x36>
 800445c:	2140      	movs	r1, #64	; 0x40
 800445e:	f000 ffd5 	bl	800540c <_malloc_r>
 8004462:	6038      	str	r0, [r7, #0]
 8004464:	6138      	str	r0, [r7, #16]
 8004466:	2800      	cmp	r0, #0
 8004468:	d105      	bne.n	8004476 <_svfiprintf_r+0x32>
 800446a:	230c      	movs	r3, #12
 800446c:	9a03      	ldr	r2, [sp, #12]
 800446e:	3801      	subs	r0, #1
 8004470:	6013      	str	r3, [r2, #0]
 8004472:	b021      	add	sp, #132	; 0x84
 8004474:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004476:	2340      	movs	r3, #64	; 0x40
 8004478:	617b      	str	r3, [r7, #20]
 800447a:	2300      	movs	r3, #0
 800447c:	ac08      	add	r4, sp, #32
 800447e:	6163      	str	r3, [r4, #20]
 8004480:	3320      	adds	r3, #32
 8004482:	7663      	strb	r3, [r4, #25]
 8004484:	3310      	adds	r3, #16
 8004486:	76a3      	strb	r3, [r4, #26]
 8004488:	9507      	str	r5, [sp, #28]
 800448a:	0035      	movs	r5, r6
 800448c:	782b      	ldrb	r3, [r5, #0]
 800448e:	2b00      	cmp	r3, #0
 8004490:	d001      	beq.n	8004496 <_svfiprintf_r+0x52>
 8004492:	2b25      	cmp	r3, #37	; 0x25
 8004494:	d147      	bne.n	8004526 <_svfiprintf_r+0xe2>
 8004496:	1bab      	subs	r3, r5, r6
 8004498:	9305      	str	r3, [sp, #20]
 800449a:	42b5      	cmp	r5, r6
 800449c:	d00c      	beq.n	80044b8 <_svfiprintf_r+0x74>
 800449e:	0032      	movs	r2, r6
 80044a0:	0039      	movs	r1, r7
 80044a2:	9803      	ldr	r0, [sp, #12]
 80044a4:	f7ff ff6c 	bl	8004380 <__ssputs_r>
 80044a8:	1c43      	adds	r3, r0, #1
 80044aa:	d100      	bne.n	80044ae <_svfiprintf_r+0x6a>
 80044ac:	e0ae      	b.n	800460c <_svfiprintf_r+0x1c8>
 80044ae:	6962      	ldr	r2, [r4, #20]
 80044b0:	9b05      	ldr	r3, [sp, #20]
 80044b2:	4694      	mov	ip, r2
 80044b4:	4463      	add	r3, ip
 80044b6:	6163      	str	r3, [r4, #20]
 80044b8:	782b      	ldrb	r3, [r5, #0]
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d100      	bne.n	80044c0 <_svfiprintf_r+0x7c>
 80044be:	e0a5      	b.n	800460c <_svfiprintf_r+0x1c8>
 80044c0:	2201      	movs	r2, #1
 80044c2:	2300      	movs	r3, #0
 80044c4:	4252      	negs	r2, r2
 80044c6:	6062      	str	r2, [r4, #4]
 80044c8:	a904      	add	r1, sp, #16
 80044ca:	3254      	adds	r2, #84	; 0x54
 80044cc:	1852      	adds	r2, r2, r1
 80044ce:	1c6e      	adds	r6, r5, #1
 80044d0:	6023      	str	r3, [r4, #0]
 80044d2:	60e3      	str	r3, [r4, #12]
 80044d4:	60a3      	str	r3, [r4, #8]
 80044d6:	7013      	strb	r3, [r2, #0]
 80044d8:	65a3      	str	r3, [r4, #88]	; 0x58
 80044da:	2205      	movs	r2, #5
 80044dc:	7831      	ldrb	r1, [r6, #0]
 80044de:	4854      	ldr	r0, [pc, #336]	; (8004630 <_svfiprintf_r+0x1ec>)
 80044e0:	f000 ff0a 	bl	80052f8 <memchr>
 80044e4:	1c75      	adds	r5, r6, #1
 80044e6:	2800      	cmp	r0, #0
 80044e8:	d11f      	bne.n	800452a <_svfiprintf_r+0xe6>
 80044ea:	6822      	ldr	r2, [r4, #0]
 80044ec:	06d3      	lsls	r3, r2, #27
 80044ee:	d504      	bpl.n	80044fa <_svfiprintf_r+0xb6>
 80044f0:	2353      	movs	r3, #83	; 0x53
 80044f2:	a904      	add	r1, sp, #16
 80044f4:	185b      	adds	r3, r3, r1
 80044f6:	2120      	movs	r1, #32
 80044f8:	7019      	strb	r1, [r3, #0]
 80044fa:	0713      	lsls	r3, r2, #28
 80044fc:	d504      	bpl.n	8004508 <_svfiprintf_r+0xc4>
 80044fe:	2353      	movs	r3, #83	; 0x53
 8004500:	a904      	add	r1, sp, #16
 8004502:	185b      	adds	r3, r3, r1
 8004504:	212b      	movs	r1, #43	; 0x2b
 8004506:	7019      	strb	r1, [r3, #0]
 8004508:	7833      	ldrb	r3, [r6, #0]
 800450a:	2b2a      	cmp	r3, #42	; 0x2a
 800450c:	d016      	beq.n	800453c <_svfiprintf_r+0xf8>
 800450e:	0035      	movs	r5, r6
 8004510:	2100      	movs	r1, #0
 8004512:	200a      	movs	r0, #10
 8004514:	68e3      	ldr	r3, [r4, #12]
 8004516:	782a      	ldrb	r2, [r5, #0]
 8004518:	1c6e      	adds	r6, r5, #1
 800451a:	3a30      	subs	r2, #48	; 0x30
 800451c:	2a09      	cmp	r2, #9
 800451e:	d94e      	bls.n	80045be <_svfiprintf_r+0x17a>
 8004520:	2900      	cmp	r1, #0
 8004522:	d111      	bne.n	8004548 <_svfiprintf_r+0x104>
 8004524:	e017      	b.n	8004556 <_svfiprintf_r+0x112>
 8004526:	3501      	adds	r5, #1
 8004528:	e7b0      	b.n	800448c <_svfiprintf_r+0x48>
 800452a:	4b41      	ldr	r3, [pc, #260]	; (8004630 <_svfiprintf_r+0x1ec>)
 800452c:	6822      	ldr	r2, [r4, #0]
 800452e:	1ac0      	subs	r0, r0, r3
 8004530:	2301      	movs	r3, #1
 8004532:	4083      	lsls	r3, r0
 8004534:	4313      	orrs	r3, r2
 8004536:	002e      	movs	r6, r5
 8004538:	6023      	str	r3, [r4, #0]
 800453a:	e7ce      	b.n	80044da <_svfiprintf_r+0x96>
 800453c:	9b07      	ldr	r3, [sp, #28]
 800453e:	1d19      	adds	r1, r3, #4
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	9107      	str	r1, [sp, #28]
 8004544:	2b00      	cmp	r3, #0
 8004546:	db01      	blt.n	800454c <_svfiprintf_r+0x108>
 8004548:	930b      	str	r3, [sp, #44]	; 0x2c
 800454a:	e004      	b.n	8004556 <_svfiprintf_r+0x112>
 800454c:	425b      	negs	r3, r3
 800454e:	60e3      	str	r3, [r4, #12]
 8004550:	2302      	movs	r3, #2
 8004552:	4313      	orrs	r3, r2
 8004554:	6023      	str	r3, [r4, #0]
 8004556:	782b      	ldrb	r3, [r5, #0]
 8004558:	2b2e      	cmp	r3, #46	; 0x2e
 800455a:	d10a      	bne.n	8004572 <_svfiprintf_r+0x12e>
 800455c:	786b      	ldrb	r3, [r5, #1]
 800455e:	2b2a      	cmp	r3, #42	; 0x2a
 8004560:	d135      	bne.n	80045ce <_svfiprintf_r+0x18a>
 8004562:	9b07      	ldr	r3, [sp, #28]
 8004564:	3502      	adds	r5, #2
 8004566:	1d1a      	adds	r2, r3, #4
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	9207      	str	r2, [sp, #28]
 800456c:	2b00      	cmp	r3, #0
 800456e:	db2b      	blt.n	80045c8 <_svfiprintf_r+0x184>
 8004570:	9309      	str	r3, [sp, #36]	; 0x24
 8004572:	4e30      	ldr	r6, [pc, #192]	; (8004634 <_svfiprintf_r+0x1f0>)
 8004574:	2203      	movs	r2, #3
 8004576:	0030      	movs	r0, r6
 8004578:	7829      	ldrb	r1, [r5, #0]
 800457a:	f000 febd 	bl	80052f8 <memchr>
 800457e:	2800      	cmp	r0, #0
 8004580:	d006      	beq.n	8004590 <_svfiprintf_r+0x14c>
 8004582:	2340      	movs	r3, #64	; 0x40
 8004584:	1b80      	subs	r0, r0, r6
 8004586:	4083      	lsls	r3, r0
 8004588:	6822      	ldr	r2, [r4, #0]
 800458a:	3501      	adds	r5, #1
 800458c:	4313      	orrs	r3, r2
 800458e:	6023      	str	r3, [r4, #0]
 8004590:	7829      	ldrb	r1, [r5, #0]
 8004592:	2206      	movs	r2, #6
 8004594:	4828      	ldr	r0, [pc, #160]	; (8004638 <_svfiprintf_r+0x1f4>)
 8004596:	1c6e      	adds	r6, r5, #1
 8004598:	7621      	strb	r1, [r4, #24]
 800459a:	f000 fead 	bl	80052f8 <memchr>
 800459e:	2800      	cmp	r0, #0
 80045a0:	d03c      	beq.n	800461c <_svfiprintf_r+0x1d8>
 80045a2:	4b26      	ldr	r3, [pc, #152]	; (800463c <_svfiprintf_r+0x1f8>)
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d125      	bne.n	80045f4 <_svfiprintf_r+0x1b0>
 80045a8:	2207      	movs	r2, #7
 80045aa:	9b07      	ldr	r3, [sp, #28]
 80045ac:	3307      	adds	r3, #7
 80045ae:	4393      	bics	r3, r2
 80045b0:	3308      	adds	r3, #8
 80045b2:	9307      	str	r3, [sp, #28]
 80045b4:	6963      	ldr	r3, [r4, #20]
 80045b6:	9a04      	ldr	r2, [sp, #16]
 80045b8:	189b      	adds	r3, r3, r2
 80045ba:	6163      	str	r3, [r4, #20]
 80045bc:	e765      	b.n	800448a <_svfiprintf_r+0x46>
 80045be:	4343      	muls	r3, r0
 80045c0:	0035      	movs	r5, r6
 80045c2:	2101      	movs	r1, #1
 80045c4:	189b      	adds	r3, r3, r2
 80045c6:	e7a6      	b.n	8004516 <_svfiprintf_r+0xd2>
 80045c8:	2301      	movs	r3, #1
 80045ca:	425b      	negs	r3, r3
 80045cc:	e7d0      	b.n	8004570 <_svfiprintf_r+0x12c>
 80045ce:	2300      	movs	r3, #0
 80045d0:	200a      	movs	r0, #10
 80045d2:	001a      	movs	r2, r3
 80045d4:	3501      	adds	r5, #1
 80045d6:	6063      	str	r3, [r4, #4]
 80045d8:	7829      	ldrb	r1, [r5, #0]
 80045da:	1c6e      	adds	r6, r5, #1
 80045dc:	3930      	subs	r1, #48	; 0x30
 80045de:	2909      	cmp	r1, #9
 80045e0:	d903      	bls.n	80045ea <_svfiprintf_r+0x1a6>
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d0c5      	beq.n	8004572 <_svfiprintf_r+0x12e>
 80045e6:	9209      	str	r2, [sp, #36]	; 0x24
 80045e8:	e7c3      	b.n	8004572 <_svfiprintf_r+0x12e>
 80045ea:	4342      	muls	r2, r0
 80045ec:	0035      	movs	r5, r6
 80045ee:	2301      	movs	r3, #1
 80045f0:	1852      	adds	r2, r2, r1
 80045f2:	e7f1      	b.n	80045d8 <_svfiprintf_r+0x194>
 80045f4:	ab07      	add	r3, sp, #28
 80045f6:	9300      	str	r3, [sp, #0]
 80045f8:	003a      	movs	r2, r7
 80045fa:	0021      	movs	r1, r4
 80045fc:	4b10      	ldr	r3, [pc, #64]	; (8004640 <_svfiprintf_r+0x1fc>)
 80045fe:	9803      	ldr	r0, [sp, #12]
 8004600:	e000      	b.n	8004604 <_svfiprintf_r+0x1c0>
 8004602:	bf00      	nop
 8004604:	9004      	str	r0, [sp, #16]
 8004606:	9b04      	ldr	r3, [sp, #16]
 8004608:	3301      	adds	r3, #1
 800460a:	d1d3      	bne.n	80045b4 <_svfiprintf_r+0x170>
 800460c:	89bb      	ldrh	r3, [r7, #12]
 800460e:	980d      	ldr	r0, [sp, #52]	; 0x34
 8004610:	065b      	lsls	r3, r3, #25
 8004612:	d400      	bmi.n	8004616 <_svfiprintf_r+0x1d2>
 8004614:	e72d      	b.n	8004472 <_svfiprintf_r+0x2e>
 8004616:	2001      	movs	r0, #1
 8004618:	4240      	negs	r0, r0
 800461a:	e72a      	b.n	8004472 <_svfiprintf_r+0x2e>
 800461c:	ab07      	add	r3, sp, #28
 800461e:	9300      	str	r3, [sp, #0]
 8004620:	003a      	movs	r2, r7
 8004622:	0021      	movs	r1, r4
 8004624:	4b06      	ldr	r3, [pc, #24]	; (8004640 <_svfiprintf_r+0x1fc>)
 8004626:	9803      	ldr	r0, [sp, #12]
 8004628:	f000 fa56 	bl	8004ad8 <_printf_i>
 800462c:	e7ea      	b.n	8004604 <_svfiprintf_r+0x1c0>
 800462e:	46c0      	nop			; (mov r8, r8)
 8004630:	080056b0 	.word	0x080056b0
 8004634:	080056b6 	.word	0x080056b6
 8004638:	080056ba 	.word	0x080056ba
 800463c:	00000000 	.word	0x00000000
 8004640:	08004381 	.word	0x08004381

08004644 <_sungetc_r>:
 8004644:	b570      	push	{r4, r5, r6, lr}
 8004646:	0014      	movs	r4, r2
 8004648:	1c4b      	adds	r3, r1, #1
 800464a:	d103      	bne.n	8004654 <_sungetc_r+0x10>
 800464c:	2501      	movs	r5, #1
 800464e:	426d      	negs	r5, r5
 8004650:	0028      	movs	r0, r5
 8004652:	bd70      	pop	{r4, r5, r6, pc}
 8004654:	8993      	ldrh	r3, [r2, #12]
 8004656:	2220      	movs	r2, #32
 8004658:	4393      	bics	r3, r2
 800465a:	6b62      	ldr	r2, [r4, #52]	; 0x34
 800465c:	81a3      	strh	r3, [r4, #12]
 800465e:	b2ce      	uxtb	r6, r1
 8004660:	6863      	ldr	r3, [r4, #4]
 8004662:	b2cd      	uxtb	r5, r1
 8004664:	2a00      	cmp	r2, #0
 8004666:	d010      	beq.n	800468a <_sungetc_r+0x46>
 8004668:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800466a:	429a      	cmp	r2, r3
 800466c:	dd07      	ble.n	800467e <_sungetc_r+0x3a>
 800466e:	6823      	ldr	r3, [r4, #0]
 8004670:	3b01      	subs	r3, #1
 8004672:	6023      	str	r3, [r4, #0]
 8004674:	701e      	strb	r6, [r3, #0]
 8004676:	6863      	ldr	r3, [r4, #4]
 8004678:	3301      	adds	r3, #1
 800467a:	6063      	str	r3, [r4, #4]
 800467c:	e7e8      	b.n	8004650 <_sungetc_r+0xc>
 800467e:	0021      	movs	r1, r4
 8004680:	f000 fdfa 	bl	8005278 <__submore>
 8004684:	2800      	cmp	r0, #0
 8004686:	d0f2      	beq.n	800466e <_sungetc_r+0x2a>
 8004688:	e7e0      	b.n	800464c <_sungetc_r+0x8>
 800468a:	6921      	ldr	r1, [r4, #16]
 800468c:	6822      	ldr	r2, [r4, #0]
 800468e:	2900      	cmp	r1, #0
 8004690:	d007      	beq.n	80046a2 <_sungetc_r+0x5e>
 8004692:	4291      	cmp	r1, r2
 8004694:	d205      	bcs.n	80046a2 <_sungetc_r+0x5e>
 8004696:	1e51      	subs	r1, r2, #1
 8004698:	7808      	ldrb	r0, [r1, #0]
 800469a:	42a8      	cmp	r0, r5
 800469c:	d101      	bne.n	80046a2 <_sungetc_r+0x5e>
 800469e:	6021      	str	r1, [r4, #0]
 80046a0:	e7ea      	b.n	8004678 <_sungetc_r+0x34>
 80046a2:	6423      	str	r3, [r4, #64]	; 0x40
 80046a4:	0023      	movs	r3, r4
 80046a6:	3344      	adds	r3, #68	; 0x44
 80046a8:	6363      	str	r3, [r4, #52]	; 0x34
 80046aa:	2303      	movs	r3, #3
 80046ac:	63a3      	str	r3, [r4, #56]	; 0x38
 80046ae:	0023      	movs	r3, r4
 80046b0:	3346      	adds	r3, #70	; 0x46
 80046b2:	63e2      	str	r2, [r4, #60]	; 0x3c
 80046b4:	701e      	strb	r6, [r3, #0]
 80046b6:	6023      	str	r3, [r4, #0]
 80046b8:	2301      	movs	r3, #1
 80046ba:	e7de      	b.n	800467a <_sungetc_r+0x36>

080046bc <__ssrefill_r>:
 80046bc:	b510      	push	{r4, lr}
 80046be:	000c      	movs	r4, r1
 80046c0:	6b49      	ldr	r1, [r1, #52]	; 0x34
 80046c2:	2900      	cmp	r1, #0
 80046c4:	d00e      	beq.n	80046e4 <__ssrefill_r+0x28>
 80046c6:	0023      	movs	r3, r4
 80046c8:	3344      	adds	r3, #68	; 0x44
 80046ca:	4299      	cmp	r1, r3
 80046cc:	d001      	beq.n	80046d2 <__ssrefill_r+0x16>
 80046ce:	f000 fe31 	bl	8005334 <_free_r>
 80046d2:	2000      	movs	r0, #0
 80046d4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80046d6:	6360      	str	r0, [r4, #52]	; 0x34
 80046d8:	6063      	str	r3, [r4, #4]
 80046da:	4283      	cmp	r3, r0
 80046dc:	d002      	beq.n	80046e4 <__ssrefill_r+0x28>
 80046de:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80046e0:	6023      	str	r3, [r4, #0]
 80046e2:	bd10      	pop	{r4, pc}
 80046e4:	6923      	ldr	r3, [r4, #16]
 80046e6:	2001      	movs	r0, #1
 80046e8:	6023      	str	r3, [r4, #0]
 80046ea:	2300      	movs	r3, #0
 80046ec:	89a2      	ldrh	r2, [r4, #12]
 80046ee:	6063      	str	r3, [r4, #4]
 80046f0:	3320      	adds	r3, #32
 80046f2:	4313      	orrs	r3, r2
 80046f4:	81a3      	strh	r3, [r4, #12]
 80046f6:	4240      	negs	r0, r0
 80046f8:	e7f3      	b.n	80046e2 <__ssrefill_r+0x26>
	...

080046fc <__ssvfiscanf_r>:
 80046fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80046fe:	4cb8      	ldr	r4, [pc, #736]	; (80049e0 <__ssvfiscanf_r+0x2e4>)
 8004700:	0006      	movs	r6, r0
 8004702:	44a5      	add	sp, r4
 8004704:	000c      	movs	r4, r1
 8004706:	2100      	movs	r1, #0
 8004708:	9146      	str	r1, [sp, #280]	; 0x118
 800470a:	9147      	str	r1, [sp, #284]	; 0x11c
 800470c:	a903      	add	r1, sp, #12
 800470e:	9148      	str	r1, [sp, #288]	; 0x120
 8004710:	21be      	movs	r1, #190	; 0xbe
 8004712:	48b4      	ldr	r0, [pc, #720]	; (80049e4 <__ssvfiscanf_r+0x2e8>)
 8004714:	0049      	lsls	r1, r1, #1
 8004716:	ad43      	add	r5, sp, #268	; 0x10c
 8004718:	5068      	str	r0, [r5, r1]
 800471a:	25c0      	movs	r5, #192	; 0xc0
 800471c:	49b2      	ldr	r1, [pc, #712]	; (80049e8 <__ssvfiscanf_r+0x2ec>)
 800471e:	006d      	lsls	r5, r5, #1
 8004720:	a843      	add	r0, sp, #268	; 0x10c
 8004722:	5141      	str	r1, [r0, r5]
 8004724:	9302      	str	r3, [sp, #8]
 8004726:	7813      	ldrb	r3, [r2, #0]
 8004728:	2b00      	cmp	r3, #0
 800472a:	d100      	bne.n	800472e <__ssvfiscanf_r+0x32>
 800472c:	e155      	b.n	80049da <__ssvfiscanf_r+0x2de>
 800472e:	49af      	ldr	r1, [pc, #700]	; (80049ec <__ssvfiscanf_r+0x2f0>)
 8004730:	2508      	movs	r5, #8
 8004732:	5cc8      	ldrb	r0, [r1, r3]
 8004734:	2108      	movs	r1, #8
 8004736:	1c57      	adds	r7, r2, #1
 8004738:	4001      	ands	r1, r0
 800473a:	4228      	tst	r0, r5
 800473c:	d020      	beq.n	8004780 <__ssvfiscanf_r+0x84>
 800473e:	6863      	ldr	r3, [r4, #4]
 8004740:	2b00      	cmp	r3, #0
 8004742:	dd12      	ble.n	800476a <__ssvfiscanf_r+0x6e>
 8004744:	6823      	ldr	r3, [r4, #0]
 8004746:	49a9      	ldr	r1, [pc, #676]	; (80049ec <__ssvfiscanf_r+0x2f0>)
 8004748:	781a      	ldrb	r2, [r3, #0]
 800474a:	5c8a      	ldrb	r2, [r1, r2]
 800474c:	2108      	movs	r1, #8
 800474e:	420a      	tst	r2, r1
 8004750:	d101      	bne.n	8004756 <__ssvfiscanf_r+0x5a>
 8004752:	003a      	movs	r2, r7
 8004754:	e7e7      	b.n	8004726 <__ssvfiscanf_r+0x2a>
 8004756:	9a47      	ldr	r2, [sp, #284]	; 0x11c
 8004758:	3301      	adds	r3, #1
 800475a:	9200      	str	r2, [sp, #0]
 800475c:	3201      	adds	r2, #1
 800475e:	9247      	str	r2, [sp, #284]	; 0x11c
 8004760:	6862      	ldr	r2, [r4, #4]
 8004762:	6023      	str	r3, [r4, #0]
 8004764:	3a01      	subs	r2, #1
 8004766:	6062      	str	r2, [r4, #4]
 8004768:	e7e9      	b.n	800473e <__ssvfiscanf_r+0x42>
 800476a:	22c0      	movs	r2, #192	; 0xc0
 800476c:	ab43      	add	r3, sp, #268	; 0x10c
 800476e:	0052      	lsls	r2, r2, #1
 8004770:	589b      	ldr	r3, [r3, r2]
 8004772:	0021      	movs	r1, r4
 8004774:	0030      	movs	r0, r6
 8004776:	9300      	str	r3, [sp, #0]
 8004778:	4798      	blx	r3
 800477a:	2800      	cmp	r0, #0
 800477c:	d0e2      	beq.n	8004744 <__ssvfiscanf_r+0x48>
 800477e:	e7e8      	b.n	8004752 <__ssvfiscanf_r+0x56>
 8004780:	001d      	movs	r5, r3
 8004782:	2b25      	cmp	r3, #37	; 0x25
 8004784:	d164      	bne.n	8004850 <__ssvfiscanf_r+0x154>
 8004786:	9145      	str	r1, [sp, #276]	; 0x114
 8004788:	9143      	str	r1, [sp, #268]	; 0x10c
 800478a:	7853      	ldrb	r3, [r2, #1]
 800478c:	2b2a      	cmp	r3, #42	; 0x2a
 800478e:	d102      	bne.n	8004796 <__ssvfiscanf_r+0x9a>
 8004790:	3b1a      	subs	r3, #26
 8004792:	9343      	str	r3, [sp, #268]	; 0x10c
 8004794:	1c97      	adds	r7, r2, #2
 8004796:	003d      	movs	r5, r7
 8004798:	220a      	movs	r2, #10
 800479a:	7829      	ldrb	r1, [r5, #0]
 800479c:	1c6b      	adds	r3, r5, #1
 800479e:	9300      	str	r3, [sp, #0]
 80047a0:	000b      	movs	r3, r1
 80047a2:	3b30      	subs	r3, #48	; 0x30
 80047a4:	2b09      	cmp	r3, #9
 80047a6:	d91f      	bls.n	80047e8 <__ssvfiscanf_r+0xec>
 80047a8:	4f91      	ldr	r7, [pc, #580]	; (80049f0 <__ssvfiscanf_r+0x2f4>)
 80047aa:	2203      	movs	r2, #3
 80047ac:	0038      	movs	r0, r7
 80047ae:	f000 fda3 	bl	80052f8 <memchr>
 80047b2:	2800      	cmp	r0, #0
 80047b4:	d007      	beq.n	80047c6 <__ssvfiscanf_r+0xca>
 80047b6:	2301      	movs	r3, #1
 80047b8:	1bc0      	subs	r0, r0, r7
 80047ba:	4083      	lsls	r3, r0
 80047bc:	9a43      	ldr	r2, [sp, #268]	; 0x10c
 80047be:	9d00      	ldr	r5, [sp, #0]
 80047c0:	4313      	orrs	r3, r2
 80047c2:	9201      	str	r2, [sp, #4]
 80047c4:	9343      	str	r3, [sp, #268]	; 0x10c
 80047c6:	1c6f      	adds	r7, r5, #1
 80047c8:	782d      	ldrb	r5, [r5, #0]
 80047ca:	2d78      	cmp	r5, #120	; 0x78
 80047cc:	d807      	bhi.n	80047de <__ssvfiscanf_r+0xe2>
 80047ce:	2d57      	cmp	r5, #87	; 0x57
 80047d0:	d812      	bhi.n	80047f8 <__ssvfiscanf_r+0xfc>
 80047d2:	2d25      	cmp	r5, #37	; 0x25
 80047d4:	d03c      	beq.n	8004850 <__ssvfiscanf_r+0x154>
 80047d6:	d836      	bhi.n	8004846 <__ssvfiscanf_r+0x14a>
 80047d8:	2d00      	cmp	r5, #0
 80047da:	d100      	bne.n	80047de <__ssvfiscanf_r+0xe2>
 80047dc:	e0fa      	b.n	80049d4 <__ssvfiscanf_r+0x2d8>
 80047de:	2303      	movs	r3, #3
 80047e0:	9349      	str	r3, [sp, #292]	; 0x124
 80047e2:	3307      	adds	r3, #7
 80047e4:	9344      	str	r3, [sp, #272]	; 0x110
 80047e6:	e06d      	b.n	80048c4 <__ssvfiscanf_r+0x1c8>
 80047e8:	9b45      	ldr	r3, [sp, #276]	; 0x114
 80047ea:	9d00      	ldr	r5, [sp, #0]
 80047ec:	9301      	str	r3, [sp, #4]
 80047ee:	4353      	muls	r3, r2
 80047f0:	3b30      	subs	r3, #48	; 0x30
 80047f2:	185b      	adds	r3, r3, r1
 80047f4:	9345      	str	r3, [sp, #276]	; 0x114
 80047f6:	e7d0      	b.n	800479a <__ssvfiscanf_r+0x9e>
 80047f8:	0028      	movs	r0, r5
 80047fa:	3858      	subs	r0, #88	; 0x58
 80047fc:	2820      	cmp	r0, #32
 80047fe:	d8ee      	bhi.n	80047de <__ssvfiscanf_r+0xe2>
 8004800:	f7fb fc8a 	bl	8000118 <__gnu_thumb1_case_shi>
 8004804:	ffed0051 	.word	0xffed0051
 8004808:	0087ffed 	.word	0x0087ffed
 800480c:	ffedffed 	.word	0xffedffed
 8004810:	ffedffed 	.word	0xffedffed
 8004814:	ffedffed 	.word	0xffedffed
 8004818:	0095ffed 	.word	0x0095ffed
 800481c:	0024007d 	.word	0x0024007d
 8004820:	00240024 	.word	0x00240024
 8004824:	007fffed 	.word	0x007fffed
 8004828:	ffedffed 	.word	0xffedffed
 800482c:	ffedffed 	.word	0xffedffed
 8004830:	0083009f 	.word	0x0083009f
 8004834:	ffed004b 	.word	0xffed004b
 8004838:	009dffed 	.word	0x009dffed
 800483c:	007dffed 	.word	0x007dffed
 8004840:	ffedffed 	.word	0xffedffed
 8004844:	0051      	.short	0x0051
 8004846:	3d45      	subs	r5, #69	; 0x45
 8004848:	2d02      	cmp	r5, #2
 800484a:	d8c8      	bhi.n	80047de <__ssvfiscanf_r+0xe2>
 800484c:	2305      	movs	r3, #5
 800484e:	e06c      	b.n	800492a <__ssvfiscanf_r+0x22e>
 8004850:	6863      	ldr	r3, [r4, #4]
 8004852:	2b00      	cmp	r3, #0
 8004854:	dd0e      	ble.n	8004874 <__ssvfiscanf_r+0x178>
 8004856:	6823      	ldr	r3, [r4, #0]
 8004858:	781a      	ldrb	r2, [r3, #0]
 800485a:	42aa      	cmp	r2, r5
 800485c:	d000      	beq.n	8004860 <__ssvfiscanf_r+0x164>
 800485e:	e0bc      	b.n	80049da <__ssvfiscanf_r+0x2de>
 8004860:	3301      	adds	r3, #1
 8004862:	6862      	ldr	r2, [r4, #4]
 8004864:	6023      	str	r3, [r4, #0]
 8004866:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8004868:	3a01      	subs	r2, #1
 800486a:	9300      	str	r3, [sp, #0]
 800486c:	3301      	adds	r3, #1
 800486e:	6062      	str	r2, [r4, #4]
 8004870:	9347      	str	r3, [sp, #284]	; 0x11c
 8004872:	e76e      	b.n	8004752 <__ssvfiscanf_r+0x56>
 8004874:	22c0      	movs	r2, #192	; 0xc0
 8004876:	ab43      	add	r3, sp, #268	; 0x10c
 8004878:	0052      	lsls	r2, r2, #1
 800487a:	589b      	ldr	r3, [r3, r2]
 800487c:	0021      	movs	r1, r4
 800487e:	0030      	movs	r0, r6
 8004880:	9300      	str	r3, [sp, #0]
 8004882:	4798      	blx	r3
 8004884:	2800      	cmp	r0, #0
 8004886:	d0e6      	beq.n	8004856 <__ssvfiscanf_r+0x15a>
 8004888:	9846      	ldr	r0, [sp, #280]	; 0x118
 800488a:	2800      	cmp	r0, #0
 800488c:	d000      	beq.n	8004890 <__ssvfiscanf_r+0x194>
 800488e:	e09d      	b.n	80049cc <__ssvfiscanf_r+0x2d0>
 8004890:	3801      	subs	r0, #1
 8004892:	23a5      	movs	r3, #165	; 0xa5
 8004894:	009b      	lsls	r3, r3, #2
 8004896:	449d      	add	sp, r3
 8004898:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800489a:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800489c:	9300      	str	r3, [sp, #0]
 800489e:	2320      	movs	r3, #32
 80048a0:	9a00      	ldr	r2, [sp, #0]
 80048a2:	4313      	orrs	r3, r2
 80048a4:	9343      	str	r3, [sp, #268]	; 0x10c
 80048a6:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 80048a8:	9300      	str	r3, [sp, #0]
 80048aa:	2380      	movs	r3, #128	; 0x80
 80048ac:	9a00      	ldr	r2, [sp, #0]
 80048ae:	009b      	lsls	r3, r3, #2
 80048b0:	4313      	orrs	r3, r2
 80048b2:	9343      	str	r3, [sp, #268]	; 0x10c
 80048b4:	2310      	movs	r3, #16
 80048b6:	9344      	str	r3, [sp, #272]	; 0x110
 80048b8:	236e      	movs	r3, #110	; 0x6e
 80048ba:	42ab      	cmp	r3, r5
 80048bc:	41ad      	sbcs	r5, r5
 80048be:	426d      	negs	r5, r5
 80048c0:	3503      	adds	r5, #3
 80048c2:	9549      	str	r5, [sp, #292]	; 0x124
 80048c4:	6863      	ldr	r3, [r4, #4]
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	dd4a      	ble.n	8004960 <__ssvfiscanf_r+0x264>
 80048ca:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 80048cc:	9300      	str	r3, [sp, #0]
 80048ce:	065b      	lsls	r3, r3, #25
 80048d0:	d406      	bmi.n	80048e0 <__ssvfiscanf_r+0x1e4>
 80048d2:	6823      	ldr	r3, [r4, #0]
 80048d4:	4945      	ldr	r1, [pc, #276]	; (80049ec <__ssvfiscanf_r+0x2f0>)
 80048d6:	781a      	ldrb	r2, [r3, #0]
 80048d8:	5c8a      	ldrb	r2, [r1, r2]
 80048da:	2108      	movs	r1, #8
 80048dc:	420a      	tst	r2, r1
 80048de:	d14a      	bne.n	8004976 <__ssvfiscanf_r+0x27a>
 80048e0:	9b49      	ldr	r3, [sp, #292]	; 0x124
 80048e2:	2b02      	cmp	r3, #2
 80048e4:	dc5e      	bgt.n	80049a4 <__ssvfiscanf_r+0x2a8>
 80048e6:	0022      	movs	r2, r4
 80048e8:	0030      	movs	r0, r6
 80048ea:	ab02      	add	r3, sp, #8
 80048ec:	a943      	add	r1, sp, #268	; 0x10c
 80048ee:	f000 fa05 	bl	8004cfc <_scanf_chars>
 80048f2:	2801      	cmp	r0, #1
 80048f4:	d071      	beq.n	80049da <__ssvfiscanf_r+0x2de>
 80048f6:	2802      	cmp	r0, #2
 80048f8:	d000      	beq.n	80048fc <__ssvfiscanf_r+0x200>
 80048fa:	e72a      	b.n	8004752 <__ssvfiscanf_r+0x56>
 80048fc:	e7c4      	b.n	8004888 <__ssvfiscanf_r+0x18c>
 80048fe:	230a      	movs	r3, #10
 8004900:	e7d9      	b.n	80048b6 <__ssvfiscanf_r+0x1ba>
 8004902:	2300      	movs	r3, #0
 8004904:	2503      	movs	r5, #3
 8004906:	9344      	str	r3, [sp, #272]	; 0x110
 8004908:	e7db      	b.n	80048c2 <__ssvfiscanf_r+0x1c6>
 800490a:	2308      	movs	r3, #8
 800490c:	2504      	movs	r5, #4
 800490e:	9344      	str	r3, [sp, #272]	; 0x110
 8004910:	e7d7      	b.n	80048c2 <__ssvfiscanf_r+0x1c6>
 8004912:	0039      	movs	r1, r7
 8004914:	a803      	add	r0, sp, #12
 8004916:	f000 fb53 	bl	8004fc0 <__sccl>
 800491a:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800491c:	0007      	movs	r7, r0
 800491e:	9300      	str	r3, [sp, #0]
 8004920:	2340      	movs	r3, #64	; 0x40
 8004922:	9a00      	ldr	r2, [sp, #0]
 8004924:	4313      	orrs	r3, r2
 8004926:	9343      	str	r3, [sp, #268]	; 0x10c
 8004928:	2301      	movs	r3, #1
 800492a:	9349      	str	r3, [sp, #292]	; 0x124
 800492c:	e7ca      	b.n	80048c4 <__ssvfiscanf_r+0x1c8>
 800492e:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8004930:	9300      	str	r3, [sp, #0]
 8004932:	2340      	movs	r3, #64	; 0x40
 8004934:	9a00      	ldr	r2, [sp, #0]
 8004936:	4313      	orrs	r3, r2
 8004938:	9343      	str	r3, [sp, #268]	; 0x10c
 800493a:	2300      	movs	r3, #0
 800493c:	e7f5      	b.n	800492a <__ssvfiscanf_r+0x22e>
 800493e:	2302      	movs	r3, #2
 8004940:	e7f3      	b.n	800492a <__ssvfiscanf_r+0x22e>
 8004942:	9843      	ldr	r0, [sp, #268]	; 0x10c
 8004944:	06c3      	lsls	r3, r0, #27
 8004946:	d500      	bpl.n	800494a <__ssvfiscanf_r+0x24e>
 8004948:	e703      	b.n	8004752 <__ssvfiscanf_r+0x56>
 800494a:	9b02      	ldr	r3, [sp, #8]
 800494c:	9a47      	ldr	r2, [sp, #284]	; 0x11c
 800494e:	1d19      	adds	r1, r3, #4
 8004950:	9102      	str	r1, [sp, #8]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	07c5      	lsls	r5, r0, #31
 8004956:	d501      	bpl.n	800495c <__ssvfiscanf_r+0x260>
 8004958:	801a      	strh	r2, [r3, #0]
 800495a:	e6fa      	b.n	8004752 <__ssvfiscanf_r+0x56>
 800495c:	601a      	str	r2, [r3, #0]
 800495e:	e6f8      	b.n	8004752 <__ssvfiscanf_r+0x56>
 8004960:	22c0      	movs	r2, #192	; 0xc0
 8004962:	ab43      	add	r3, sp, #268	; 0x10c
 8004964:	0052      	lsls	r2, r2, #1
 8004966:	589b      	ldr	r3, [r3, r2]
 8004968:	0021      	movs	r1, r4
 800496a:	0030      	movs	r0, r6
 800496c:	9300      	str	r3, [sp, #0]
 800496e:	4798      	blx	r3
 8004970:	2800      	cmp	r0, #0
 8004972:	d0aa      	beq.n	80048ca <__ssvfiscanf_r+0x1ce>
 8004974:	e788      	b.n	8004888 <__ssvfiscanf_r+0x18c>
 8004976:	9a47      	ldr	r2, [sp, #284]	; 0x11c
 8004978:	9200      	str	r2, [sp, #0]
 800497a:	3201      	adds	r2, #1
 800497c:	9247      	str	r2, [sp, #284]	; 0x11c
 800497e:	6862      	ldr	r2, [r4, #4]
 8004980:	3a01      	subs	r2, #1
 8004982:	6062      	str	r2, [r4, #4]
 8004984:	2a00      	cmp	r2, #0
 8004986:	dd02      	ble.n	800498e <__ssvfiscanf_r+0x292>
 8004988:	3301      	adds	r3, #1
 800498a:	6023      	str	r3, [r4, #0]
 800498c:	e7a1      	b.n	80048d2 <__ssvfiscanf_r+0x1d6>
 800498e:	22c0      	movs	r2, #192	; 0xc0
 8004990:	ab43      	add	r3, sp, #268	; 0x10c
 8004992:	0052      	lsls	r2, r2, #1
 8004994:	589b      	ldr	r3, [r3, r2]
 8004996:	0021      	movs	r1, r4
 8004998:	0030      	movs	r0, r6
 800499a:	9300      	str	r3, [sp, #0]
 800499c:	4798      	blx	r3
 800499e:	2800      	cmp	r0, #0
 80049a0:	d097      	beq.n	80048d2 <__ssvfiscanf_r+0x1d6>
 80049a2:	e771      	b.n	8004888 <__ssvfiscanf_r+0x18c>
 80049a4:	2b04      	cmp	r3, #4
 80049a6:	dc06      	bgt.n	80049b6 <__ssvfiscanf_r+0x2ba>
 80049a8:	0022      	movs	r2, r4
 80049aa:	0030      	movs	r0, r6
 80049ac:	ab02      	add	r3, sp, #8
 80049ae:	a943      	add	r1, sp, #268	; 0x10c
 80049b0:	f000 fa02 	bl	8004db8 <_scanf_i>
 80049b4:	e79d      	b.n	80048f2 <__ssvfiscanf_r+0x1f6>
 80049b6:	4b0f      	ldr	r3, [pc, #60]	; (80049f4 <__ssvfiscanf_r+0x2f8>)
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d100      	bne.n	80049be <__ssvfiscanf_r+0x2c2>
 80049bc:	e6c9      	b.n	8004752 <__ssvfiscanf_r+0x56>
 80049be:	0022      	movs	r2, r4
 80049c0:	0030      	movs	r0, r6
 80049c2:	ab02      	add	r3, sp, #8
 80049c4:	a943      	add	r1, sp, #268	; 0x10c
 80049c6:	e000      	b.n	80049ca <__ssvfiscanf_r+0x2ce>
 80049c8:	bf00      	nop
 80049ca:	e792      	b.n	80048f2 <__ssvfiscanf_r+0x1f6>
 80049cc:	89a3      	ldrh	r3, [r4, #12]
 80049ce:	065b      	lsls	r3, r3, #25
 80049d0:	d400      	bmi.n	80049d4 <__ssvfiscanf_r+0x2d8>
 80049d2:	e75e      	b.n	8004892 <__ssvfiscanf_r+0x196>
 80049d4:	2001      	movs	r0, #1
 80049d6:	4240      	negs	r0, r0
 80049d8:	e75b      	b.n	8004892 <__ssvfiscanf_r+0x196>
 80049da:	9846      	ldr	r0, [sp, #280]	; 0x118
 80049dc:	e759      	b.n	8004892 <__ssvfiscanf_r+0x196>
 80049de:	46c0      	nop			; (mov r8, r8)
 80049e0:	fffffd6c 	.word	0xfffffd6c
 80049e4:	08004645 	.word	0x08004645
 80049e8:	080046bd 	.word	0x080046bd
 80049ec:	080056ff 	.word	0x080056ff
 80049f0:	080056b6 	.word	0x080056b6
 80049f4:	00000000 	.word	0x00000000

080049f8 <_printf_common>:
 80049f8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80049fa:	0015      	movs	r5, r2
 80049fc:	9301      	str	r3, [sp, #4]
 80049fe:	688a      	ldr	r2, [r1, #8]
 8004a00:	690b      	ldr	r3, [r1, #16]
 8004a02:	000c      	movs	r4, r1
 8004a04:	9000      	str	r0, [sp, #0]
 8004a06:	4293      	cmp	r3, r2
 8004a08:	da00      	bge.n	8004a0c <_printf_common+0x14>
 8004a0a:	0013      	movs	r3, r2
 8004a0c:	0022      	movs	r2, r4
 8004a0e:	602b      	str	r3, [r5, #0]
 8004a10:	3243      	adds	r2, #67	; 0x43
 8004a12:	7812      	ldrb	r2, [r2, #0]
 8004a14:	2a00      	cmp	r2, #0
 8004a16:	d001      	beq.n	8004a1c <_printf_common+0x24>
 8004a18:	3301      	adds	r3, #1
 8004a1a:	602b      	str	r3, [r5, #0]
 8004a1c:	6823      	ldr	r3, [r4, #0]
 8004a1e:	069b      	lsls	r3, r3, #26
 8004a20:	d502      	bpl.n	8004a28 <_printf_common+0x30>
 8004a22:	682b      	ldr	r3, [r5, #0]
 8004a24:	3302      	adds	r3, #2
 8004a26:	602b      	str	r3, [r5, #0]
 8004a28:	6822      	ldr	r2, [r4, #0]
 8004a2a:	2306      	movs	r3, #6
 8004a2c:	0017      	movs	r7, r2
 8004a2e:	401f      	ands	r7, r3
 8004a30:	421a      	tst	r2, r3
 8004a32:	d027      	beq.n	8004a84 <_printf_common+0x8c>
 8004a34:	0023      	movs	r3, r4
 8004a36:	3343      	adds	r3, #67	; 0x43
 8004a38:	781b      	ldrb	r3, [r3, #0]
 8004a3a:	1e5a      	subs	r2, r3, #1
 8004a3c:	4193      	sbcs	r3, r2
 8004a3e:	6822      	ldr	r2, [r4, #0]
 8004a40:	0692      	lsls	r2, r2, #26
 8004a42:	d430      	bmi.n	8004aa6 <_printf_common+0xae>
 8004a44:	0022      	movs	r2, r4
 8004a46:	9901      	ldr	r1, [sp, #4]
 8004a48:	9800      	ldr	r0, [sp, #0]
 8004a4a:	9e08      	ldr	r6, [sp, #32]
 8004a4c:	3243      	adds	r2, #67	; 0x43
 8004a4e:	47b0      	blx	r6
 8004a50:	1c43      	adds	r3, r0, #1
 8004a52:	d025      	beq.n	8004aa0 <_printf_common+0xa8>
 8004a54:	2306      	movs	r3, #6
 8004a56:	6820      	ldr	r0, [r4, #0]
 8004a58:	682a      	ldr	r2, [r5, #0]
 8004a5a:	68e1      	ldr	r1, [r4, #12]
 8004a5c:	2500      	movs	r5, #0
 8004a5e:	4003      	ands	r3, r0
 8004a60:	2b04      	cmp	r3, #4
 8004a62:	d103      	bne.n	8004a6c <_printf_common+0x74>
 8004a64:	1a8d      	subs	r5, r1, r2
 8004a66:	43eb      	mvns	r3, r5
 8004a68:	17db      	asrs	r3, r3, #31
 8004a6a:	401d      	ands	r5, r3
 8004a6c:	68a3      	ldr	r3, [r4, #8]
 8004a6e:	6922      	ldr	r2, [r4, #16]
 8004a70:	4293      	cmp	r3, r2
 8004a72:	dd01      	ble.n	8004a78 <_printf_common+0x80>
 8004a74:	1a9b      	subs	r3, r3, r2
 8004a76:	18ed      	adds	r5, r5, r3
 8004a78:	2700      	movs	r7, #0
 8004a7a:	42bd      	cmp	r5, r7
 8004a7c:	d120      	bne.n	8004ac0 <_printf_common+0xc8>
 8004a7e:	2000      	movs	r0, #0
 8004a80:	e010      	b.n	8004aa4 <_printf_common+0xac>
 8004a82:	3701      	adds	r7, #1
 8004a84:	68e3      	ldr	r3, [r4, #12]
 8004a86:	682a      	ldr	r2, [r5, #0]
 8004a88:	1a9b      	subs	r3, r3, r2
 8004a8a:	42bb      	cmp	r3, r7
 8004a8c:	ddd2      	ble.n	8004a34 <_printf_common+0x3c>
 8004a8e:	0022      	movs	r2, r4
 8004a90:	2301      	movs	r3, #1
 8004a92:	9901      	ldr	r1, [sp, #4]
 8004a94:	9800      	ldr	r0, [sp, #0]
 8004a96:	9e08      	ldr	r6, [sp, #32]
 8004a98:	3219      	adds	r2, #25
 8004a9a:	47b0      	blx	r6
 8004a9c:	1c43      	adds	r3, r0, #1
 8004a9e:	d1f0      	bne.n	8004a82 <_printf_common+0x8a>
 8004aa0:	2001      	movs	r0, #1
 8004aa2:	4240      	negs	r0, r0
 8004aa4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8004aa6:	2030      	movs	r0, #48	; 0x30
 8004aa8:	18e1      	adds	r1, r4, r3
 8004aaa:	3143      	adds	r1, #67	; 0x43
 8004aac:	7008      	strb	r0, [r1, #0]
 8004aae:	0021      	movs	r1, r4
 8004ab0:	1c5a      	adds	r2, r3, #1
 8004ab2:	3145      	adds	r1, #69	; 0x45
 8004ab4:	7809      	ldrb	r1, [r1, #0]
 8004ab6:	18a2      	adds	r2, r4, r2
 8004ab8:	3243      	adds	r2, #67	; 0x43
 8004aba:	3302      	adds	r3, #2
 8004abc:	7011      	strb	r1, [r2, #0]
 8004abe:	e7c1      	b.n	8004a44 <_printf_common+0x4c>
 8004ac0:	0022      	movs	r2, r4
 8004ac2:	2301      	movs	r3, #1
 8004ac4:	9901      	ldr	r1, [sp, #4]
 8004ac6:	9800      	ldr	r0, [sp, #0]
 8004ac8:	9e08      	ldr	r6, [sp, #32]
 8004aca:	321a      	adds	r2, #26
 8004acc:	47b0      	blx	r6
 8004ace:	1c43      	adds	r3, r0, #1
 8004ad0:	d0e6      	beq.n	8004aa0 <_printf_common+0xa8>
 8004ad2:	3701      	adds	r7, #1
 8004ad4:	e7d1      	b.n	8004a7a <_printf_common+0x82>
	...

08004ad8 <_printf_i>:
 8004ad8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004ada:	b08b      	sub	sp, #44	; 0x2c
 8004adc:	9206      	str	r2, [sp, #24]
 8004ade:	000a      	movs	r2, r1
 8004ae0:	3243      	adds	r2, #67	; 0x43
 8004ae2:	9307      	str	r3, [sp, #28]
 8004ae4:	9005      	str	r0, [sp, #20]
 8004ae6:	9204      	str	r2, [sp, #16]
 8004ae8:	7e0a      	ldrb	r2, [r1, #24]
 8004aea:	000c      	movs	r4, r1
 8004aec:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8004aee:	2a78      	cmp	r2, #120	; 0x78
 8004af0:	d807      	bhi.n	8004b02 <_printf_i+0x2a>
 8004af2:	2a62      	cmp	r2, #98	; 0x62
 8004af4:	d809      	bhi.n	8004b0a <_printf_i+0x32>
 8004af6:	2a00      	cmp	r2, #0
 8004af8:	d100      	bne.n	8004afc <_printf_i+0x24>
 8004afa:	e0c1      	b.n	8004c80 <_printf_i+0x1a8>
 8004afc:	2a58      	cmp	r2, #88	; 0x58
 8004afe:	d100      	bne.n	8004b02 <_printf_i+0x2a>
 8004b00:	e08c      	b.n	8004c1c <_printf_i+0x144>
 8004b02:	0026      	movs	r6, r4
 8004b04:	3642      	adds	r6, #66	; 0x42
 8004b06:	7032      	strb	r2, [r6, #0]
 8004b08:	e022      	b.n	8004b50 <_printf_i+0x78>
 8004b0a:	0010      	movs	r0, r2
 8004b0c:	3863      	subs	r0, #99	; 0x63
 8004b0e:	2815      	cmp	r0, #21
 8004b10:	d8f7      	bhi.n	8004b02 <_printf_i+0x2a>
 8004b12:	f7fb fb01 	bl	8000118 <__gnu_thumb1_case_shi>
 8004b16:	0016      	.short	0x0016
 8004b18:	fff6001f 	.word	0xfff6001f
 8004b1c:	fff6fff6 	.word	0xfff6fff6
 8004b20:	001ffff6 	.word	0x001ffff6
 8004b24:	fff6fff6 	.word	0xfff6fff6
 8004b28:	fff6fff6 	.word	0xfff6fff6
 8004b2c:	003600a8 	.word	0x003600a8
 8004b30:	fff6009a 	.word	0xfff6009a
 8004b34:	00b9fff6 	.word	0x00b9fff6
 8004b38:	0036fff6 	.word	0x0036fff6
 8004b3c:	fff6fff6 	.word	0xfff6fff6
 8004b40:	009e      	.short	0x009e
 8004b42:	0026      	movs	r6, r4
 8004b44:	681a      	ldr	r2, [r3, #0]
 8004b46:	3642      	adds	r6, #66	; 0x42
 8004b48:	1d11      	adds	r1, r2, #4
 8004b4a:	6019      	str	r1, [r3, #0]
 8004b4c:	6813      	ldr	r3, [r2, #0]
 8004b4e:	7033      	strb	r3, [r6, #0]
 8004b50:	2301      	movs	r3, #1
 8004b52:	e0a7      	b.n	8004ca4 <_printf_i+0x1cc>
 8004b54:	6808      	ldr	r0, [r1, #0]
 8004b56:	6819      	ldr	r1, [r3, #0]
 8004b58:	1d0a      	adds	r2, r1, #4
 8004b5a:	0605      	lsls	r5, r0, #24
 8004b5c:	d50b      	bpl.n	8004b76 <_printf_i+0x9e>
 8004b5e:	680d      	ldr	r5, [r1, #0]
 8004b60:	601a      	str	r2, [r3, #0]
 8004b62:	2d00      	cmp	r5, #0
 8004b64:	da03      	bge.n	8004b6e <_printf_i+0x96>
 8004b66:	232d      	movs	r3, #45	; 0x2d
 8004b68:	9a04      	ldr	r2, [sp, #16]
 8004b6a:	426d      	negs	r5, r5
 8004b6c:	7013      	strb	r3, [r2, #0]
 8004b6e:	4b61      	ldr	r3, [pc, #388]	; (8004cf4 <_printf_i+0x21c>)
 8004b70:	270a      	movs	r7, #10
 8004b72:	9303      	str	r3, [sp, #12]
 8004b74:	e01b      	b.n	8004bae <_printf_i+0xd6>
 8004b76:	680d      	ldr	r5, [r1, #0]
 8004b78:	601a      	str	r2, [r3, #0]
 8004b7a:	0641      	lsls	r1, r0, #25
 8004b7c:	d5f1      	bpl.n	8004b62 <_printf_i+0x8a>
 8004b7e:	b22d      	sxth	r5, r5
 8004b80:	e7ef      	b.n	8004b62 <_printf_i+0x8a>
 8004b82:	680d      	ldr	r5, [r1, #0]
 8004b84:	6819      	ldr	r1, [r3, #0]
 8004b86:	1d08      	adds	r0, r1, #4
 8004b88:	6018      	str	r0, [r3, #0]
 8004b8a:	062e      	lsls	r6, r5, #24
 8004b8c:	d501      	bpl.n	8004b92 <_printf_i+0xba>
 8004b8e:	680d      	ldr	r5, [r1, #0]
 8004b90:	e003      	b.n	8004b9a <_printf_i+0xc2>
 8004b92:	066d      	lsls	r5, r5, #25
 8004b94:	d5fb      	bpl.n	8004b8e <_printf_i+0xb6>
 8004b96:	680d      	ldr	r5, [r1, #0]
 8004b98:	b2ad      	uxth	r5, r5
 8004b9a:	4b56      	ldr	r3, [pc, #344]	; (8004cf4 <_printf_i+0x21c>)
 8004b9c:	2708      	movs	r7, #8
 8004b9e:	9303      	str	r3, [sp, #12]
 8004ba0:	2a6f      	cmp	r2, #111	; 0x6f
 8004ba2:	d000      	beq.n	8004ba6 <_printf_i+0xce>
 8004ba4:	3702      	adds	r7, #2
 8004ba6:	0023      	movs	r3, r4
 8004ba8:	2200      	movs	r2, #0
 8004baa:	3343      	adds	r3, #67	; 0x43
 8004bac:	701a      	strb	r2, [r3, #0]
 8004bae:	6863      	ldr	r3, [r4, #4]
 8004bb0:	60a3      	str	r3, [r4, #8]
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	db03      	blt.n	8004bbe <_printf_i+0xe6>
 8004bb6:	2204      	movs	r2, #4
 8004bb8:	6821      	ldr	r1, [r4, #0]
 8004bba:	4391      	bics	r1, r2
 8004bbc:	6021      	str	r1, [r4, #0]
 8004bbe:	2d00      	cmp	r5, #0
 8004bc0:	d102      	bne.n	8004bc8 <_printf_i+0xf0>
 8004bc2:	9e04      	ldr	r6, [sp, #16]
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d00c      	beq.n	8004be2 <_printf_i+0x10a>
 8004bc8:	9e04      	ldr	r6, [sp, #16]
 8004bca:	0028      	movs	r0, r5
 8004bcc:	0039      	movs	r1, r7
 8004bce:	f7fb fb33 	bl	8000238 <__aeabi_uidivmod>
 8004bd2:	9b03      	ldr	r3, [sp, #12]
 8004bd4:	3e01      	subs	r6, #1
 8004bd6:	5c5b      	ldrb	r3, [r3, r1]
 8004bd8:	7033      	strb	r3, [r6, #0]
 8004bda:	002b      	movs	r3, r5
 8004bdc:	0005      	movs	r5, r0
 8004bde:	429f      	cmp	r7, r3
 8004be0:	d9f3      	bls.n	8004bca <_printf_i+0xf2>
 8004be2:	2f08      	cmp	r7, #8
 8004be4:	d109      	bne.n	8004bfa <_printf_i+0x122>
 8004be6:	6823      	ldr	r3, [r4, #0]
 8004be8:	07db      	lsls	r3, r3, #31
 8004bea:	d506      	bpl.n	8004bfa <_printf_i+0x122>
 8004bec:	6863      	ldr	r3, [r4, #4]
 8004bee:	6922      	ldr	r2, [r4, #16]
 8004bf0:	4293      	cmp	r3, r2
 8004bf2:	dc02      	bgt.n	8004bfa <_printf_i+0x122>
 8004bf4:	2330      	movs	r3, #48	; 0x30
 8004bf6:	3e01      	subs	r6, #1
 8004bf8:	7033      	strb	r3, [r6, #0]
 8004bfa:	9b04      	ldr	r3, [sp, #16]
 8004bfc:	1b9b      	subs	r3, r3, r6
 8004bfe:	6123      	str	r3, [r4, #16]
 8004c00:	9b07      	ldr	r3, [sp, #28]
 8004c02:	0021      	movs	r1, r4
 8004c04:	9300      	str	r3, [sp, #0]
 8004c06:	9805      	ldr	r0, [sp, #20]
 8004c08:	9b06      	ldr	r3, [sp, #24]
 8004c0a:	aa09      	add	r2, sp, #36	; 0x24
 8004c0c:	f7ff fef4 	bl	80049f8 <_printf_common>
 8004c10:	1c43      	adds	r3, r0, #1
 8004c12:	d14c      	bne.n	8004cae <_printf_i+0x1d6>
 8004c14:	2001      	movs	r0, #1
 8004c16:	4240      	negs	r0, r0
 8004c18:	b00b      	add	sp, #44	; 0x2c
 8004c1a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004c1c:	3145      	adds	r1, #69	; 0x45
 8004c1e:	700a      	strb	r2, [r1, #0]
 8004c20:	4a34      	ldr	r2, [pc, #208]	; (8004cf4 <_printf_i+0x21c>)
 8004c22:	9203      	str	r2, [sp, #12]
 8004c24:	681a      	ldr	r2, [r3, #0]
 8004c26:	6821      	ldr	r1, [r4, #0]
 8004c28:	ca20      	ldmia	r2!, {r5}
 8004c2a:	601a      	str	r2, [r3, #0]
 8004c2c:	0608      	lsls	r0, r1, #24
 8004c2e:	d516      	bpl.n	8004c5e <_printf_i+0x186>
 8004c30:	07cb      	lsls	r3, r1, #31
 8004c32:	d502      	bpl.n	8004c3a <_printf_i+0x162>
 8004c34:	2320      	movs	r3, #32
 8004c36:	4319      	orrs	r1, r3
 8004c38:	6021      	str	r1, [r4, #0]
 8004c3a:	2710      	movs	r7, #16
 8004c3c:	2d00      	cmp	r5, #0
 8004c3e:	d1b2      	bne.n	8004ba6 <_printf_i+0xce>
 8004c40:	2320      	movs	r3, #32
 8004c42:	6822      	ldr	r2, [r4, #0]
 8004c44:	439a      	bics	r2, r3
 8004c46:	6022      	str	r2, [r4, #0]
 8004c48:	e7ad      	b.n	8004ba6 <_printf_i+0xce>
 8004c4a:	2220      	movs	r2, #32
 8004c4c:	6809      	ldr	r1, [r1, #0]
 8004c4e:	430a      	orrs	r2, r1
 8004c50:	6022      	str	r2, [r4, #0]
 8004c52:	0022      	movs	r2, r4
 8004c54:	2178      	movs	r1, #120	; 0x78
 8004c56:	3245      	adds	r2, #69	; 0x45
 8004c58:	7011      	strb	r1, [r2, #0]
 8004c5a:	4a27      	ldr	r2, [pc, #156]	; (8004cf8 <_printf_i+0x220>)
 8004c5c:	e7e1      	b.n	8004c22 <_printf_i+0x14a>
 8004c5e:	0648      	lsls	r0, r1, #25
 8004c60:	d5e6      	bpl.n	8004c30 <_printf_i+0x158>
 8004c62:	b2ad      	uxth	r5, r5
 8004c64:	e7e4      	b.n	8004c30 <_printf_i+0x158>
 8004c66:	681a      	ldr	r2, [r3, #0]
 8004c68:	680d      	ldr	r5, [r1, #0]
 8004c6a:	1d10      	adds	r0, r2, #4
 8004c6c:	6949      	ldr	r1, [r1, #20]
 8004c6e:	6018      	str	r0, [r3, #0]
 8004c70:	6813      	ldr	r3, [r2, #0]
 8004c72:	062e      	lsls	r6, r5, #24
 8004c74:	d501      	bpl.n	8004c7a <_printf_i+0x1a2>
 8004c76:	6019      	str	r1, [r3, #0]
 8004c78:	e002      	b.n	8004c80 <_printf_i+0x1a8>
 8004c7a:	066d      	lsls	r5, r5, #25
 8004c7c:	d5fb      	bpl.n	8004c76 <_printf_i+0x19e>
 8004c7e:	8019      	strh	r1, [r3, #0]
 8004c80:	2300      	movs	r3, #0
 8004c82:	9e04      	ldr	r6, [sp, #16]
 8004c84:	6123      	str	r3, [r4, #16]
 8004c86:	e7bb      	b.n	8004c00 <_printf_i+0x128>
 8004c88:	681a      	ldr	r2, [r3, #0]
 8004c8a:	1d11      	adds	r1, r2, #4
 8004c8c:	6019      	str	r1, [r3, #0]
 8004c8e:	6816      	ldr	r6, [r2, #0]
 8004c90:	2100      	movs	r1, #0
 8004c92:	0030      	movs	r0, r6
 8004c94:	6862      	ldr	r2, [r4, #4]
 8004c96:	f000 fb2f 	bl	80052f8 <memchr>
 8004c9a:	2800      	cmp	r0, #0
 8004c9c:	d001      	beq.n	8004ca2 <_printf_i+0x1ca>
 8004c9e:	1b80      	subs	r0, r0, r6
 8004ca0:	6060      	str	r0, [r4, #4]
 8004ca2:	6863      	ldr	r3, [r4, #4]
 8004ca4:	6123      	str	r3, [r4, #16]
 8004ca6:	2300      	movs	r3, #0
 8004ca8:	9a04      	ldr	r2, [sp, #16]
 8004caa:	7013      	strb	r3, [r2, #0]
 8004cac:	e7a8      	b.n	8004c00 <_printf_i+0x128>
 8004cae:	6923      	ldr	r3, [r4, #16]
 8004cb0:	0032      	movs	r2, r6
 8004cb2:	9906      	ldr	r1, [sp, #24]
 8004cb4:	9805      	ldr	r0, [sp, #20]
 8004cb6:	9d07      	ldr	r5, [sp, #28]
 8004cb8:	47a8      	blx	r5
 8004cba:	1c43      	adds	r3, r0, #1
 8004cbc:	d0aa      	beq.n	8004c14 <_printf_i+0x13c>
 8004cbe:	6823      	ldr	r3, [r4, #0]
 8004cc0:	079b      	lsls	r3, r3, #30
 8004cc2:	d415      	bmi.n	8004cf0 <_printf_i+0x218>
 8004cc4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004cc6:	68e0      	ldr	r0, [r4, #12]
 8004cc8:	4298      	cmp	r0, r3
 8004cca:	daa5      	bge.n	8004c18 <_printf_i+0x140>
 8004ccc:	0018      	movs	r0, r3
 8004cce:	e7a3      	b.n	8004c18 <_printf_i+0x140>
 8004cd0:	0022      	movs	r2, r4
 8004cd2:	2301      	movs	r3, #1
 8004cd4:	9906      	ldr	r1, [sp, #24]
 8004cd6:	9805      	ldr	r0, [sp, #20]
 8004cd8:	9e07      	ldr	r6, [sp, #28]
 8004cda:	3219      	adds	r2, #25
 8004cdc:	47b0      	blx	r6
 8004cde:	1c43      	adds	r3, r0, #1
 8004ce0:	d098      	beq.n	8004c14 <_printf_i+0x13c>
 8004ce2:	3501      	adds	r5, #1
 8004ce4:	68e3      	ldr	r3, [r4, #12]
 8004ce6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004ce8:	1a9b      	subs	r3, r3, r2
 8004cea:	42ab      	cmp	r3, r5
 8004cec:	dcf0      	bgt.n	8004cd0 <_printf_i+0x1f8>
 8004cee:	e7e9      	b.n	8004cc4 <_printf_i+0x1ec>
 8004cf0:	2500      	movs	r5, #0
 8004cf2:	e7f7      	b.n	8004ce4 <_printf_i+0x20c>
 8004cf4:	080056c1 	.word	0x080056c1
 8004cf8:	080056d2 	.word	0x080056d2

08004cfc <_scanf_chars>:
 8004cfc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004cfe:	0015      	movs	r5, r2
 8004d00:	688a      	ldr	r2, [r1, #8]
 8004d02:	000c      	movs	r4, r1
 8004d04:	9001      	str	r0, [sp, #4]
 8004d06:	2a00      	cmp	r2, #0
 8004d08:	d105      	bne.n	8004d16 <_scanf_chars+0x1a>
 8004d0a:	6989      	ldr	r1, [r1, #24]
 8004d0c:	3201      	adds	r2, #1
 8004d0e:	2900      	cmp	r1, #0
 8004d10:	d000      	beq.n	8004d14 <_scanf_chars+0x18>
 8004d12:	3a02      	subs	r2, #2
 8004d14:	60a2      	str	r2, [r4, #8]
 8004d16:	6822      	ldr	r2, [r4, #0]
 8004d18:	06d2      	lsls	r2, r2, #27
 8004d1a:	d403      	bmi.n	8004d24 <_scanf_chars+0x28>
 8004d1c:	681a      	ldr	r2, [r3, #0]
 8004d1e:	1d11      	adds	r1, r2, #4
 8004d20:	6019      	str	r1, [r3, #0]
 8004d22:	6817      	ldr	r7, [r2, #0]
 8004d24:	2600      	movs	r6, #0
 8004d26:	69a0      	ldr	r0, [r4, #24]
 8004d28:	2800      	cmp	r0, #0
 8004d2a:	d013      	beq.n	8004d54 <_scanf_chars+0x58>
 8004d2c:	2801      	cmp	r0, #1
 8004d2e:	d108      	bne.n	8004d42 <_scanf_chars+0x46>
 8004d30:	682b      	ldr	r3, [r5, #0]
 8004d32:	6962      	ldr	r2, [r4, #20]
 8004d34:	781b      	ldrb	r3, [r3, #0]
 8004d36:	5cd3      	ldrb	r3, [r2, r3]
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d10b      	bne.n	8004d54 <_scanf_chars+0x58>
 8004d3c:	2e00      	cmp	r6, #0
 8004d3e:	d038      	beq.n	8004db2 <_scanf_chars+0xb6>
 8004d40:	e026      	b.n	8004d90 <_scanf_chars+0x94>
 8004d42:	2802      	cmp	r0, #2
 8004d44:	d124      	bne.n	8004d90 <_scanf_chars+0x94>
 8004d46:	682b      	ldr	r3, [r5, #0]
 8004d48:	4a1a      	ldr	r2, [pc, #104]	; (8004db4 <_scanf_chars+0xb8>)
 8004d4a:	781b      	ldrb	r3, [r3, #0]
 8004d4c:	5cd3      	ldrb	r3, [r2, r3]
 8004d4e:	2208      	movs	r2, #8
 8004d50:	4213      	tst	r3, r2
 8004d52:	d11d      	bne.n	8004d90 <_scanf_chars+0x94>
 8004d54:	2210      	movs	r2, #16
 8004d56:	6823      	ldr	r3, [r4, #0]
 8004d58:	3601      	adds	r6, #1
 8004d5a:	4213      	tst	r3, r2
 8004d5c:	d103      	bne.n	8004d66 <_scanf_chars+0x6a>
 8004d5e:	682b      	ldr	r3, [r5, #0]
 8004d60:	781b      	ldrb	r3, [r3, #0]
 8004d62:	703b      	strb	r3, [r7, #0]
 8004d64:	3701      	adds	r7, #1
 8004d66:	682a      	ldr	r2, [r5, #0]
 8004d68:	686b      	ldr	r3, [r5, #4]
 8004d6a:	3201      	adds	r2, #1
 8004d6c:	602a      	str	r2, [r5, #0]
 8004d6e:	68a2      	ldr	r2, [r4, #8]
 8004d70:	3b01      	subs	r3, #1
 8004d72:	3a01      	subs	r2, #1
 8004d74:	606b      	str	r3, [r5, #4]
 8004d76:	60a2      	str	r2, [r4, #8]
 8004d78:	2a00      	cmp	r2, #0
 8004d7a:	d009      	beq.n	8004d90 <_scanf_chars+0x94>
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	dcd2      	bgt.n	8004d26 <_scanf_chars+0x2a>
 8004d80:	23c0      	movs	r3, #192	; 0xc0
 8004d82:	005b      	lsls	r3, r3, #1
 8004d84:	0029      	movs	r1, r5
 8004d86:	58e3      	ldr	r3, [r4, r3]
 8004d88:	9801      	ldr	r0, [sp, #4]
 8004d8a:	4798      	blx	r3
 8004d8c:	2800      	cmp	r0, #0
 8004d8e:	d0ca      	beq.n	8004d26 <_scanf_chars+0x2a>
 8004d90:	6822      	ldr	r2, [r4, #0]
 8004d92:	2310      	movs	r3, #16
 8004d94:	0011      	movs	r1, r2
 8004d96:	4019      	ands	r1, r3
 8004d98:	421a      	tst	r2, r3
 8004d9a:	d106      	bne.n	8004daa <_scanf_chars+0xae>
 8004d9c:	68e3      	ldr	r3, [r4, #12]
 8004d9e:	3301      	adds	r3, #1
 8004da0:	60e3      	str	r3, [r4, #12]
 8004da2:	69a3      	ldr	r3, [r4, #24]
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d000      	beq.n	8004daa <_scanf_chars+0xae>
 8004da8:	7039      	strb	r1, [r7, #0]
 8004daa:	2000      	movs	r0, #0
 8004dac:	6923      	ldr	r3, [r4, #16]
 8004dae:	199e      	adds	r6, r3, r6
 8004db0:	6126      	str	r6, [r4, #16]
 8004db2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8004db4:	080056ff 	.word	0x080056ff

08004db8 <_scanf_i>:
 8004db8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004dba:	000c      	movs	r4, r1
 8004dbc:	b08d      	sub	sp, #52	; 0x34
 8004dbe:	9302      	str	r3, [sp, #8]
 8004dc0:	4b79      	ldr	r3, [pc, #484]	; (8004fa8 <_scanf_i+0x1f0>)
 8004dc2:	0016      	movs	r6, r2
 8004dc4:	9005      	str	r0, [sp, #20]
 8004dc6:	aa09      	add	r2, sp, #36	; 0x24
 8004dc8:	cb23      	ldmia	r3!, {r0, r1, r5}
 8004dca:	c223      	stmia	r2!, {r0, r1, r5}
 8004dcc:	4b77      	ldr	r3, [pc, #476]	; (8004fac <_scanf_i+0x1f4>)
 8004dce:	9306      	str	r3, [sp, #24]
 8004dd0:	69a3      	ldr	r3, [r4, #24]
 8004dd2:	2b03      	cmp	r3, #3
 8004dd4:	d001      	beq.n	8004dda <_scanf_i+0x22>
 8004dd6:	4b76      	ldr	r3, [pc, #472]	; (8004fb0 <_scanf_i+0x1f8>)
 8004dd8:	9306      	str	r3, [sp, #24]
 8004dda:	22ae      	movs	r2, #174	; 0xae
 8004ddc:	2000      	movs	r0, #0
 8004dde:	68a3      	ldr	r3, [r4, #8]
 8004de0:	0052      	lsls	r2, r2, #1
 8004de2:	1e59      	subs	r1, r3, #1
 8004de4:	9004      	str	r0, [sp, #16]
 8004de6:	4291      	cmp	r1, r2
 8004de8:	d905      	bls.n	8004df6 <_scanf_i+0x3e>
 8004dea:	3b5e      	subs	r3, #94	; 0x5e
 8004dec:	3bff      	subs	r3, #255	; 0xff
 8004dee:	9304      	str	r3, [sp, #16]
 8004df0:	235e      	movs	r3, #94	; 0x5e
 8004df2:	33ff      	adds	r3, #255	; 0xff
 8004df4:	60a3      	str	r3, [r4, #8]
 8004df6:	0023      	movs	r3, r4
 8004df8:	331c      	adds	r3, #28
 8004dfa:	9301      	str	r3, [sp, #4]
 8004dfc:	23d0      	movs	r3, #208	; 0xd0
 8004dfe:	2700      	movs	r7, #0
 8004e00:	6822      	ldr	r2, [r4, #0]
 8004e02:	011b      	lsls	r3, r3, #4
 8004e04:	4313      	orrs	r3, r2
 8004e06:	6023      	str	r3, [r4, #0]
 8004e08:	9b01      	ldr	r3, [sp, #4]
 8004e0a:	9303      	str	r3, [sp, #12]
 8004e0c:	6833      	ldr	r3, [r6, #0]
 8004e0e:	a809      	add	r0, sp, #36	; 0x24
 8004e10:	7819      	ldrb	r1, [r3, #0]
 8004e12:	00bb      	lsls	r3, r7, #2
 8004e14:	2202      	movs	r2, #2
 8004e16:	5818      	ldr	r0, [r3, r0]
 8004e18:	f000 fa6e 	bl	80052f8 <memchr>
 8004e1c:	2800      	cmp	r0, #0
 8004e1e:	d02b      	beq.n	8004e78 <_scanf_i+0xc0>
 8004e20:	2f01      	cmp	r7, #1
 8004e22:	d162      	bne.n	8004eea <_scanf_i+0x132>
 8004e24:	6863      	ldr	r3, [r4, #4]
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d106      	bne.n	8004e38 <_scanf_i+0x80>
 8004e2a:	3308      	adds	r3, #8
 8004e2c:	6822      	ldr	r2, [r4, #0]
 8004e2e:	6063      	str	r3, [r4, #4]
 8004e30:	33f9      	adds	r3, #249	; 0xf9
 8004e32:	33ff      	adds	r3, #255	; 0xff
 8004e34:	4313      	orrs	r3, r2
 8004e36:	6023      	str	r3, [r4, #0]
 8004e38:	4b5e      	ldr	r3, [pc, #376]	; (8004fb4 <_scanf_i+0x1fc>)
 8004e3a:	6822      	ldr	r2, [r4, #0]
 8004e3c:	4013      	ands	r3, r2
 8004e3e:	6023      	str	r3, [r4, #0]
 8004e40:	68a3      	ldr	r3, [r4, #8]
 8004e42:	1e5a      	subs	r2, r3, #1
 8004e44:	60a2      	str	r2, [r4, #8]
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d016      	beq.n	8004e78 <_scanf_i+0xc0>
 8004e4a:	6833      	ldr	r3, [r6, #0]
 8004e4c:	1c5a      	adds	r2, r3, #1
 8004e4e:	6032      	str	r2, [r6, #0]
 8004e50:	781b      	ldrb	r3, [r3, #0]
 8004e52:	9a03      	ldr	r2, [sp, #12]
 8004e54:	7013      	strb	r3, [r2, #0]
 8004e56:	6873      	ldr	r3, [r6, #4]
 8004e58:	1c55      	adds	r5, r2, #1
 8004e5a:	3b01      	subs	r3, #1
 8004e5c:	6073      	str	r3, [r6, #4]
 8004e5e:	9503      	str	r5, [sp, #12]
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	dc09      	bgt.n	8004e78 <_scanf_i+0xc0>
 8004e64:	23c0      	movs	r3, #192	; 0xc0
 8004e66:	005b      	lsls	r3, r3, #1
 8004e68:	58e3      	ldr	r3, [r4, r3]
 8004e6a:	0031      	movs	r1, r6
 8004e6c:	9805      	ldr	r0, [sp, #20]
 8004e6e:	9307      	str	r3, [sp, #28]
 8004e70:	4798      	blx	r3
 8004e72:	2800      	cmp	r0, #0
 8004e74:	d000      	beq.n	8004e78 <_scanf_i+0xc0>
 8004e76:	e081      	b.n	8004f7c <_scanf_i+0x1c4>
 8004e78:	3701      	adds	r7, #1
 8004e7a:	2f03      	cmp	r7, #3
 8004e7c:	d1c6      	bne.n	8004e0c <_scanf_i+0x54>
 8004e7e:	6863      	ldr	r3, [r4, #4]
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d101      	bne.n	8004e88 <_scanf_i+0xd0>
 8004e84:	330a      	adds	r3, #10
 8004e86:	6063      	str	r3, [r4, #4]
 8004e88:	2110      	movs	r1, #16
 8004e8a:	2700      	movs	r7, #0
 8004e8c:	6863      	ldr	r3, [r4, #4]
 8004e8e:	6960      	ldr	r0, [r4, #20]
 8004e90:	1ac9      	subs	r1, r1, r3
 8004e92:	4b49      	ldr	r3, [pc, #292]	; (8004fb8 <_scanf_i+0x200>)
 8004e94:	18c9      	adds	r1, r1, r3
 8004e96:	f000 f893 	bl	8004fc0 <__sccl>
 8004e9a:	9d03      	ldr	r5, [sp, #12]
 8004e9c:	68a3      	ldr	r3, [r4, #8]
 8004e9e:	6822      	ldr	r2, [r4, #0]
 8004ea0:	9303      	str	r3, [sp, #12]
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d041      	beq.n	8004f2a <_scanf_i+0x172>
 8004ea6:	6831      	ldr	r1, [r6, #0]
 8004ea8:	6963      	ldr	r3, [r4, #20]
 8004eaa:	7808      	ldrb	r0, [r1, #0]
 8004eac:	5c1b      	ldrb	r3, [r3, r0]
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d03b      	beq.n	8004f2a <_scanf_i+0x172>
 8004eb2:	2830      	cmp	r0, #48	; 0x30
 8004eb4:	d129      	bne.n	8004f0a <_scanf_i+0x152>
 8004eb6:	2380      	movs	r3, #128	; 0x80
 8004eb8:	011b      	lsls	r3, r3, #4
 8004eba:	421a      	tst	r2, r3
 8004ebc:	d025      	beq.n	8004f0a <_scanf_i+0x152>
 8004ebe:	9b04      	ldr	r3, [sp, #16]
 8004ec0:	3701      	adds	r7, #1
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d005      	beq.n	8004ed2 <_scanf_i+0x11a>
 8004ec6:	001a      	movs	r2, r3
 8004ec8:	9b03      	ldr	r3, [sp, #12]
 8004eca:	3a01      	subs	r2, #1
 8004ecc:	3301      	adds	r3, #1
 8004ece:	9204      	str	r2, [sp, #16]
 8004ed0:	60a3      	str	r3, [r4, #8]
 8004ed2:	6873      	ldr	r3, [r6, #4]
 8004ed4:	3b01      	subs	r3, #1
 8004ed6:	6073      	str	r3, [r6, #4]
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	dd1d      	ble.n	8004f18 <_scanf_i+0x160>
 8004edc:	6833      	ldr	r3, [r6, #0]
 8004ede:	3301      	adds	r3, #1
 8004ee0:	6033      	str	r3, [r6, #0]
 8004ee2:	68a3      	ldr	r3, [r4, #8]
 8004ee4:	3b01      	subs	r3, #1
 8004ee6:	60a3      	str	r3, [r4, #8]
 8004ee8:	e7d8      	b.n	8004e9c <_scanf_i+0xe4>
 8004eea:	2f02      	cmp	r7, #2
 8004eec:	d1a8      	bne.n	8004e40 <_scanf_i+0x88>
 8004eee:	21c0      	movs	r1, #192	; 0xc0
 8004ef0:	2380      	movs	r3, #128	; 0x80
 8004ef2:	6822      	ldr	r2, [r4, #0]
 8004ef4:	00c9      	lsls	r1, r1, #3
 8004ef6:	4011      	ands	r1, r2
 8004ef8:	009b      	lsls	r3, r3, #2
 8004efa:	4299      	cmp	r1, r3
 8004efc:	d1bf      	bne.n	8004e7e <_scanf_i+0xc6>
 8004efe:	3bf1      	subs	r3, #241	; 0xf1
 8004f00:	3bff      	subs	r3, #255	; 0xff
 8004f02:	6063      	str	r3, [r4, #4]
 8004f04:	33f0      	adds	r3, #240	; 0xf0
 8004f06:	4313      	orrs	r3, r2
 8004f08:	e799      	b.n	8004e3e <_scanf_i+0x86>
 8004f0a:	4b2c      	ldr	r3, [pc, #176]	; (8004fbc <_scanf_i+0x204>)
 8004f0c:	4013      	ands	r3, r2
 8004f0e:	6023      	str	r3, [r4, #0]
 8004f10:	780b      	ldrb	r3, [r1, #0]
 8004f12:	702b      	strb	r3, [r5, #0]
 8004f14:	3501      	adds	r5, #1
 8004f16:	e7dc      	b.n	8004ed2 <_scanf_i+0x11a>
 8004f18:	23c0      	movs	r3, #192	; 0xc0
 8004f1a:	005b      	lsls	r3, r3, #1
 8004f1c:	58e3      	ldr	r3, [r4, r3]
 8004f1e:	0031      	movs	r1, r6
 8004f20:	9805      	ldr	r0, [sp, #20]
 8004f22:	9303      	str	r3, [sp, #12]
 8004f24:	4798      	blx	r3
 8004f26:	2800      	cmp	r0, #0
 8004f28:	d0db      	beq.n	8004ee2 <_scanf_i+0x12a>
 8004f2a:	6823      	ldr	r3, [r4, #0]
 8004f2c:	05db      	lsls	r3, r3, #23
 8004f2e:	d50e      	bpl.n	8004f4e <_scanf_i+0x196>
 8004f30:	9b01      	ldr	r3, [sp, #4]
 8004f32:	429d      	cmp	r5, r3
 8004f34:	d907      	bls.n	8004f46 <_scanf_i+0x18e>
 8004f36:	23be      	movs	r3, #190	; 0xbe
 8004f38:	3d01      	subs	r5, #1
 8004f3a:	005b      	lsls	r3, r3, #1
 8004f3c:	0032      	movs	r2, r6
 8004f3e:	7829      	ldrb	r1, [r5, #0]
 8004f40:	58e3      	ldr	r3, [r4, r3]
 8004f42:	9805      	ldr	r0, [sp, #20]
 8004f44:	4798      	blx	r3
 8004f46:	9b01      	ldr	r3, [sp, #4]
 8004f48:	2001      	movs	r0, #1
 8004f4a:	429d      	cmp	r5, r3
 8004f4c:	d029      	beq.n	8004fa2 <_scanf_i+0x1ea>
 8004f4e:	6821      	ldr	r1, [r4, #0]
 8004f50:	2310      	movs	r3, #16
 8004f52:	000a      	movs	r2, r1
 8004f54:	401a      	ands	r2, r3
 8004f56:	4219      	tst	r1, r3
 8004f58:	d11c      	bne.n	8004f94 <_scanf_i+0x1dc>
 8004f5a:	702a      	strb	r2, [r5, #0]
 8004f5c:	6863      	ldr	r3, [r4, #4]
 8004f5e:	9901      	ldr	r1, [sp, #4]
 8004f60:	9805      	ldr	r0, [sp, #20]
 8004f62:	9e06      	ldr	r6, [sp, #24]
 8004f64:	47b0      	blx	r6
 8004f66:	9b02      	ldr	r3, [sp, #8]
 8004f68:	6821      	ldr	r1, [r4, #0]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	068a      	lsls	r2, r1, #26
 8004f6e:	d507      	bpl.n	8004f80 <_scanf_i+0x1c8>
 8004f70:	1d1a      	adds	r2, r3, #4
 8004f72:	9902      	ldr	r1, [sp, #8]
 8004f74:	600a      	str	r2, [r1, #0]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	6018      	str	r0, [r3, #0]
 8004f7a:	e008      	b.n	8004f8e <_scanf_i+0x1d6>
 8004f7c:	2700      	movs	r7, #0
 8004f7e:	e7d4      	b.n	8004f2a <_scanf_i+0x172>
 8004f80:	1d1a      	adds	r2, r3, #4
 8004f82:	07ce      	lsls	r6, r1, #31
 8004f84:	d5f5      	bpl.n	8004f72 <_scanf_i+0x1ba>
 8004f86:	9902      	ldr	r1, [sp, #8]
 8004f88:	600a      	str	r2, [r1, #0]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	8018      	strh	r0, [r3, #0]
 8004f8e:	68e3      	ldr	r3, [r4, #12]
 8004f90:	3301      	adds	r3, #1
 8004f92:	60e3      	str	r3, [r4, #12]
 8004f94:	2000      	movs	r0, #0
 8004f96:	9b01      	ldr	r3, [sp, #4]
 8004f98:	1aed      	subs	r5, r5, r3
 8004f9a:	6923      	ldr	r3, [r4, #16]
 8004f9c:	19ef      	adds	r7, r5, r7
 8004f9e:	19df      	adds	r7, r3, r7
 8004fa0:	6127      	str	r7, [r4, #16]
 8004fa2:	b00d      	add	sp, #52	; 0x34
 8004fa4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004fa6:	46c0      	nop			; (mov r8, r8)
 8004fa8:	08005638 	.word	0x08005638
 8004fac:	08005155 	.word	0x08005155
 8004fb0:	08005271 	.word	0x08005271
 8004fb4:	fffffaff 	.word	0xfffffaff
 8004fb8:	080056ec 	.word	0x080056ec
 8004fbc:	fffff6ff 	.word	0xfffff6ff

08004fc0 <__sccl>:
 8004fc0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004fc2:	780b      	ldrb	r3, [r1, #0]
 8004fc4:	0004      	movs	r4, r0
 8004fc6:	2b5e      	cmp	r3, #94	; 0x5e
 8004fc8:	d00c      	beq.n	8004fe4 <__sccl+0x24>
 8004fca:	1c48      	adds	r0, r1, #1
 8004fcc:	2100      	movs	r1, #0
 8004fce:	0022      	movs	r2, r4
 8004fd0:	1c65      	adds	r5, r4, #1
 8004fd2:	35ff      	adds	r5, #255	; 0xff
 8004fd4:	7011      	strb	r1, [r2, #0]
 8004fd6:	3201      	adds	r2, #1
 8004fd8:	42aa      	cmp	r2, r5
 8004fda:	d1fb      	bne.n	8004fd4 <__sccl+0x14>
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d105      	bne.n	8004fec <__sccl+0x2c>
 8004fe0:	3801      	subs	r0, #1
 8004fe2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004fe4:	784b      	ldrb	r3, [r1, #1]
 8004fe6:	1c88      	adds	r0, r1, #2
 8004fe8:	2101      	movs	r1, #1
 8004fea:	e7f0      	b.n	8004fce <__sccl+0xe>
 8004fec:	2201      	movs	r2, #1
 8004fee:	262d      	movs	r6, #45	; 0x2d
 8004ff0:	4051      	eors	r1, r2
 8004ff2:	0002      	movs	r2, r0
 8004ff4:	54e1      	strb	r1, [r4, r3]
 8004ff6:	7815      	ldrb	r5, [r2, #0]
 8004ff8:	1c50      	adds	r0, r2, #1
 8004ffa:	2d2d      	cmp	r5, #45	; 0x2d
 8004ffc:	d009      	beq.n	8005012 <__sccl+0x52>
 8004ffe:	2d5d      	cmp	r5, #93	; 0x5d
 8005000:	d0ef      	beq.n	8004fe2 <__sccl+0x22>
 8005002:	2d00      	cmp	r5, #0
 8005004:	d101      	bne.n	800500a <__sccl+0x4a>
 8005006:	0010      	movs	r0, r2
 8005008:	e7eb      	b.n	8004fe2 <__sccl+0x22>
 800500a:	002b      	movs	r3, r5
 800500c:	e7f1      	b.n	8004ff2 <__sccl+0x32>
 800500e:	0033      	movs	r3, r6
 8005010:	e7ef      	b.n	8004ff2 <__sccl+0x32>
 8005012:	7855      	ldrb	r5, [r2, #1]
 8005014:	2d5d      	cmp	r5, #93	; 0x5d
 8005016:	d0fa      	beq.n	800500e <__sccl+0x4e>
 8005018:	42ab      	cmp	r3, r5
 800501a:	dcf8      	bgt.n	800500e <__sccl+0x4e>
 800501c:	0018      	movs	r0, r3
 800501e:	3202      	adds	r2, #2
 8005020:	3001      	adds	r0, #1
 8005022:	5421      	strb	r1, [r4, r0]
 8005024:	4285      	cmp	r5, r0
 8005026:	dcfb      	bgt.n	8005020 <__sccl+0x60>
 8005028:	2000      	movs	r0, #0
 800502a:	1c5f      	adds	r7, r3, #1
 800502c:	42ab      	cmp	r3, r5
 800502e:	da01      	bge.n	8005034 <__sccl+0x74>
 8005030:	1ae8      	subs	r0, r5, r3
 8005032:	3801      	subs	r0, #1
 8005034:	183b      	adds	r3, r7, r0
 8005036:	e7de      	b.n	8004ff6 <__sccl+0x36>

08005038 <_strtol_l.constprop.0>:
 8005038:	b5f0      	push	{r4, r5, r6, r7, lr}
 800503a:	b087      	sub	sp, #28
 800503c:	001e      	movs	r6, r3
 800503e:	9005      	str	r0, [sp, #20]
 8005040:	9101      	str	r1, [sp, #4]
 8005042:	9202      	str	r2, [sp, #8]
 8005044:	2b01      	cmp	r3, #1
 8005046:	d045      	beq.n	80050d4 <_strtol_l.constprop.0+0x9c>
 8005048:	000b      	movs	r3, r1
 800504a:	2e24      	cmp	r6, #36	; 0x24
 800504c:	d842      	bhi.n	80050d4 <_strtol_l.constprop.0+0x9c>
 800504e:	4a3f      	ldr	r2, [pc, #252]	; (800514c <_strtol_l.constprop.0+0x114>)
 8005050:	2108      	movs	r1, #8
 8005052:	4694      	mov	ip, r2
 8005054:	001a      	movs	r2, r3
 8005056:	4660      	mov	r0, ip
 8005058:	7814      	ldrb	r4, [r2, #0]
 800505a:	3301      	adds	r3, #1
 800505c:	5d00      	ldrb	r0, [r0, r4]
 800505e:	001d      	movs	r5, r3
 8005060:	0007      	movs	r7, r0
 8005062:	400f      	ands	r7, r1
 8005064:	4208      	tst	r0, r1
 8005066:	d1f5      	bne.n	8005054 <_strtol_l.constprop.0+0x1c>
 8005068:	2c2d      	cmp	r4, #45	; 0x2d
 800506a:	d13a      	bne.n	80050e2 <_strtol_l.constprop.0+0xaa>
 800506c:	2701      	movs	r7, #1
 800506e:	781c      	ldrb	r4, [r3, #0]
 8005070:	1c95      	adds	r5, r2, #2
 8005072:	2e00      	cmp	r6, #0
 8005074:	d065      	beq.n	8005142 <_strtol_l.constprop.0+0x10a>
 8005076:	2e10      	cmp	r6, #16
 8005078:	d109      	bne.n	800508e <_strtol_l.constprop.0+0x56>
 800507a:	2c30      	cmp	r4, #48	; 0x30
 800507c:	d107      	bne.n	800508e <_strtol_l.constprop.0+0x56>
 800507e:	2220      	movs	r2, #32
 8005080:	782b      	ldrb	r3, [r5, #0]
 8005082:	4393      	bics	r3, r2
 8005084:	2b58      	cmp	r3, #88	; 0x58
 8005086:	d157      	bne.n	8005138 <_strtol_l.constprop.0+0x100>
 8005088:	2610      	movs	r6, #16
 800508a:	786c      	ldrb	r4, [r5, #1]
 800508c:	3502      	adds	r5, #2
 800508e:	4b30      	ldr	r3, [pc, #192]	; (8005150 <_strtol_l.constprop.0+0x118>)
 8005090:	0031      	movs	r1, r6
 8005092:	18fb      	adds	r3, r7, r3
 8005094:	0018      	movs	r0, r3
 8005096:	9303      	str	r3, [sp, #12]
 8005098:	f7fb f8ce 	bl	8000238 <__aeabi_uidivmod>
 800509c:	2300      	movs	r3, #0
 800509e:	2201      	movs	r2, #1
 80050a0:	4684      	mov	ip, r0
 80050a2:	0018      	movs	r0, r3
 80050a4:	9104      	str	r1, [sp, #16]
 80050a6:	4252      	negs	r2, r2
 80050a8:	0021      	movs	r1, r4
 80050aa:	3930      	subs	r1, #48	; 0x30
 80050ac:	2909      	cmp	r1, #9
 80050ae:	d81d      	bhi.n	80050ec <_strtol_l.constprop.0+0xb4>
 80050b0:	000c      	movs	r4, r1
 80050b2:	42a6      	cmp	r6, r4
 80050b4:	dd28      	ble.n	8005108 <_strtol_l.constprop.0+0xd0>
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	db24      	blt.n	8005104 <_strtol_l.constprop.0+0xcc>
 80050ba:	0013      	movs	r3, r2
 80050bc:	4584      	cmp	ip, r0
 80050be:	d306      	bcc.n	80050ce <_strtol_l.constprop.0+0x96>
 80050c0:	d102      	bne.n	80050c8 <_strtol_l.constprop.0+0x90>
 80050c2:	9904      	ldr	r1, [sp, #16]
 80050c4:	42a1      	cmp	r1, r4
 80050c6:	db02      	blt.n	80050ce <_strtol_l.constprop.0+0x96>
 80050c8:	2301      	movs	r3, #1
 80050ca:	4370      	muls	r0, r6
 80050cc:	1820      	adds	r0, r4, r0
 80050ce:	782c      	ldrb	r4, [r5, #0]
 80050d0:	3501      	adds	r5, #1
 80050d2:	e7e9      	b.n	80050a8 <_strtol_l.constprop.0+0x70>
 80050d4:	f7ff f8b8 	bl	8004248 <__errno>
 80050d8:	2316      	movs	r3, #22
 80050da:	6003      	str	r3, [r0, #0]
 80050dc:	2000      	movs	r0, #0
 80050de:	b007      	add	sp, #28
 80050e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80050e2:	2c2b      	cmp	r4, #43	; 0x2b
 80050e4:	d1c5      	bne.n	8005072 <_strtol_l.constprop.0+0x3a>
 80050e6:	781c      	ldrb	r4, [r3, #0]
 80050e8:	1c95      	adds	r5, r2, #2
 80050ea:	e7c2      	b.n	8005072 <_strtol_l.constprop.0+0x3a>
 80050ec:	0021      	movs	r1, r4
 80050ee:	3941      	subs	r1, #65	; 0x41
 80050f0:	2919      	cmp	r1, #25
 80050f2:	d801      	bhi.n	80050f8 <_strtol_l.constprop.0+0xc0>
 80050f4:	3c37      	subs	r4, #55	; 0x37
 80050f6:	e7dc      	b.n	80050b2 <_strtol_l.constprop.0+0x7a>
 80050f8:	0021      	movs	r1, r4
 80050fa:	3961      	subs	r1, #97	; 0x61
 80050fc:	2919      	cmp	r1, #25
 80050fe:	d803      	bhi.n	8005108 <_strtol_l.constprop.0+0xd0>
 8005100:	3c57      	subs	r4, #87	; 0x57
 8005102:	e7d6      	b.n	80050b2 <_strtol_l.constprop.0+0x7a>
 8005104:	0013      	movs	r3, r2
 8005106:	e7e2      	b.n	80050ce <_strtol_l.constprop.0+0x96>
 8005108:	2b00      	cmp	r3, #0
 800510a:	da09      	bge.n	8005120 <_strtol_l.constprop.0+0xe8>
 800510c:	2322      	movs	r3, #34	; 0x22
 800510e:	9a05      	ldr	r2, [sp, #20]
 8005110:	9803      	ldr	r0, [sp, #12]
 8005112:	6013      	str	r3, [r2, #0]
 8005114:	9b02      	ldr	r3, [sp, #8]
 8005116:	2b00      	cmp	r3, #0
 8005118:	d0e1      	beq.n	80050de <_strtol_l.constprop.0+0xa6>
 800511a:	1e6b      	subs	r3, r5, #1
 800511c:	9301      	str	r3, [sp, #4]
 800511e:	e007      	b.n	8005130 <_strtol_l.constprop.0+0xf8>
 8005120:	2f00      	cmp	r7, #0
 8005122:	d000      	beq.n	8005126 <_strtol_l.constprop.0+0xee>
 8005124:	4240      	negs	r0, r0
 8005126:	9a02      	ldr	r2, [sp, #8]
 8005128:	2a00      	cmp	r2, #0
 800512a:	d0d8      	beq.n	80050de <_strtol_l.constprop.0+0xa6>
 800512c:	2b00      	cmp	r3, #0
 800512e:	d1f4      	bne.n	800511a <_strtol_l.constprop.0+0xe2>
 8005130:	9b02      	ldr	r3, [sp, #8]
 8005132:	9a01      	ldr	r2, [sp, #4]
 8005134:	601a      	str	r2, [r3, #0]
 8005136:	e7d2      	b.n	80050de <_strtol_l.constprop.0+0xa6>
 8005138:	2430      	movs	r4, #48	; 0x30
 800513a:	2e00      	cmp	r6, #0
 800513c:	d1a7      	bne.n	800508e <_strtol_l.constprop.0+0x56>
 800513e:	3608      	adds	r6, #8
 8005140:	e7a5      	b.n	800508e <_strtol_l.constprop.0+0x56>
 8005142:	2c30      	cmp	r4, #48	; 0x30
 8005144:	d09b      	beq.n	800507e <_strtol_l.constprop.0+0x46>
 8005146:	260a      	movs	r6, #10
 8005148:	e7a1      	b.n	800508e <_strtol_l.constprop.0+0x56>
 800514a:	46c0      	nop			; (mov r8, r8)
 800514c:	080056ff 	.word	0x080056ff
 8005150:	7fffffff 	.word	0x7fffffff

08005154 <_strtol_r>:
 8005154:	b510      	push	{r4, lr}
 8005156:	f7ff ff6f 	bl	8005038 <_strtol_l.constprop.0>
 800515a:	bd10      	pop	{r4, pc}

0800515c <_strtoul_l.constprop.0>:
 800515c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800515e:	b087      	sub	sp, #28
 8005160:	9202      	str	r2, [sp, #8]
 8005162:	4a42      	ldr	r2, [pc, #264]	; (800526c <_strtoul_l.constprop.0+0x110>)
 8005164:	001e      	movs	r6, r3
 8005166:	9101      	str	r1, [sp, #4]
 8005168:	000b      	movs	r3, r1
 800516a:	4694      	mov	ip, r2
 800516c:	2108      	movs	r1, #8
 800516e:	9005      	str	r0, [sp, #20]
 8005170:	001a      	movs	r2, r3
 8005172:	4660      	mov	r0, ip
 8005174:	7814      	ldrb	r4, [r2, #0]
 8005176:	3301      	adds	r3, #1
 8005178:	5d00      	ldrb	r0, [r0, r4]
 800517a:	001d      	movs	r5, r3
 800517c:	0007      	movs	r7, r0
 800517e:	400f      	ands	r7, r1
 8005180:	4208      	tst	r0, r1
 8005182:	d1f5      	bne.n	8005170 <_strtoul_l.constprop.0+0x14>
 8005184:	2c2d      	cmp	r4, #45	; 0x2d
 8005186:	d13a      	bne.n	80051fe <_strtoul_l.constprop.0+0xa2>
 8005188:	2701      	movs	r7, #1
 800518a:	781c      	ldrb	r4, [r3, #0]
 800518c:	1c95      	adds	r5, r2, #2
 800518e:	2e00      	cmp	r6, #0
 8005190:	d067      	beq.n	8005262 <_strtoul_l.constprop.0+0x106>
 8005192:	2e10      	cmp	r6, #16
 8005194:	d109      	bne.n	80051aa <_strtoul_l.constprop.0+0x4e>
 8005196:	2c30      	cmp	r4, #48	; 0x30
 8005198:	d107      	bne.n	80051aa <_strtoul_l.constprop.0+0x4e>
 800519a:	2220      	movs	r2, #32
 800519c:	782b      	ldrb	r3, [r5, #0]
 800519e:	4393      	bics	r3, r2
 80051a0:	2b58      	cmp	r3, #88	; 0x58
 80051a2:	d159      	bne.n	8005258 <_strtoul_l.constprop.0+0xfc>
 80051a4:	2610      	movs	r6, #16
 80051a6:	786c      	ldrb	r4, [r5, #1]
 80051a8:	3502      	adds	r5, #2
 80051aa:	2001      	movs	r0, #1
 80051ac:	0031      	movs	r1, r6
 80051ae:	4240      	negs	r0, r0
 80051b0:	f7fa ffbc 	bl	800012c <__udivsi3>
 80051b4:	9003      	str	r0, [sp, #12]
 80051b6:	2001      	movs	r0, #1
 80051b8:	0031      	movs	r1, r6
 80051ba:	4240      	negs	r0, r0
 80051bc:	f7fb f83c 	bl	8000238 <__aeabi_uidivmod>
 80051c0:	2300      	movs	r3, #0
 80051c2:	9104      	str	r1, [sp, #16]
 80051c4:	2101      	movs	r1, #1
 80051c6:	2201      	movs	r2, #1
 80051c8:	0018      	movs	r0, r3
 80051ca:	468c      	mov	ip, r1
 80051cc:	4252      	negs	r2, r2
 80051ce:	0021      	movs	r1, r4
 80051d0:	3930      	subs	r1, #48	; 0x30
 80051d2:	2909      	cmp	r1, #9
 80051d4:	d818      	bhi.n	8005208 <_strtoul_l.constprop.0+0xac>
 80051d6:	000c      	movs	r4, r1
 80051d8:	42a6      	cmp	r6, r4
 80051da:	dd23      	ble.n	8005224 <_strtoul_l.constprop.0+0xc8>
 80051dc:	2b00      	cmp	r3, #0
 80051de:	db1f      	blt.n	8005220 <_strtoul_l.constprop.0+0xc4>
 80051e0:	9903      	ldr	r1, [sp, #12]
 80051e2:	0013      	movs	r3, r2
 80051e4:	4281      	cmp	r1, r0
 80051e6:	d307      	bcc.n	80051f8 <_strtoul_l.constprop.0+0x9c>
 80051e8:	d103      	bne.n	80051f2 <_strtoul_l.constprop.0+0x96>
 80051ea:	9904      	ldr	r1, [sp, #16]
 80051ec:	0013      	movs	r3, r2
 80051ee:	42a1      	cmp	r1, r4
 80051f0:	db02      	blt.n	80051f8 <_strtoul_l.constprop.0+0x9c>
 80051f2:	4663      	mov	r3, ip
 80051f4:	4370      	muls	r0, r6
 80051f6:	1820      	adds	r0, r4, r0
 80051f8:	782c      	ldrb	r4, [r5, #0]
 80051fa:	3501      	adds	r5, #1
 80051fc:	e7e7      	b.n	80051ce <_strtoul_l.constprop.0+0x72>
 80051fe:	2c2b      	cmp	r4, #43	; 0x2b
 8005200:	d1c5      	bne.n	800518e <_strtoul_l.constprop.0+0x32>
 8005202:	781c      	ldrb	r4, [r3, #0]
 8005204:	1c95      	adds	r5, r2, #2
 8005206:	e7c2      	b.n	800518e <_strtoul_l.constprop.0+0x32>
 8005208:	0021      	movs	r1, r4
 800520a:	3941      	subs	r1, #65	; 0x41
 800520c:	2919      	cmp	r1, #25
 800520e:	d801      	bhi.n	8005214 <_strtoul_l.constprop.0+0xb8>
 8005210:	3c37      	subs	r4, #55	; 0x37
 8005212:	e7e1      	b.n	80051d8 <_strtoul_l.constprop.0+0x7c>
 8005214:	0021      	movs	r1, r4
 8005216:	3961      	subs	r1, #97	; 0x61
 8005218:	2919      	cmp	r1, #25
 800521a:	d803      	bhi.n	8005224 <_strtoul_l.constprop.0+0xc8>
 800521c:	3c57      	subs	r4, #87	; 0x57
 800521e:	e7db      	b.n	80051d8 <_strtoul_l.constprop.0+0x7c>
 8005220:	0013      	movs	r3, r2
 8005222:	e7e9      	b.n	80051f8 <_strtoul_l.constprop.0+0x9c>
 8005224:	2b00      	cmp	r3, #0
 8005226:	da09      	bge.n	800523c <_strtoul_l.constprop.0+0xe0>
 8005228:	2322      	movs	r3, #34	; 0x22
 800522a:	2001      	movs	r0, #1
 800522c:	9a05      	ldr	r2, [sp, #20]
 800522e:	4240      	negs	r0, r0
 8005230:	6013      	str	r3, [r2, #0]
 8005232:	9b02      	ldr	r3, [sp, #8]
 8005234:	2b00      	cmp	r3, #0
 8005236:	d109      	bne.n	800524c <_strtoul_l.constprop.0+0xf0>
 8005238:	b007      	add	sp, #28
 800523a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800523c:	2f00      	cmp	r7, #0
 800523e:	d000      	beq.n	8005242 <_strtoul_l.constprop.0+0xe6>
 8005240:	4240      	negs	r0, r0
 8005242:	9a02      	ldr	r2, [sp, #8]
 8005244:	2a00      	cmp	r2, #0
 8005246:	d0f7      	beq.n	8005238 <_strtoul_l.constprop.0+0xdc>
 8005248:	2b00      	cmp	r3, #0
 800524a:	d001      	beq.n	8005250 <_strtoul_l.constprop.0+0xf4>
 800524c:	1e6b      	subs	r3, r5, #1
 800524e:	9301      	str	r3, [sp, #4]
 8005250:	9b02      	ldr	r3, [sp, #8]
 8005252:	9a01      	ldr	r2, [sp, #4]
 8005254:	601a      	str	r2, [r3, #0]
 8005256:	e7ef      	b.n	8005238 <_strtoul_l.constprop.0+0xdc>
 8005258:	2430      	movs	r4, #48	; 0x30
 800525a:	2e00      	cmp	r6, #0
 800525c:	d1a5      	bne.n	80051aa <_strtoul_l.constprop.0+0x4e>
 800525e:	3608      	adds	r6, #8
 8005260:	e7a3      	b.n	80051aa <_strtoul_l.constprop.0+0x4e>
 8005262:	2c30      	cmp	r4, #48	; 0x30
 8005264:	d099      	beq.n	800519a <_strtoul_l.constprop.0+0x3e>
 8005266:	260a      	movs	r6, #10
 8005268:	e79f      	b.n	80051aa <_strtoul_l.constprop.0+0x4e>
 800526a:	46c0      	nop			; (mov r8, r8)
 800526c:	080056ff 	.word	0x080056ff

08005270 <_strtoul_r>:
 8005270:	b510      	push	{r4, lr}
 8005272:	f7ff ff73 	bl	800515c <_strtoul_l.constprop.0>
 8005276:	bd10      	pop	{r4, pc}

08005278 <__submore>:
 8005278:	000b      	movs	r3, r1
 800527a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800527c:	6b4d      	ldr	r5, [r1, #52]	; 0x34
 800527e:	3344      	adds	r3, #68	; 0x44
 8005280:	000c      	movs	r4, r1
 8005282:	429d      	cmp	r5, r3
 8005284:	d11c      	bne.n	80052c0 <__submore+0x48>
 8005286:	2680      	movs	r6, #128	; 0x80
 8005288:	00f6      	lsls	r6, r6, #3
 800528a:	0031      	movs	r1, r6
 800528c:	f000 f8be 	bl	800540c <_malloc_r>
 8005290:	2800      	cmp	r0, #0
 8005292:	d102      	bne.n	800529a <__submore+0x22>
 8005294:	2001      	movs	r0, #1
 8005296:	4240      	negs	r0, r0
 8005298:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800529a:	0023      	movs	r3, r4
 800529c:	6360      	str	r0, [r4, #52]	; 0x34
 800529e:	63a6      	str	r6, [r4, #56]	; 0x38
 80052a0:	3346      	adds	r3, #70	; 0x46
 80052a2:	781a      	ldrb	r2, [r3, #0]
 80052a4:	4b10      	ldr	r3, [pc, #64]	; (80052e8 <__submore+0x70>)
 80052a6:	54c2      	strb	r2, [r0, r3]
 80052a8:	0023      	movs	r3, r4
 80052aa:	3345      	adds	r3, #69	; 0x45
 80052ac:	781a      	ldrb	r2, [r3, #0]
 80052ae:	4b0f      	ldr	r3, [pc, #60]	; (80052ec <__submore+0x74>)
 80052b0:	54c2      	strb	r2, [r0, r3]
 80052b2:	782a      	ldrb	r2, [r5, #0]
 80052b4:	4b0e      	ldr	r3, [pc, #56]	; (80052f0 <__submore+0x78>)
 80052b6:	54c2      	strb	r2, [r0, r3]
 80052b8:	18c0      	adds	r0, r0, r3
 80052ba:	6020      	str	r0, [r4, #0]
 80052bc:	2000      	movs	r0, #0
 80052be:	e7eb      	b.n	8005298 <__submore+0x20>
 80052c0:	6b8e      	ldr	r6, [r1, #56]	; 0x38
 80052c2:	0029      	movs	r1, r5
 80052c4:	0073      	lsls	r3, r6, #1
 80052c6:	001a      	movs	r2, r3
 80052c8:	9301      	str	r3, [sp, #4]
 80052ca:	f000 f915 	bl	80054f8 <_realloc_r>
 80052ce:	1e05      	subs	r5, r0, #0
 80052d0:	d0e0      	beq.n	8005294 <__submore+0x1c>
 80052d2:	1987      	adds	r7, r0, r6
 80052d4:	0001      	movs	r1, r0
 80052d6:	0032      	movs	r2, r6
 80052d8:	0038      	movs	r0, r7
 80052da:	f7fe ffdf 	bl	800429c <memcpy>
 80052de:	9b01      	ldr	r3, [sp, #4]
 80052e0:	6027      	str	r7, [r4, #0]
 80052e2:	6365      	str	r5, [r4, #52]	; 0x34
 80052e4:	63a3      	str	r3, [r4, #56]	; 0x38
 80052e6:	e7e9      	b.n	80052bc <__submore+0x44>
 80052e8:	000003ff 	.word	0x000003ff
 80052ec:	000003fe 	.word	0x000003fe
 80052f0:	000003fd 	.word	0x000003fd

080052f4 <__retarget_lock_acquire_recursive>:
 80052f4:	4770      	bx	lr

080052f6 <__retarget_lock_release_recursive>:
 80052f6:	4770      	bx	lr

080052f8 <memchr>:
 80052f8:	b2c9      	uxtb	r1, r1
 80052fa:	1882      	adds	r2, r0, r2
 80052fc:	4290      	cmp	r0, r2
 80052fe:	d101      	bne.n	8005304 <memchr+0xc>
 8005300:	2000      	movs	r0, #0
 8005302:	4770      	bx	lr
 8005304:	7803      	ldrb	r3, [r0, #0]
 8005306:	428b      	cmp	r3, r1
 8005308:	d0fb      	beq.n	8005302 <memchr+0xa>
 800530a:	3001      	adds	r0, #1
 800530c:	e7f6      	b.n	80052fc <memchr+0x4>

0800530e <memmove>:
 800530e:	b510      	push	{r4, lr}
 8005310:	4288      	cmp	r0, r1
 8005312:	d902      	bls.n	800531a <memmove+0xc>
 8005314:	188b      	adds	r3, r1, r2
 8005316:	4298      	cmp	r0, r3
 8005318:	d303      	bcc.n	8005322 <memmove+0x14>
 800531a:	2300      	movs	r3, #0
 800531c:	e007      	b.n	800532e <memmove+0x20>
 800531e:	5c8b      	ldrb	r3, [r1, r2]
 8005320:	5483      	strb	r3, [r0, r2]
 8005322:	3a01      	subs	r2, #1
 8005324:	d2fb      	bcs.n	800531e <memmove+0x10>
 8005326:	bd10      	pop	{r4, pc}
 8005328:	5ccc      	ldrb	r4, [r1, r3]
 800532a:	54c4      	strb	r4, [r0, r3]
 800532c:	3301      	adds	r3, #1
 800532e:	429a      	cmp	r2, r3
 8005330:	d1fa      	bne.n	8005328 <memmove+0x1a>
 8005332:	e7f8      	b.n	8005326 <memmove+0x18>

08005334 <_free_r>:
 8005334:	b570      	push	{r4, r5, r6, lr}
 8005336:	0005      	movs	r5, r0
 8005338:	2900      	cmp	r1, #0
 800533a:	d010      	beq.n	800535e <_free_r+0x2a>
 800533c:	1f0c      	subs	r4, r1, #4
 800533e:	6823      	ldr	r3, [r4, #0]
 8005340:	2b00      	cmp	r3, #0
 8005342:	da00      	bge.n	8005346 <_free_r+0x12>
 8005344:	18e4      	adds	r4, r4, r3
 8005346:	0028      	movs	r0, r5
 8005348:	f000 f918 	bl	800557c <__malloc_lock>
 800534c:	4a1d      	ldr	r2, [pc, #116]	; (80053c4 <_free_r+0x90>)
 800534e:	6813      	ldr	r3, [r2, #0]
 8005350:	2b00      	cmp	r3, #0
 8005352:	d105      	bne.n	8005360 <_free_r+0x2c>
 8005354:	6063      	str	r3, [r4, #4]
 8005356:	6014      	str	r4, [r2, #0]
 8005358:	0028      	movs	r0, r5
 800535a:	f000 f917 	bl	800558c <__malloc_unlock>
 800535e:	bd70      	pop	{r4, r5, r6, pc}
 8005360:	42a3      	cmp	r3, r4
 8005362:	d908      	bls.n	8005376 <_free_r+0x42>
 8005364:	6821      	ldr	r1, [r4, #0]
 8005366:	1860      	adds	r0, r4, r1
 8005368:	4283      	cmp	r3, r0
 800536a:	d1f3      	bne.n	8005354 <_free_r+0x20>
 800536c:	6818      	ldr	r0, [r3, #0]
 800536e:	685b      	ldr	r3, [r3, #4]
 8005370:	1841      	adds	r1, r0, r1
 8005372:	6021      	str	r1, [r4, #0]
 8005374:	e7ee      	b.n	8005354 <_free_r+0x20>
 8005376:	001a      	movs	r2, r3
 8005378:	685b      	ldr	r3, [r3, #4]
 800537a:	2b00      	cmp	r3, #0
 800537c:	d001      	beq.n	8005382 <_free_r+0x4e>
 800537e:	42a3      	cmp	r3, r4
 8005380:	d9f9      	bls.n	8005376 <_free_r+0x42>
 8005382:	6811      	ldr	r1, [r2, #0]
 8005384:	1850      	adds	r0, r2, r1
 8005386:	42a0      	cmp	r0, r4
 8005388:	d10b      	bne.n	80053a2 <_free_r+0x6e>
 800538a:	6820      	ldr	r0, [r4, #0]
 800538c:	1809      	adds	r1, r1, r0
 800538e:	1850      	adds	r0, r2, r1
 8005390:	6011      	str	r1, [r2, #0]
 8005392:	4283      	cmp	r3, r0
 8005394:	d1e0      	bne.n	8005358 <_free_r+0x24>
 8005396:	6818      	ldr	r0, [r3, #0]
 8005398:	685b      	ldr	r3, [r3, #4]
 800539a:	1841      	adds	r1, r0, r1
 800539c:	6011      	str	r1, [r2, #0]
 800539e:	6053      	str	r3, [r2, #4]
 80053a0:	e7da      	b.n	8005358 <_free_r+0x24>
 80053a2:	42a0      	cmp	r0, r4
 80053a4:	d902      	bls.n	80053ac <_free_r+0x78>
 80053a6:	230c      	movs	r3, #12
 80053a8:	602b      	str	r3, [r5, #0]
 80053aa:	e7d5      	b.n	8005358 <_free_r+0x24>
 80053ac:	6821      	ldr	r1, [r4, #0]
 80053ae:	1860      	adds	r0, r4, r1
 80053b0:	4283      	cmp	r3, r0
 80053b2:	d103      	bne.n	80053bc <_free_r+0x88>
 80053b4:	6818      	ldr	r0, [r3, #0]
 80053b6:	685b      	ldr	r3, [r3, #4]
 80053b8:	1841      	adds	r1, r0, r1
 80053ba:	6021      	str	r1, [r4, #0]
 80053bc:	6063      	str	r3, [r4, #4]
 80053be:	6054      	str	r4, [r2, #4]
 80053c0:	e7ca      	b.n	8005358 <_free_r+0x24>
 80053c2:	46c0      	nop			; (mov r8, r8)
 80053c4:	200001c0 	.word	0x200001c0

080053c8 <sbrk_aligned>:
 80053c8:	b570      	push	{r4, r5, r6, lr}
 80053ca:	4e0f      	ldr	r6, [pc, #60]	; (8005408 <sbrk_aligned+0x40>)
 80053cc:	000d      	movs	r5, r1
 80053ce:	6831      	ldr	r1, [r6, #0]
 80053d0:	0004      	movs	r4, r0
 80053d2:	2900      	cmp	r1, #0
 80053d4:	d102      	bne.n	80053dc <sbrk_aligned+0x14>
 80053d6:	f000 f8bf 	bl	8005558 <_sbrk_r>
 80053da:	6030      	str	r0, [r6, #0]
 80053dc:	0029      	movs	r1, r5
 80053de:	0020      	movs	r0, r4
 80053e0:	f000 f8ba 	bl	8005558 <_sbrk_r>
 80053e4:	1c43      	adds	r3, r0, #1
 80053e6:	d00a      	beq.n	80053fe <sbrk_aligned+0x36>
 80053e8:	2303      	movs	r3, #3
 80053ea:	1cc5      	adds	r5, r0, #3
 80053ec:	439d      	bics	r5, r3
 80053ee:	42a8      	cmp	r0, r5
 80053f0:	d007      	beq.n	8005402 <sbrk_aligned+0x3a>
 80053f2:	1a29      	subs	r1, r5, r0
 80053f4:	0020      	movs	r0, r4
 80053f6:	f000 f8af 	bl	8005558 <_sbrk_r>
 80053fa:	1c43      	adds	r3, r0, #1
 80053fc:	d101      	bne.n	8005402 <sbrk_aligned+0x3a>
 80053fe:	2501      	movs	r5, #1
 8005400:	426d      	negs	r5, r5
 8005402:	0028      	movs	r0, r5
 8005404:	bd70      	pop	{r4, r5, r6, pc}
 8005406:	46c0      	nop			; (mov r8, r8)
 8005408:	200001c4 	.word	0x200001c4

0800540c <_malloc_r>:
 800540c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800540e:	2203      	movs	r2, #3
 8005410:	1ccb      	adds	r3, r1, #3
 8005412:	4393      	bics	r3, r2
 8005414:	3308      	adds	r3, #8
 8005416:	0006      	movs	r6, r0
 8005418:	001f      	movs	r7, r3
 800541a:	2b0c      	cmp	r3, #12
 800541c:	d232      	bcs.n	8005484 <_malloc_r+0x78>
 800541e:	270c      	movs	r7, #12
 8005420:	42b9      	cmp	r1, r7
 8005422:	d831      	bhi.n	8005488 <_malloc_r+0x7c>
 8005424:	0030      	movs	r0, r6
 8005426:	f000 f8a9 	bl	800557c <__malloc_lock>
 800542a:	4d32      	ldr	r5, [pc, #200]	; (80054f4 <_malloc_r+0xe8>)
 800542c:	682b      	ldr	r3, [r5, #0]
 800542e:	001c      	movs	r4, r3
 8005430:	2c00      	cmp	r4, #0
 8005432:	d12e      	bne.n	8005492 <_malloc_r+0x86>
 8005434:	0039      	movs	r1, r7
 8005436:	0030      	movs	r0, r6
 8005438:	f7ff ffc6 	bl	80053c8 <sbrk_aligned>
 800543c:	0004      	movs	r4, r0
 800543e:	1c43      	adds	r3, r0, #1
 8005440:	d11e      	bne.n	8005480 <_malloc_r+0x74>
 8005442:	682c      	ldr	r4, [r5, #0]
 8005444:	0025      	movs	r5, r4
 8005446:	2d00      	cmp	r5, #0
 8005448:	d14a      	bne.n	80054e0 <_malloc_r+0xd4>
 800544a:	6823      	ldr	r3, [r4, #0]
 800544c:	0029      	movs	r1, r5
 800544e:	18e3      	adds	r3, r4, r3
 8005450:	0030      	movs	r0, r6
 8005452:	9301      	str	r3, [sp, #4]
 8005454:	f000 f880 	bl	8005558 <_sbrk_r>
 8005458:	9b01      	ldr	r3, [sp, #4]
 800545a:	4283      	cmp	r3, r0
 800545c:	d143      	bne.n	80054e6 <_malloc_r+0xda>
 800545e:	6823      	ldr	r3, [r4, #0]
 8005460:	3703      	adds	r7, #3
 8005462:	1aff      	subs	r7, r7, r3
 8005464:	2303      	movs	r3, #3
 8005466:	439f      	bics	r7, r3
 8005468:	3708      	adds	r7, #8
 800546a:	2f0c      	cmp	r7, #12
 800546c:	d200      	bcs.n	8005470 <_malloc_r+0x64>
 800546e:	270c      	movs	r7, #12
 8005470:	0039      	movs	r1, r7
 8005472:	0030      	movs	r0, r6
 8005474:	f7ff ffa8 	bl	80053c8 <sbrk_aligned>
 8005478:	1c43      	adds	r3, r0, #1
 800547a:	d034      	beq.n	80054e6 <_malloc_r+0xda>
 800547c:	6823      	ldr	r3, [r4, #0]
 800547e:	19df      	adds	r7, r3, r7
 8005480:	6027      	str	r7, [r4, #0]
 8005482:	e013      	b.n	80054ac <_malloc_r+0xa0>
 8005484:	2b00      	cmp	r3, #0
 8005486:	dacb      	bge.n	8005420 <_malloc_r+0x14>
 8005488:	230c      	movs	r3, #12
 800548a:	2500      	movs	r5, #0
 800548c:	6033      	str	r3, [r6, #0]
 800548e:	0028      	movs	r0, r5
 8005490:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8005492:	6822      	ldr	r2, [r4, #0]
 8005494:	1bd1      	subs	r1, r2, r7
 8005496:	d420      	bmi.n	80054da <_malloc_r+0xce>
 8005498:	290b      	cmp	r1, #11
 800549a:	d917      	bls.n	80054cc <_malloc_r+0xc0>
 800549c:	19e2      	adds	r2, r4, r7
 800549e:	6027      	str	r7, [r4, #0]
 80054a0:	42a3      	cmp	r3, r4
 80054a2:	d111      	bne.n	80054c8 <_malloc_r+0xbc>
 80054a4:	602a      	str	r2, [r5, #0]
 80054a6:	6863      	ldr	r3, [r4, #4]
 80054a8:	6011      	str	r1, [r2, #0]
 80054aa:	6053      	str	r3, [r2, #4]
 80054ac:	0030      	movs	r0, r6
 80054ae:	0025      	movs	r5, r4
 80054b0:	f000 f86c 	bl	800558c <__malloc_unlock>
 80054b4:	2207      	movs	r2, #7
 80054b6:	350b      	adds	r5, #11
 80054b8:	1d23      	adds	r3, r4, #4
 80054ba:	4395      	bics	r5, r2
 80054bc:	1aea      	subs	r2, r5, r3
 80054be:	429d      	cmp	r5, r3
 80054c0:	d0e5      	beq.n	800548e <_malloc_r+0x82>
 80054c2:	1b5b      	subs	r3, r3, r5
 80054c4:	50a3      	str	r3, [r4, r2]
 80054c6:	e7e2      	b.n	800548e <_malloc_r+0x82>
 80054c8:	605a      	str	r2, [r3, #4]
 80054ca:	e7ec      	b.n	80054a6 <_malloc_r+0x9a>
 80054cc:	6862      	ldr	r2, [r4, #4]
 80054ce:	42a3      	cmp	r3, r4
 80054d0:	d101      	bne.n	80054d6 <_malloc_r+0xca>
 80054d2:	602a      	str	r2, [r5, #0]
 80054d4:	e7ea      	b.n	80054ac <_malloc_r+0xa0>
 80054d6:	605a      	str	r2, [r3, #4]
 80054d8:	e7e8      	b.n	80054ac <_malloc_r+0xa0>
 80054da:	0023      	movs	r3, r4
 80054dc:	6864      	ldr	r4, [r4, #4]
 80054de:	e7a7      	b.n	8005430 <_malloc_r+0x24>
 80054e0:	002c      	movs	r4, r5
 80054e2:	686d      	ldr	r5, [r5, #4]
 80054e4:	e7af      	b.n	8005446 <_malloc_r+0x3a>
 80054e6:	230c      	movs	r3, #12
 80054e8:	0030      	movs	r0, r6
 80054ea:	6033      	str	r3, [r6, #0]
 80054ec:	f000 f84e 	bl	800558c <__malloc_unlock>
 80054f0:	e7cd      	b.n	800548e <_malloc_r+0x82>
 80054f2:	46c0      	nop			; (mov r8, r8)
 80054f4:	200001c0 	.word	0x200001c0

080054f8 <_realloc_r>:
 80054f8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80054fa:	0007      	movs	r7, r0
 80054fc:	000e      	movs	r6, r1
 80054fe:	0014      	movs	r4, r2
 8005500:	2900      	cmp	r1, #0
 8005502:	d105      	bne.n	8005510 <_realloc_r+0x18>
 8005504:	0011      	movs	r1, r2
 8005506:	f7ff ff81 	bl	800540c <_malloc_r>
 800550a:	0005      	movs	r5, r0
 800550c:	0028      	movs	r0, r5
 800550e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8005510:	2a00      	cmp	r2, #0
 8005512:	d103      	bne.n	800551c <_realloc_r+0x24>
 8005514:	f7ff ff0e 	bl	8005334 <_free_r>
 8005518:	0025      	movs	r5, r4
 800551a:	e7f7      	b.n	800550c <_realloc_r+0x14>
 800551c:	f000 f83e 	bl	800559c <_malloc_usable_size_r>
 8005520:	9001      	str	r0, [sp, #4]
 8005522:	4284      	cmp	r4, r0
 8005524:	d803      	bhi.n	800552e <_realloc_r+0x36>
 8005526:	0035      	movs	r5, r6
 8005528:	0843      	lsrs	r3, r0, #1
 800552a:	42a3      	cmp	r3, r4
 800552c:	d3ee      	bcc.n	800550c <_realloc_r+0x14>
 800552e:	0021      	movs	r1, r4
 8005530:	0038      	movs	r0, r7
 8005532:	f7ff ff6b 	bl	800540c <_malloc_r>
 8005536:	1e05      	subs	r5, r0, #0
 8005538:	d0e8      	beq.n	800550c <_realloc_r+0x14>
 800553a:	9b01      	ldr	r3, [sp, #4]
 800553c:	0022      	movs	r2, r4
 800553e:	429c      	cmp	r4, r3
 8005540:	d900      	bls.n	8005544 <_realloc_r+0x4c>
 8005542:	001a      	movs	r2, r3
 8005544:	0031      	movs	r1, r6
 8005546:	0028      	movs	r0, r5
 8005548:	f7fe fea8 	bl	800429c <memcpy>
 800554c:	0031      	movs	r1, r6
 800554e:	0038      	movs	r0, r7
 8005550:	f7ff fef0 	bl	8005334 <_free_r>
 8005554:	e7da      	b.n	800550c <_realloc_r+0x14>
	...

08005558 <_sbrk_r>:
 8005558:	2300      	movs	r3, #0
 800555a:	b570      	push	{r4, r5, r6, lr}
 800555c:	4d06      	ldr	r5, [pc, #24]	; (8005578 <_sbrk_r+0x20>)
 800555e:	0004      	movs	r4, r0
 8005560:	0008      	movs	r0, r1
 8005562:	602b      	str	r3, [r5, #0]
 8005564:	f7fb fb4c 	bl	8000c00 <_sbrk>
 8005568:	1c43      	adds	r3, r0, #1
 800556a:	d103      	bne.n	8005574 <_sbrk_r+0x1c>
 800556c:	682b      	ldr	r3, [r5, #0]
 800556e:	2b00      	cmp	r3, #0
 8005570:	d000      	beq.n	8005574 <_sbrk_r+0x1c>
 8005572:	6023      	str	r3, [r4, #0]
 8005574:	bd70      	pop	{r4, r5, r6, pc}
 8005576:	46c0      	nop			; (mov r8, r8)
 8005578:	200001b8 	.word	0x200001b8

0800557c <__malloc_lock>:
 800557c:	b510      	push	{r4, lr}
 800557e:	4802      	ldr	r0, [pc, #8]	; (8005588 <__malloc_lock+0xc>)
 8005580:	f7ff feb8 	bl	80052f4 <__retarget_lock_acquire_recursive>
 8005584:	bd10      	pop	{r4, pc}
 8005586:	46c0      	nop			; (mov r8, r8)
 8005588:	200001bc 	.word	0x200001bc

0800558c <__malloc_unlock>:
 800558c:	b510      	push	{r4, lr}
 800558e:	4802      	ldr	r0, [pc, #8]	; (8005598 <__malloc_unlock+0xc>)
 8005590:	f7ff feb1 	bl	80052f6 <__retarget_lock_release_recursive>
 8005594:	bd10      	pop	{r4, pc}
 8005596:	46c0      	nop			; (mov r8, r8)
 8005598:	200001bc 	.word	0x200001bc

0800559c <_malloc_usable_size_r>:
 800559c:	1f0b      	subs	r3, r1, #4
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	1f18      	subs	r0, r3, #4
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	da01      	bge.n	80055aa <_malloc_usable_size_r+0xe>
 80055a6:	580b      	ldr	r3, [r1, r0]
 80055a8:	18c0      	adds	r0, r0, r3
 80055aa:	4770      	bx	lr

080055ac <_init>:
 80055ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80055ae:	46c0      	nop			; (mov r8, r8)
 80055b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80055b2:	bc08      	pop	{r3}
 80055b4:	469e      	mov	lr, r3
 80055b6:	4770      	bx	lr

080055b8 <_fini>:
 80055b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80055ba:	46c0      	nop			; (mov r8, r8)
 80055bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80055be:	bc08      	pop	{r3}
 80055c0:	469e      	mov	lr, r3
 80055c2:	4770      	bx	lr
